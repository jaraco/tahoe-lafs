from twisted.internet import defer as defer, error as error
from twisted.python import log as log
from twisted.python.failure import Failure as Failure
from twisted.spread import pb as pb
from twisted.words.im import basesupport as basesupport, interfaces as interfaces
from twisted.words.im.locals import AWAY as AWAY, OFFLINE as OFFLINE, ONLINE as ONLINE
from typing import Any, Optional

class TwistedWordsPerson(basesupport.AbstractPerson):
    status: Any = ...
    def __init__(self, name: Any, wordsAccount: Any) -> None: ...
    def isOnline(self): ...
    def getStatus(self): ...
    def sendMessage(self, text: Any, metadata: Any): ...
    def metadataFailed(self, result: Any, text: Any): ...
    def setStatus(self, status: Any) -> None: ...

class TwistedWordsGroup(basesupport.AbstractGroup):
    joined: int = ...
    def __init__(self, name: Any, wordsClient: Any) -> None: ...
    def sendGroupMessage(self, text: Any, metadata: Optional[Any] = ...): ...
    def setTopic(self, text: Any) -> None: ...
    def metadataFailed(self, result: Any, text: Any): ...
    def joining(self) -> None: ...
    def leaving(self) -> None: ...
    def leave(self): ...

class TwistedWordsClient(pb.Referenceable, basesupport.AbstractClientMixin):
    accountName: Any = ...
    name: Any = ...
    chat: Any = ...
    account: Any = ...
    def __init__(self, acct: Any, serviceName: Any, perspectiveName: Any, chatui: Any, _logonDeferred: Optional[Any] = ...) -> None: ...
    def getPerson(self, name: Any): ...
    def getGroup(self, name: Any): ...
    def getGroupConversation(self, name: Any): ...
    def addContact(self, name: Any) -> None: ...
    def remote_receiveGroupMembers(self, names: Any, group: Any) -> None: ...
    def remote_receiveGroupMessage(self, sender: Any, group: Any, message: Any, metadata: Optional[Any] = ...) -> None: ...
    def remote_memberJoined(self, member: Any, group: Any) -> None: ...
    def remote_memberLeft(self, member: Any, group: Any) -> None: ...
    def remote_notifyStatusChanged(self, name: Any, status: Any) -> None: ...
    def remote_receiveDirectMessage(self, name: Any, message: Any, metadata: Optional[Any] = ...) -> None: ...
    def remote_receiveContactList(self, clist: Any) -> None: ...
    def remote_setGroupMetadata(self, dict_: Any, groupName: Any) -> None: ...
    def joinGroup(self, name: Any): ...
    def leaveGroup(self, name: Any): ...
    perspective: Any = ...
    def connected(self, perspective: Any) -> None: ...

pbFrontEnds: Any

class PBAccount(basesupport.AbstractAccount):
    gatewayType: str = ...
    services: Any = ...
    def __init__(self, accountName: Any, autoLogin: Any, username: Any, password: Any, host: Any, port: Any, services: Optional[Any] = ...) -> None: ...
    def logOn(self, chatui: Any): ...
