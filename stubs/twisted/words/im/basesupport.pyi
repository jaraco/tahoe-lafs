from twisted.internet import error as error
from twisted.internet.protocol import Protocol as Protocol
from twisted.persisted import styles as styles
from twisted.python.reflect import prefixedMethods as prefixedMethods
from twisted.words.im.locals import OFFLINE as OFFLINE, OfflineError as OfflineError
from typing import Any

class AbstractGroup:
    name: Any = ...
    account: Any = ...
    def __init__(self, name: Any, account: Any) -> None: ...
    def getGroupCommands(self): ...
    def getTargetCommands(self, target: Any): ...
    def join(self) -> None: ...
    def leave(self) -> None: ...

class AbstractPerson:
    name: Any = ...
    account: Any = ...
    status: Any = ...
    def __init__(self, name: Any, baseAccount: Any) -> None: ...
    def getPersonCommands(self): ...
    def getIdleTime(self): ...

class AbstractClientMixin:
    account: Any = ...
    chat: Any = ...
    def __init__(self, account: Any, chatui: Any, logonDeferred: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any): ...
    def unregisterAsAccountClient(self) -> None: ...

class AbstractAccount(styles.Versioned):
    client: Any = ...
    persistanceVersion: int = ...
    accountName: Any = ...
    autoLogin: Any = ...
    username: Any = ...
    password: Any = ...
    host: Any = ...
    port: Any = ...
    def __init__(self, accountName: Any, autoLogin: Any, username: Any, password: Any, host: Any, port: Any) -> None: ...
    def upgrateToVersion2(self) -> None: ...
    def isOnline(self): ...
    def logOn(self, chatui: Any): ...
    def getGroup(self, name: Any): ...
    def getPerson(self, name: Any): ...
