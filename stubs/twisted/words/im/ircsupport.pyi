from twisted.internet import defer as defer, protocol as protocol, reactor as reactor
from twisted.internet.defer import succeed as succeed
from twisted.words.im import basesupport as basesupport, interfaces as interfaces, locals as locals
from twisted.words.im.locals import ONLINE as ONLINE
from twisted.words.protocols import irc as irc
from typing import Any, Optional

class IRCPerson(basesupport.AbstractPerson):
    def imperson_whois(self) -> None: ...
    def isOnline(self): ...
    def getStatus(self): ...
    status: Any = ...
    def setStatus(self, status: Any) -> None: ...
    def sendMessage(self, text: Any, meta: Optional[Any] = ...): ...

class IRCGroup(basesupport.AbstractGroup):
    def imgroup_testAction(self) -> None: ...
    def imtarget_kick(self, target: Any) -> None: ...
    def setTopic(self, topic: Any) -> None: ...
    def sendGroupMessage(self, text: Any, meta: Any = ...): ...
    def leave(self) -> None: ...

class IRCProto(basesupport.AbstractClientMixin, irc.IRCClient):
    def __init__(self, account: Any, chatui: Any, logonDeferred: Optional[Any] = ...) -> None: ...
    def getGroupConversation(self, name: Any, hide: int = ...): ...
    def getPerson(self, name: Any): ...
    performLogin: bool = ...
    nickname: Any = ...
    password: Any = ...
    realname: str = ...
    def connectionMade(self) -> None: ...
    name: Any = ...
    accountName: Any = ...
    def setNick(self, nick: Any) -> None: ...
    def kickedFrom(self, channel: Any, kicker: Any, message: Any): ...
    def userKicked(self, kickee: Any, channel: Any, kicker: Any, message: Any) -> None: ...
    def noticed(self, username: Any, channel: Any, message: Any) -> None: ...
    def privmsg(self, username: Any, channel: Any, message: Any, metadata: Optional[Any] = ...) -> None: ...
    def action(self, username: Any, channel: Any, emote: Any) -> None: ...
    def irc_RPL_NAMREPLY(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_ENDOFNAMES(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_TOPIC(self, prefix: Any, params: Any) -> None: ...
    def irc_333(self, prefix: Any, params: Any) -> None: ...
    def irc_TOPIC(self, prefix: Any, params: Any) -> None: ...
    def irc_JOIN(self, prefix: Any, params: Any) -> None: ...
    def irc_PART(self, prefix: Any, params: Any) -> None: ...
    def irc_QUIT(self, prefix: Any, params: Any) -> None: ...
    def irc_NICK(self, prefix: Any, params: Any) -> None: ...
    def irc_unknown(self, prefix: Any, command: Any, params: Any) -> None: ...
    def joinGroup(self, name: Any) -> None: ...

class IRCAccount(basesupport.AbstractAccount):
    gatewayType: str = ...
    channels: Any = ...
    def __init__(self, accountName: Any, autoLogin: Any, username: Any, password: Any, host: Any, port: Any, channels: str = ...) -> None: ...
