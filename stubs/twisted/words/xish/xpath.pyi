from twisted.python.compat import StringType as StringType, unicode as unicode
from typing import Any

class LiteralValue(unicode):
    def value(self, elem: Any): ...

class IndexValue:
    index: Any = ...
    def __init__(self, index: Any) -> None: ...
    def value(self, elem: Any): ...

class AttribValue:
    attribname: Any = ...
    def __init__(self, attribname: Any) -> None: ...
    def value_ns(self, elem: Any): ...
    def value(self, elem: Any): ...

class CompareValue:
    lhs: Any = ...
    rhs: Any = ...
    value: Any = ...
    def __init__(self, lhs: Any, op: Any, rhs: Any) -> None: ...

class BooleanValue:
    lhs: Any = ...
    rhs: Any = ...
    value: Any = ...
    def __init__(self, lhs: Any, op: Any, rhs: Any) -> None: ...

def Function(fname: Any): ...

class _not_Function:
    baseValue: Any = ...
    def __init__(self) -> None: ...
    def setParams(self, baseValue: Any) -> None: ...
    def value(self, elem: Any): ...

class _text_Function:
    def setParams(self) -> None: ...
    def value(self, elem: Any): ...

class _Location:
    predicates: Any = ...
    elementName: Any = ...
    childLocation: Any = ...
    def __init__(self) -> None: ...
    def matchesPredicates(self, elem: Any): ...
    def matches(self, elem: Any): ...
    def queryForString(self, elem: Any, resultbuf: Any) -> None: ...
    def queryForNodes(self, elem: Any, resultlist: Any) -> None: ...
    def queryForStringList(self, elem: Any, resultlist: Any) -> None: ...

class _AnyLocation:
    predicates: Any = ...
    elementName: Any = ...
    childLocation: Any = ...
    def __init__(self) -> None: ...
    def matchesPredicates(self, elem: Any): ...
    def listParents(self, elem: Any, parentlist: Any) -> None: ...
    def isRootMatch(self, elem: Any): ...
    def findFirstRootMatch(self, elem: Any): ...
    def matches(self, elem: Any): ...
    def queryForString(self, elem: Any, resultbuf: Any) -> None: ...
    def queryForNodes(self, elem: Any, resultlist: Any) -> None: ...
    def queryForStringList(self, elem: Any, resultlist: Any) -> None: ...

class XPathQuery:
    queryStr: Any = ...
    baseLocation: Any = ...
    def __init__(self, queryStr: Any) -> None: ...
    def __hash__(self) -> Any: ...
    def matches(self, elem: Any): ...
    def queryForString(self, elem: Any): ...
    def queryForNodes(self, elem: Any): ...
    def queryForStringList(self, elem: Any): ...

def internQuery(queryString: Any): ...
def matches(xpathstr: Any, elem: Any): ...
def queryForStringList(xpathstr: Any, elem: Any): ...
def queryForString(xpathstr: Any, elem: Any): ...
def queryForNodes(xpathstr: Any, elem: Any): ...
