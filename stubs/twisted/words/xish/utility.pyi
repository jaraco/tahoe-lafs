from twisted.python import log as log
from twisted.words.xish import xpath as xpath
from typing import Any, Optional

class _MethodWrapper:
    method: Any = ...
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, method: Any, *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...

class CallbackList:
    callbacks: Any = ...
    def __init__(self) -> None: ...
    def addCallback(self, onetime: Any, method: Any, *args: Any, **kwargs: Any) -> None: ...
    def removeCallback(self, method: Any) -> None: ...
    def callback(self, *args: Any, **kwargs: Any) -> None: ...
    def isEmpty(self): ...

class EventDispatcher:
    prefix: Any = ...
    def __init__(self, eventprefix: str = ...) -> None: ...
    def addOnetimeObserver(self, event: Any, observerfn: Any, priority: int = ..., *args: Any, **kwargs: Any) -> None: ...
    def addObserver(self, event: Any, observerfn: Any, priority: int = ..., *args: Any, **kwargs: Any) -> None: ...
    def removeObserver(self, event: Any, observerfn: Any): ...
    def dispatch(self, obj: Any, event: Optional[Any] = ...): ...

class XmlPipe:
    source: Any = ...
    sink: Any = ...
    def __init__(self): ...
