from twisted.web import sux as sux
from typing import Any, Optional
from zope.interface import Interface

G_PREFIXES: Any

class _ListSerializer:
    writelist: Any = ...
    prefixes: Any = ...
    prefixStack: Any = ...
    prefixCounter: int = ...
    def __init__(self, prefixes: Optional[Any] = ..., prefixesInScope: Optional[Any] = ...) -> None: ...
    def getValue(self): ...
    def getPrefix(self, uri: Any): ...
    def prefixInScope(self, prefix: Any): ...
    def serialize(self, elem: Any, closeElement: int = ..., defaultUri: str = ...) -> None: ...

SerializerClass: Any

def escapeToXml(text: Any, isattrib: int = ...): ...
def unescapeFromXml(text: Any): ...
def generateOnlyInterface(list: Any, int: Any) -> None: ...
def generateElementsQNamed(list: Any, name: Any, uri: Any) -> None: ...
def generateElementsNamed(list: Any, name: Any) -> None: ...

class SerializedXML(str): ...

class Namespace:
    def __init__(self, uri: Any) -> None: ...
    def __getattr__(self, n: Any): ...
    def __getitem__(self, n: Any): ...

class IElement(Interface):
    uri: Any = ...
    name: Any = ...
    defaultUri: Any = ...
    attributes: Any = ...
    children: Any = ...
    parent: Any = ...
    localPrefixes: Any = ...
    def toXml(prefixes: Optional[Any] = ..., closeElement: int = ..., defaultUri: str = ..., prefixesInScope: Optional[Any] = ...) -> None: ...
    def addElement(name: Any, defaultUri: Optional[Any] = ..., content: Optional[Any] = ...) -> None: ...
    def addChild(node: Any) -> None: ...
    def addContent(text: Any) -> None: ...

class Element:
    localPrefixes: Any = ...
    defaultUri: Any = ...
    attributes: Any = ...
    children: Any = ...
    parent: Any = ...
    def __init__(self, qname: Any, defaultUri: Optional[Any] = ..., attribs: Optional[Any] = ..., localPrefixes: Optional[Any] = ...) -> None: ...
    def __getattr__(self, key: Any): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __unicode__(self): ...
    def __bytes__(self): ...
    def getAttribute(self, attribname: Any, default: Optional[Any] = ...): ...
    def hasAttribute(self, attrib: Any): ...
    def compareAttribute(self, attrib: Any, value: Any): ...
    def swapAttributeValues(self, left: Any, right: Any) -> None: ...
    def addChild(self, node: Any): ...
    def addContent(self, text: str) -> str: ...
    def addElement(self, name: Any, defaultUri: Optional[Any] = ..., content: Optional[Any] = ...): ...
    def addRawXml(self, rawxmlstring: Any) -> None: ...
    def addUniqueId(self) -> None: ...
    def elements(self, uri: Optional[Any] = ..., name: Optional[Any] = ...): ...
    def toXml(self, prefixes: Optional[Any] = ..., closeElement: int = ..., defaultUri: str = ..., prefixesInScope: Optional[Any] = ...): ...
    def firstChildElement(self): ...

class ParserError(Exception): ...

def elementStream(): ...

class SuxElementStream(sux.XMLParser):
    DocumentStartEvent: Any = ...
    ElementEvent: Any = ...
    DocumentEndEvent: Any = ...
    currElem: Any = ...
    rootElem: Any = ...
    documentStarted: bool = ...
    defaultNsStack: Any = ...
    prefixStack: Any = ...
    def __init__(self) -> None: ...
    def parse(self, buffer: Any) -> None: ...
    def findUri(self, prefix: Any): ...
    def gotTagStart(self, name: Any, attributes: Any) -> None: ...
    def gotText(self, data: Any) -> None: ...
    def gotCData(self, data: Any) -> None: ...
    def gotComment(self, data: Any) -> None: ...
    entities: Any = ...
    def gotEntityReference(self, entityRef: Any) -> None: ...
    def gotTagEnd(self, name: Any) -> None: ...

class ExpatElementStream:
    DocumentStartEvent: Any = ...
    ElementEvent: Any = ...
    DocumentEndEvent: Any = ...
    error: Any = ...
    parser: Any = ...
    currElem: Any = ...
    defaultNsStack: Any = ...
    documentStarted: int = ...
    localPrefixes: Any = ...
    def __init__(self) -> None: ...
    def parse(self, buffer: Any) -> None: ...
