from twisted.internet import protocol as protocol
from twisted.python import failure as failure
from twisted.python.compat import intern as intern, unicode as unicode
from twisted.words.xish import domish as domish, utility as utility
from typing import Any

STREAM_CONNECTED_EVENT: Any
STREAM_START_EVENT: Any
STREAM_END_EVENT: Any
STREAM_ERROR_EVENT: Any

class XmlStream(protocol.Protocol, utility.EventDispatcher):
    stream: Any = ...
    rawDataOutFn: Any = ...
    rawDataInFn: Any = ...
    def __init__(self) -> None: ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def onDocumentStart(self, rootElement: Any) -> None: ...
    def onElement(self, element: Any) -> None: ...
    def onDocumentEnd(self) -> None: ...
    def setDispatchFn(self, fn: Any) -> None: ...
    def resetDispatchFn(self) -> None: ...
    def send(self, obj: Any) -> None: ...

class BootstrapMixin:
    bootstraps: Any = ...
    def __init__(self) -> None: ...
    def installBootstraps(self, dispatcher: Any) -> None: ...
    def addBootstrap(self, event: Any, fn: Any) -> None: ...
    def removeBootstrap(self, event: Any, fn: Any) -> None: ...

class XmlStreamFactoryMixin(BootstrapMixin):
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class XmlStreamFactory(XmlStreamFactoryMixin, protocol.ReconnectingClientFactory):
    protocol: Any = ...
    def buildProtocol(self, addr: Any): ...
