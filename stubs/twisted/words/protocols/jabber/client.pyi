from twisted.python.compat import unicode as unicode
from twisted.words.protocols.jabber import error as error, sasl as sasl, xmlstream as xmlstream
from twisted.words.protocols.jabber.jid import JID as JID
from twisted.words.xish import domish as domish, utility as utility, xpath as xpath
from typing import Any, Optional

NS_XMPP_STREAMS: str
NS_XMPP_BIND: str
NS_XMPP_SESSION: str
NS_IQ_AUTH_FEATURE: str
DigestAuthQry: Any
PlaintextAuthQry: Any

def basicClientFactory(jid: Any, secret: Any): ...

class IQ(domish.Element):
    callbacks: Any = ...
    def __init__(self, xmlstream: Any, type: str = ...) -> None: ...
    def addCallback(self, fn: Any, *args: Any, **kwargs: Any) -> None: ...
    def send(self, to: Optional[Any] = ...) -> None: ...

class IQAuthInitializer:
    INVALID_USER_EVENT: str = ...
    AUTH_FAILED_EVENT: str = ...
    xmlstream: Any = ...
    def __init__(self, xs: Any) -> None: ...
    def initialize(self): ...

class BasicAuthenticator(xmlstream.ConnectAuthenticator):
    namespace: str = ...
    INVALID_USER_EVENT: Any = ...
    AUTH_FAILED_EVENT: Any = ...
    REGISTER_FAILED_EVENT: str = ...
    jid: Any = ...
    password: Any = ...
    def __init__(self, jid: Any, password: Any) -> None: ...
    def associateWithStream(self, xs: Any) -> None: ...
    def registerAccount(self, username: Optional[Any] = ..., password: Optional[Any] = ...) -> None: ...

class CheckVersionInitializer:
    xmlstream: Any = ...
    def __init__(self, xs: Any) -> None: ...
    def initialize(self) -> None: ...

class BindInitializer(xmlstream.BaseFeatureInitiatingInitializer):
    feature: Any = ...
    def start(self): ...
    def onBind(self, iq: Any) -> None: ...

class SessionInitializer(xmlstream.BaseFeatureInitiatingInitializer):
    feature: Any = ...
    def start(self): ...

def XMPPClientFactory(jid: Any, password: Any, configurationForTLS: Optional[Any] = ...): ...

class XMPPAuthenticator(xmlstream.ConnectAuthenticator):
    namespace: str = ...
    jid: Any = ...
    password: Any = ...
    def __init__(self, jid: Any, password: Any, configurationForTLS: Optional[Any] = ...) -> None: ...
    def associateWithStream(self, xs: Any) -> None: ...
