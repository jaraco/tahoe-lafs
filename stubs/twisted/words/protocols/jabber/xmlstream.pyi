from twisted.internet import protocol
from twisted.words.xish import domish, xmlstream
from twisted.words.xish.xmlstream import STREAM_CONNECTED_EVENT as STREAM_CONNECTED_EVENT, STREAM_END_EVENT as STREAM_END_EVENT, STREAM_ERROR_EVENT as STREAM_ERROR_EVENT, STREAM_START_EVENT as STREAM_START_EVENT
from typing import Any, Optional

STREAM_AUTHD_EVENT: Any
INIT_FAILED_EVENT: Any
NS_STREAMS: str
NS_XMPP_TLS: str
Reset: Any

def hashPassword(sid: Any, password: Any): ...

class Authenticator:
    xmlstream: Any = ...
    def __init__(self) -> None: ...
    def connectionMade(self) -> None: ...
    def streamStarted(self, rootElement: Any) -> None: ...
    def associateWithStream(self, xmlstream: Any) -> None: ...

class ConnectAuthenticator(Authenticator):
    namespace: Any = ...
    otherHost: Any = ...
    def __init__(self, otherHost: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def initializeStream(self): ...
    def streamStarted(self, rootElement: Any) -> None: ...

class ListenAuthenticator(Authenticator):
    namespace: Any = ...
    def associateWithStream(self, xmlstream: Any) -> None: ...
    def streamStarted(self, rootElement: Any) -> None: ...

class FeatureNotAdvertized(Exception): ...

class BaseFeatureInitiatingInitializer:
    feature: Any = ...
    xmlstream: Any = ...
    required: Any = ...
    def __init__(self, xs: Any, required: bool = ...) -> None: ...
    def initialize(self): ...
    def start(self) -> None: ...

class TLSError(Exception): ...
class TLSFailed(TLSError): ...
class TLSRequired(TLSError): ...
class TLSNotSupported(TLSError): ...

class TLSInitiatingInitializer(BaseFeatureInitiatingInitializer):
    feature: Any = ...
    wanted: bool = ...
    def __init__(self, xs: Any, required: bool = ..., configurationForTLS: Optional[Any] = ...) -> None: ...
    def onProceed(self, obj: Any) -> None: ...
    def onFailure(self, obj: Any) -> None: ...
    def start(self): ...

class XmlStream(xmlstream.XmlStream):
    version: Any = ...
    namespace: str = ...
    thisEntity: Any = ...
    otherEntity: Any = ...
    sid: Any = ...
    initiating: bool = ...
    prefixes: Any = ...
    authenticator: Any = ...
    initializers: Any = ...
    features: Any = ...
    def __init__(self, authenticator: Any) -> None: ...
    def reset(self) -> None: ...
    def onStreamError(self, errelem: Any) -> None: ...
    def sendHeader(self) -> None: ...
    def sendFooter(self) -> None: ...
    def sendStreamError(self, streamError: Any) -> None: ...
    def send(self, obj: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def onDocumentStart(self, rootElement: Any) -> None: ...

class XmlStreamFactory(xmlstream.XmlStreamFactory):
    protocol: Any = ...
    authenticator: Any = ...
    def __init__(self, authenticator: Any) -> None: ...

class XmlStreamServerFactory(xmlstream.BootstrapMixin, protocol.ServerFactory):
    protocol: Any = ...
    authenticatorFactory: Any = ...
    def __init__(self, authenticatorFactory: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class TimeoutError(Exception): ...

def upgradeWithIQResponseTracker(xs: Any) -> None: ...

class IQ(domish.Element):
    timeout: Any = ...
    def __init__(self, xmlstream: Any, stanzaType: str = ...) -> None: ...
    def send(self, to: Optional[Any] = ...): ...

def toResponse(stanza: Any, stanzaType: Optional[Any] = ...): ...

class XMPPHandler:
    parent: Any = ...
    xmlstream: Any = ...
    def __init__(self) -> None: ...
    def setHandlerParent(self, parent: Any) -> None: ...
    def disownHandlerParent(self, parent: Any) -> None: ...
    def makeConnection(self, xs: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionInitialized(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def send(self, obj: Any) -> None: ...

class XMPPHandlerCollection:
    handlers: Any = ...
    def __init__(self) -> None: ...
    def __iter__(self) -> Any: ...
    def addHandler(self, handler: Any) -> None: ...
    def removeHandler(self, handler: Any) -> None: ...

class StreamManager(XMPPHandlerCollection):
    logTraffic: bool = ...
    xmlstream: Any = ...
    factory: Any = ...
    def __init__(self, factory: Any) -> None: ...
    def addHandler(self, handler: Any) -> None: ...
    def initializationFailed(self, reason: Any) -> None: ...
    def send(self, obj: Any) -> None: ...
