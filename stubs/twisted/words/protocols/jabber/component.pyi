from twisted.application import service as service
from twisted.internet import defer as defer
from twisted.python import log as log
from twisted.words.protocols.jabber import error as error, ijabber as ijabber, jstrports as jstrports, xmlstream as xmlstream
from twisted.words.xish import domish as domish
from typing import Any

NS_COMPONENT_ACCEPT: str

def componentFactory(componentid: Any, password: Any): ...

class ComponentInitiatingInitializer:
    xmlstream: Any = ...
    def __init__(self, xs: Any) -> None: ...
    def initialize(self): ...

class ConnectComponentAuthenticator(xmlstream.ConnectAuthenticator):
    namespace: Any = ...
    password: Any = ...
    def __init__(self, componentjid: Any, password: Any) -> None: ...
    def associateWithStream(self, xs: Any) -> None: ...

class ListenComponentAuthenticator(xmlstream.ListenAuthenticator):
    namespace: Any = ...
    secret: Any = ...
    def __init__(self, secret: Any) -> None: ...
    def associateWithStream(self, xs: Any) -> None: ...
    def streamStarted(self, rootElement: Any) -> None: ...
    def onElement(self, element: Any) -> None: ...
    def onHandshake(self, handshake: Any) -> None: ...

class Service(service.Service):
    def componentConnected(self, xs: Any) -> None: ...
    def componentDisconnected(self) -> None: ...
    def transportConnected(self, xs: Any) -> None: ...
    def send(self, obj: Any) -> None: ...

class ServiceManager(service.MultiService):
    jabberId: Any = ...
    xmlstream: Any = ...
    addBootstrap: Any = ...
    removeBootstrap: Any = ...
    def __init__(self, jid: Any, password: Any) -> None: ...
    def getFactory(self): ...
    def send(self, obj: Any) -> None: ...

def buildServiceManager(jid: Any, password: Any, strport: Any): ...

class Router:
    routes: Any = ...
    def __init__(self) -> None: ...
    def addRoute(self, destination: Any, xs: Any) -> None: ...
    def removeRoute(self, destination: Any, xs: Any) -> None: ...
    def route(self, stanza: Any) -> None: ...

class XMPPComponentServerFactory(xmlstream.XmlStreamServerFactory):
    logTraffic: bool = ...
    router: Any = ...
    secret: Any = ...
    serial: int = ...
    def __init__(self, router: Any, secret: str = ...): ...
    def onConnectionMade(self, xs: Any) -> None: ...
    def onAuthenticated(self, xs: Any) -> None: ...
    def onError(self, reason: Any) -> None: ...
    def onConnectionLost(self, destination: Any, xs: Any, reason: Any) -> None: ...
