from twisted.internet import protocol as protocol, reactor as reactor, task as task
from twisted.persisted import styles as styles
from twisted.protocols import basic as basic
from twisted.python import _textattributes, log as log, reflect as reflect
from typing import Any, Optional

NUL: Any
CR: Any
NL: Any
LF = NL
SPC: Any
MAX_COMMAND_LENGTH: int
CHANNEL_PREFIXES: str

class IRCBadMessage(Exception): ...
class IRCPasswordMismatch(Exception): ...
class IRCBadModes(ValueError): ...

def parsemsg(s: Any): ...
def split(str: Any, length: int = ...): ...

class UnhandledCommand(RuntimeError): ...

class _CommandDispatcherMixin:
    prefix: Optional[str] = ...
    def dispatch(self, commandName: Any, *args: Any): ...

def parseModes(modes: Any, params: Any, paramModes: Any = ...): ...

class IRC(protocol.Protocol):
    buffer: str = ...
    hostname: Any = ...
    encoding: Optional[str] = ...
    channels: Any = ...
    def connectionMade(self) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    def sendMessage(self, command: Any, *parameter_list: Any, **prefix: Any) -> None: ...
    def sendCommand(self, command: Any, parameters: Any, prefix: Optional[Any] = ..., tags: Optional[Any] = ...) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def handleCommand(self, command: Any, prefix: Any, params: Any) -> None: ...
    def irc_unknown(self, prefix: Any, command: Any, params: Any) -> None: ...
    def privmsg(self, sender: Any, recip: Any, message: Any) -> None: ...
    def notice(self, sender: Any, recip: Any, message: Any) -> None: ...
    def action(self, sender: Any, recip: Any, message: Any) -> None: ...
    def topic(self, user: Any, channel: Any, topic: Any, author: Optional[Any] = ...) -> None: ...
    def topicAuthor(self, user: Any, channel: Any, author: Any, date: Any) -> None: ...
    def names(self, user: Any, channel: Any, names: Any) -> None: ...
    def who(self, user: Any, channel: Any, memberInfo: Any) -> None: ...
    def whois(self, user: Any, nick: Any, username: Any, hostname: Any, realName: Any, server: Any, serverInfo: Any, oper: Any, idle: Any, signOn: Any, channels: Any) -> None: ...
    def join(self, who: Any, where: Any) -> None: ...
    def part(self, who: Any, where: Any, reason: Optional[Any] = ...) -> None: ...
    def channelMode(self, user: Any, channel: Any, mode: Any, *args: Any) -> None: ...

class ServerSupportedFeatures(_CommandDispatcherMixin):
    prefix: str = ...
    def __init__(self) -> None: ...
    def getFeature(self, feature: Any, default: Optional[Any] = ...): ...
    def hasFeature(self, feature: Any): ...
    def parse(self, params: Any) -> None: ...
    def isupport_unknown(self, command: Any, params: Any): ...
    def isupport_CHANLIMIT(self, params: Any): ...
    def isupport_CHANMODES(self, params: Any): ...
    def isupport_CHANNELLEN(self, params: Any): ...
    def isupport_CHANTYPES(self, params: Any): ...
    def isupport_EXCEPTS(self, params: Any): ...
    def isupport_IDCHAN(self, params: Any): ...
    def isupport_INVEX(self, params: Any): ...
    def isupport_KICKLEN(self, params: Any): ...
    def isupport_MAXLIST(self, params: Any): ...
    def isupport_MODES(self, params: Any): ...
    def isupport_NETWORK(self, params: Any): ...
    def isupport_NICKLEN(self, params: Any): ...
    def isupport_PREFIX(self, params: Any): ...
    def isupport_SAFELIST(self, params: Any): ...
    def isupport_STATUSMSG(self, params: Any): ...
    def isupport_TARGMAX(self, params: Any): ...
    def isupport_TOPICLEN(self, params: Any): ...

class IRCClient(basic.LineReceiver):
    hostname: Any = ...
    motd: Any = ...
    nickname: str = ...
    password: Any = ...
    realname: Any = ...
    username: Any = ...
    userinfo: Any = ...
    fingerReply: Any = ...
    versionName: Any = ...
    versionNum: Any = ...
    versionEnv: Any = ...
    sourceURL: str = ...
    dcc_destdir: str = ...
    dcc_sessions: Any = ...
    performLogin: int = ...
    lineRate: Any = ...
    delimiter: bytes = ...
    __pychecker__: str = ...
    erroneousNickFallback: str = ...
    heartbeatInterval: int = ...
    def sendLine(self, line: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def stopHeartbeat(self) -> None: ...
    def startHeartbeat(self) -> None: ...
    def created(self, when: Any) -> None: ...
    def yourHost(self, info: Any) -> None: ...
    def myInfo(self, servername: Any, version: Any, umodes: Any, cmodes: Any) -> None: ...
    def luserClient(self, info: Any) -> None: ...
    def bounce(self, info: Any) -> None: ...
    def isupport(self, options: Any) -> None: ...
    def luserChannels(self, channels: Any) -> None: ...
    def luserOp(self, ops: Any) -> None: ...
    def luserMe(self, info: Any) -> None: ...
    def privmsg(self, user: Any, channel: Any, message: Any) -> None: ...
    def joined(self, channel: Any) -> None: ...
    def left(self, channel: Any) -> None: ...
    def noticed(self, user: Any, channel: Any, message: Any) -> None: ...
    def modeChanged(self, user: Any, channel: Any, set: Any, modes: Any, args: Any) -> None: ...
    def pong(self, user: Any, secs: Any) -> None: ...
    def signedOn(self) -> None: ...
    def kickedFrom(self, channel: Any, kicker: Any, message: Any) -> None: ...
    def nickChanged(self, nick: Any) -> None: ...
    def userJoined(self, user: Any, channel: Any) -> None: ...
    def userLeft(self, user: Any, channel: Any) -> None: ...
    def userQuit(self, user: Any, quitMessage: Any) -> None: ...
    def userKicked(self, kickee: Any, channel: Any, kicker: Any, message: Any) -> None: ...
    def action(self, user: Any, channel: Any, data: Any) -> None: ...
    def topicUpdated(self, user: Any, channel: Any, newTopic: Any) -> None: ...
    def userRenamed(self, oldname: Any, newname: Any) -> None: ...
    def receivedMOTD(self, motd: Any) -> None: ...
    def join(self, channel: Any, key: Optional[Any] = ...) -> None: ...
    def leave(self, channel: Any, reason: Optional[Any] = ...) -> None: ...
    def kick(self, channel: Any, user: Any, reason: Optional[Any] = ...) -> None: ...
    part: Any = ...
    def invite(self, user: Any, channel: Any) -> None: ...
    def topic(self, channel: Any, topic: Optional[Any] = ...) -> None: ...
    def mode(self, chan: Any, set: Any, modes: Any, limit: Optional[Any] = ..., user: Optional[Any] = ..., mask: Optional[Any] = ...) -> None: ...
    def say(self, channel: Any, message: Any, length: Optional[Any] = ...) -> None: ...
    def msg(self, user: Any, message: Any, length: Optional[Any] = ...) -> None: ...
    def notice(self, user: Any, message: Any) -> None: ...
    def away(self, message: str = ...) -> None: ...
    def back(self) -> None: ...
    def whois(self, nickname: Any, server: Optional[Any] = ...) -> None: ...
    def register(self, nickname: Any, hostname: str = ..., servername: str = ...) -> None: ...
    def setNick(self, nickname: Any) -> None: ...
    def quit(self, message: str = ...) -> None: ...
    def describe(self, channel: Any, action: Any) -> None: ...
    def ping(self, user: Any, text: Optional[Any] = ...) -> None: ...
    def dccSend(self, user: Any, file: Any) -> None: ...
    def dccResume(self, user: Any, fileName: Any, port: Any, resumePos: Any) -> None: ...
    def dccAcceptResume(self, user: Any, fileName: Any, port: Any, resumePos: Any) -> None: ...
    def irc_ERR_NICKNAMEINUSE(self, prefix: Any, params: Any) -> None: ...
    def alterCollidedNick(self, nickname: Any): ...
    def irc_ERR_ERRONEUSNICKNAME(self, prefix: Any, params: Any) -> None: ...
    def irc_ERR_PASSWDMISMATCH(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_WELCOME(self, prefix: Any, params: Any) -> None: ...
    def irc_JOIN(self, prefix: Any, params: Any) -> None: ...
    def irc_PART(self, prefix: Any, params: Any) -> None: ...
    def irc_QUIT(self, prefix: Any, params: Any) -> None: ...
    def irc_MODE(self, user: Any, params: Any) -> None: ...
    def irc_PING(self, prefix: Any, params: Any) -> None: ...
    def irc_PRIVMSG(self, prefix: Any, params: Any) -> None: ...
    def irc_NOTICE(self, prefix: Any, params: Any) -> None: ...
    def irc_NICK(self, prefix: Any, params: Any) -> None: ...
    def irc_KICK(self, prefix: Any, params: Any) -> None: ...
    def irc_TOPIC(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_TOPIC(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_NOTOPIC(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_MOTDSTART(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_MOTD(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_ENDOFMOTD(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_CREATED(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_YOURHOST(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_MYINFO(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_BOUNCE(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_ISUPPORT(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_LUSERCLIENT(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_LUSEROP(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_LUSERCHANNELS(self, prefix: Any, params: Any) -> None: ...
    def irc_RPL_LUSERME(self, prefix: Any, params: Any) -> None: ...
    def irc_unknown(self, prefix: Any, command: Any, params: Any) -> None: ...
    def ctcpQuery(self, user: Any, channel: Any, messages: Any) -> None: ...
    def ctcpUnknownQuery(self, user: Any, channel: Any, tag: Any, data: Any) -> None: ...
    def ctcpQuery_ACTION(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_PING(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_FINGER(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_VERSION(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_SOURCE(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_USERINFO(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_CLIENTINFO(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_ERRMSG(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_TIME(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpQuery_DCC(self, user: Any, channel: Any, data: Any) -> None: ...
    def dcc_SEND(self, user: Any, channel: Any, data: Any) -> None: ...
    def dcc_ACCEPT(self, user: Any, channel: Any, data: Any) -> None: ...
    def dcc_RESUME(self, user: Any, channel: Any, data: Any) -> None: ...
    def dcc_CHAT(self, user: Any, channel: Any, data: Any) -> None: ...
    def dccDoSend(self, user: Any, address: Any, port: Any, fileName: Any, size: Any, data: Any) -> None: ...
    def dccDoResume(self, user: Any, file: Any, port: Any, resumePos: Any) -> None: ...
    def dccDoAcceptResume(self, user: Any, file: Any, port: Any, resumePos: Any) -> None: ...
    def dccDoChat(self, user: Any, channel: Any, address: Any, port: Any, data: Any) -> None: ...
    def ctcpMakeReply(self, user: Any, messages: Any) -> None: ...
    def ctcpMakeQuery(self, user: Any, messages: Any) -> None: ...
    def ctcpReply(self, user: Any, channel: Any, messages: Any) -> None: ...
    def ctcpReply_PING(self, user: Any, channel: Any, data: Any) -> None: ...
    def ctcpUnknownReply(self, user: Any, channel: Any, tag: Any, data: Any) -> None: ...
    def badMessage(self, line: Any, excType: Any, excValue: Any, tb: Any) -> None: ...
    def quirkyMessage(self, s: Any) -> None: ...
    supported: Any = ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def getUserModeParams(self): ...
    def getChannelModeParams(self): ...
    def handleCommand(self, command: Any, prefix: Any, params: Any) -> None: ...

def dccParseAddress(address: Any): ...

class DccFileReceiveBasic(protocol.Protocol, styles.Ephemeral):
    bytesReceived: int = ...
    resume: Any = ...
    def __init__(self, resumeOffset: int = ...) -> None: ...
    def dataReceived(self, data: Any) -> None: ...

class DccSendProtocol(protocol.Protocol, styles.Ephemeral):
    blocksize: int = ...
    file: Any = ...
    bytesSent: int = ...
    completed: int = ...
    connected: int = ...
    def __init__(self, file: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def sendBlock(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class DccSendFactory(protocol.Factory):
    protocol: Any = ...
    file: Any = ...
    def __init__(self, file: Any) -> None: ...
    def buildProtocol(self, connection: Any): ...

def fileSize(file: Any): ...

class DccChat(basic.LineReceiver, styles.Ephemeral):
    queryData: Any = ...
    delimiter: Any = ...
    client: Any = ...
    remoteParty: Any = ...
    buffer: bytes = ...
    def __init__(self, client: Any, queryData: Optional[Any] = ...) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...

class DccChatFactory(protocol.ClientFactory):
    protocol: Any = ...
    noisy: bool = ...
    client: Any = ...
    queryData: Any = ...
    def __init__(self, client: Any, queryData: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionFailed(self, unused_connector: Any, unused_reason: Any) -> None: ...
    def clientConnectionLost(self, unused_connector: Any, unused_reason: Any) -> None: ...

def dccDescribe(data: Any): ...

class DccFileReceive(DccFileReceiveBasic):
    filename: str = ...
    fileSize: int = ...
    destDir: str = ...
    overwrite: int = ...
    fromUser: Optional[bytes] = ...
    queryData: Any = ...
    def __init__(self, filename: Any, fileSize: int = ..., queryData: Optional[Any] = ..., destDir: str = ..., resumeOffset: int = ...) -> None: ...
    def set_directory(self, directory: Any) -> None: ...
    def set_filename(self, filename: Any) -> None: ...
    def set_overwrite(self, boolean: Any) -> None: ...
    file: Any = ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    connected: int = ...
    def connectionLost(self, reason: Any) -> None: ...

class _CharacterAttributes(_textattributes.CharacterAttributesMixin):
    fg: Any = ...
    bg: Any = ...
    attrs: Any = ...

attributes: Any

class _FormattingState(_textattributes._FormattingStateMixin):
    compareAttributes: Any = ...
    off: Any = ...
    bold: Any = ...
    underline: Any = ...
    reverseVideo: Any = ...
    foreground: Any = ...
    background: Any = ...
    def __init__(self, off: bool = ..., bold: bool = ..., underline: bool = ..., reverseVideo: bool = ..., foreground: Optional[Any] = ..., background: Optional[Any] = ...) -> None: ...
    def toMIRCControlCodes(self): ...

class _FormattingParser(_CommandDispatcherMixin):
    prefix: str = ...
    state: str = ...
    foreground: Any = ...
    background: Any = ...
    def __init__(self) -> None: ...
    def process(self, ch: Any) -> None: ...
    def complete(self): ...
    def emit(self) -> None: ...
    def state_TEXT(self, ch: Any) -> None: ...
    def state_COLOR_FOREGROUND(self, ch: Any) -> None: ...
    def state_COLOR_BACKGROUND(self, ch: Any) -> None: ...

def parseFormattedText(text: Any): ...
def assembleFormattedText(formatted: Any): ...
def stripFormatting(text: Any): ...

X_DELIM: Any

def ctcpExtract(message: Any): ...

M_QUOTE: Any
mQuoteTable: Any
mDequoteTable: Any
mEscape_re: Any

def lowQuote(s: Any): ...
def lowDequote(s: Any): ...

X_QUOTE: str
xQuoteTable: Any
xDequoteTable: Any
xEscape_re: Any

def ctcpQuote(s: Any): ...
def ctcpDequote(s: Any): ...
def ctcpStringify(messages: Any): ...

RPL_WELCOME: str
RPL_YOURHOST: str
RPL_CREATED: str
RPL_MYINFO: str
RPL_ISUPPORT: str
RPL_BOUNCE: str
RPL_USERHOST: str
RPL_ISON: str
RPL_AWAY: str
RPL_UNAWAY: str
RPL_NOWAWAY: str
RPL_WHOISUSER: str
RPL_WHOISSERVER: str
RPL_WHOISOPERATOR: str
RPL_WHOISIDLE: str
RPL_ENDOFWHOIS: str
RPL_WHOISCHANNELS: str
RPL_WHOWASUSER: str
RPL_ENDOFWHOWAS: str
RPL_LISTSTART: str
RPL_LIST: str
RPL_LISTEND: str
RPL_UNIQOPIS: str
RPL_CHANNELMODEIS: str
RPL_NOTOPIC: str
RPL_TOPIC: str
RPL_INVITING: str
RPL_SUMMONING: str
RPL_INVITELIST: str
RPL_ENDOFINVITELIST: str
RPL_EXCEPTLIST: str
RPL_ENDOFEXCEPTLIST: str
RPL_VERSION: str
RPL_WHOREPLY: str
RPL_ENDOFWHO: str
RPL_NAMREPLY: str
RPL_ENDOFNAMES: str
RPL_LINKS: str
RPL_ENDOFLINKS: str
RPL_BANLIST: str
RPL_ENDOFBANLIST: str
RPL_INFO: str
RPL_ENDOFINFO: str
RPL_MOTDSTART: str
RPL_MOTD: str
RPL_ENDOFMOTD: str
RPL_YOUREOPER: str
RPL_REHASHING: str
RPL_YOURESERVICE: str
RPL_TIME: str
RPL_USERSSTART: str
RPL_USERS: str
RPL_ENDOFUSERS: str
RPL_NOUSERS: str
RPL_TRACELINK: str
RPL_TRACECONNECTING: str
RPL_TRACEHANDSHAKE: str
RPL_TRACEUNKNOWN: str
RPL_TRACEOPERATOR: str
RPL_TRACEUSER: str
RPL_TRACESERVER: str
RPL_TRACESERVICE: str
RPL_TRACENEWTYPE: str
RPL_TRACECLASS: str
RPL_TRACERECONNECT: str
RPL_TRACELOG: str
RPL_TRACEEND: str
RPL_STATSLINKINFO: str
RPL_STATSCOMMANDS: str
RPL_ENDOFSTATS: str
RPL_STATSUPTIME: str
RPL_STATSOLINE: str
RPL_UMODEIS: str
RPL_SERVLIST: str
RPL_SERVLISTEND: str
RPL_LUSERCLIENT: str
RPL_LUSEROP: str
RPL_LUSERUNKNOWN: str
RPL_LUSERCHANNELS: str
RPL_LUSERME: str
RPL_ADMINME: str
RPL_ADMINLOC1: str
RPL_ADMINLOC2: str
RPL_ADMINEMAIL: str
RPL_TRYAGAIN: str
ERR_NOSUCHNICK: str
ERR_NOSUCHSERVER: str
ERR_NOSUCHCHANNEL: str
ERR_CANNOTSENDTOCHAN: str
ERR_TOOMANYCHANNELS: str
ERR_WASNOSUCHNICK: str
ERR_TOOMANYTARGETS: str
ERR_NOSUCHSERVICE: str
ERR_NOORIGIN: str
ERR_NORECIPIENT: str
ERR_NOTEXTTOSEND: str
ERR_NOTOPLEVEL: str
ERR_WILDTOPLEVEL: str
ERR_BADMASK: str
ERR_TOOMANYMATCHES: str
ERR_UNKNOWNCOMMAND: str
ERR_NOMOTD: str
ERR_NOADMININFO: str
ERR_FILEERROR: str
ERR_NONICKNAMEGIVEN: str
ERR_ERRONEUSNICKNAME: str
ERR_NICKNAMEINUSE: str
ERR_NICKCOLLISION: str
ERR_UNAVAILRESOURCE: str
ERR_USERNOTINCHANNEL: str
ERR_NOTONCHANNEL: str
ERR_USERONCHANNEL: str
ERR_NOLOGIN: str
ERR_SUMMONDISABLED: str
ERR_USERSDISABLED: str
ERR_NOTREGISTERED: str
ERR_NEEDMOREPARAMS: str
ERR_ALREADYREGISTRED: str
ERR_NOPERMFORHOST: str
ERR_PASSWDMISMATCH: str
ERR_YOUREBANNEDCREEP: str
ERR_YOUWILLBEBANNED: str
ERR_KEYSET: str
ERR_CHANNELISFULL: str
ERR_UNKNOWNMODE: str
ERR_INVITEONLYCHAN: str
ERR_BANNEDFROMCHAN: str
ERR_BADCHANNELKEY: str
ERR_BADCHANMASK: str
ERR_NOCHANMODES: str
ERR_BANLISTFULL: str
ERR_NOPRIVILEGES: str
ERR_CHANOPRIVSNEEDED: str
ERR_CANTKILLSERVER: str
ERR_RESTRICTED: str
ERR_UNIQOPPRIVSNEEDED: str
ERR_NOOPERHOST: str
ERR_NOSERVICEHOST: str
ERR_UMODEUNKNOWNFLAG: str
ERR_USERSDONTMATCH: str
symbolic_to_numeric: Any
numeric_to_symbolic: Any
