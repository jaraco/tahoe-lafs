from twisted.internet import protocol
from twisted.spread import pb
from twisted.words.protocols import irc
from typing import Any, Optional

class Group:
    name: Any = ...
    users: Any = ...
    meta: Any = ...
    def __init__(self, name: Any) -> None: ...
    def add(self, user: Any): ...
    def remove(self, user: Any, reason: Optional[Any] = ...): ...
    def size(self): ...
    def receive(self, sender: Any, recipient: Any, message: Any): ...
    def setMetadata(self, meta: Any): ...
    def iterusers(self): ...

class User:
    realm: Any = ...
    mind: Any = ...
    name: Any = ...
    groups: Any = ...
    lastMessage: Any = ...
    def __init__(self, name: Any) -> None: ...
    signOn: Any = ...
    def loggedIn(self, realm: Any, mind: Any) -> None: ...
    def join(self, group: Any): ...
    def leave(self, group: Any, reason: Optional[Any] = ...): ...
    def send(self, recipient: Any, message: Any): ...
    def itergroups(self): ...
    def logout(self) -> None: ...

class IRCUser(irc.IRC):
    groups: Any = ...
    logout: Any = ...
    avatar: Any = ...
    realm: Any = ...
    encoding: str = ...
    hostname: Any = ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def sendMessage(self, command: Any, *parameter_list: Any, **kw: Any) -> None: ...
    def userJoined(self, group: Any, user: Any) -> None: ...
    def userLeft(self, group: Any, user: Any, reason: Optional[Any] = ...) -> None: ...
    def receive(self, sender: Any, recipient: Any, message: Any) -> None: ...
    def groupMetaUpdate(self, group: Any, meta: Any) -> None: ...
    nickname: Any = ...
    password: Any = ...
    def irc_PASS(self, prefix: Any, params: Any) -> None: ...
    name: Any = ...
    def irc_NICK(self, prefix: Any, params: Any) -> None: ...
    realname: Any = ...
    def irc_USER(self, prefix: Any, params: Any) -> None: ...
    def irc_NICKSERV_PRIVMSG(self, prefix: Any, params: Any) -> None: ...
    def logInAs(self, nickname: Any, password: Any) -> None: ...
    def irc_PING(self, prefix: Any, params: Any) -> None: ...
    def irc_QUIT(self, prefix: Any, params: Any) -> None: ...
    def irc_MODE(self, prefix: Any, params: Any) -> None: ...
    def irc_USERHOST(self, prefix: Any, params: Any) -> None: ...
    def irc_PRIVMSG(self, prefix: Any, params: Any): ...
    def irc_JOIN(self, prefix: Any, params: Any): ...
    def irc_PART(self, prefix: Any, params: Any): ...
    def irc_NAMES(self, prefix: Any, params: Any) -> None: ...
    def irc_TOPIC(self, prefix: Any, params: Any) -> None: ...
    def list(self, channels: Any) -> None: ...
    def irc_LIST(self, prefix: Any, params: Any): ...
    def irc_WHO(self, prefix: Any, params: Any) -> None: ...
    def irc_WHOIS(self, prefix: Any, params: Any) -> None: ...
    def irc_OPER(self, prefix: Any, params: Any) -> None: ...

class IRCFactory(protocol.ServerFactory):
    protocol: Any = ...
    realm: Any = ...
    portal: Any = ...
    def __init__(self, realm: Any, portal: Any) -> None: ...

class PBMind(pb.Referenceable):
    def __init__(self) -> None: ...
    def jellyFor(self, jellier: Any): ...
    def remote_userJoined(self, user: Any, group: Any) -> None: ...
    def remote_userLeft(self, user: Any, group: Any, reason: Any) -> None: ...
    def remote_receive(self, sender: Any, recipient: Any, message: Any) -> None: ...
    def remote_groupMetaUpdate(self, group: Any, meta: Any) -> None: ...

class PBMindReference(pb.RemoteReference):
    name: str = ...
    def receive(self, sender: Any, recipient: Any, message: Any): ...
    def groupMetaUpdate(self, group: Any, meta: Any): ...
    def userJoined(self, group: Any, user: Any): ...
    def userLeft(self, group: Any, user: Any, reason: Optional[Any] = ...): ...

class PBGroup(pb.Referenceable):
    realm: Any = ...
    avatar: Any = ...
    group: Any = ...
    def __init__(self, realm: Any, avatar: Any, group: Any) -> None: ...
    def processUniqueID(self): ...
    def jellyFor(self, jellier: Any): ...
    def remote_leave(self, reason: Optional[Any] = ...): ...
    def remote_send(self, message: Any): ...

class PBGroupReference(pb.RemoteReference):
    name: Any = ...
    def unjellyFor(self, unjellier: Any, unjellyList: Any): ...
    def leave(self, reason: Optional[Any] = ...): ...
    def send(self, message: Any): ...
    def add(self, user: Any) -> None: ...
    def iterusers(self) -> None: ...
    def receive(self, sender: Any, recipient: Any, message: Any) -> None: ...
    def remove(self, user: Any, reason: Optional[Any] = ...) -> None: ...
    def setMetadata(self, meta: Any) -> None: ...
    def size(self) -> None: ...

class PBUser(pb.Referenceable):
    realm: Any = ...
    avatar: Any = ...
    user: Any = ...
    def __init__(self, realm: Any, avatar: Any, user: Any) -> None: ...
    def processUniqueID(self): ...

class ChatAvatar(pb.Referenceable):
    avatar: Any = ...
    def __init__(self, avatar: Any) -> None: ...
    def jellyFor(self, jellier: Any): ...
    def remote_join(self, groupName: Any): ...
    @property
    def name(self) -> None: ...
    @name.setter
    def name(self, value: Any) -> None: ...
    def groupMetaUpdate(self, group: Any, meta: Any) -> None: ...
    def receive(self, sender: Any, recipient: Any, message: Any) -> None: ...
    def userJoined(self, group: Any, user: Any) -> None: ...
    def userLeft(self, group: Any, user: Any, reason: Optional[Any] = ...) -> None: ...

class AvatarReference(pb.RemoteReference):
    def join(self, groupName: Any): ...
    def quit(self): ...

class WordsRealm:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def userFactory(self, name: Any): ...
    def groupFactory(self, name: Any): ...
    def logoutFactory(self, avatar: Any, facet: Any): ...
    def requestAvatar(self, avatarId: Any, mind: Any, *interfaces: Any): ...
    def itergroups(self) -> None: ...
    createGroupOnRequest: bool = ...
    createUserOnRequest: bool = ...
    def lookupUser(self, name: Any) -> None: ...
    def lookupGroup(self, group: Any) -> None: ...
    def addUser(self, user: Any) -> None: ...
    def addGroup(self, group: Any) -> None: ...
    def getGroup(self, name: Any): ...
    def getUser(self, name: Any): ...
    def createUser(self, name: Any): ...
    def createGroup(self, name: Any): ...

class InMemoryWordsRealm(WordsRealm):
    users: Any = ...
    groups: Any = ...
    def __init__(self, *a: Any, **kw: Any) -> None: ...
    def itergroups(self): ...
    def addUser(self, user: Any): ...
    def addGroup(self, group: Any): ...
    def lookupUser(self, name: Any): ...
    def lookupGroup(self, name: Any): ...
