from twisted.conch import error as error
from twisted.conch.ssh import transport as transport
from twisted.internet import defer as defer, protocol as protocol, reactor as reactor
from twisted.python import log as log
from typing import Any

class SSHClientFactory(protocol.ClientFactory):
    d: Any = ...
    options: Any = ...
    verifyHostKey: Any = ...
    userAuthObject: Any = ...
    def __init__(self, d: Any, options: Any, verifyHostKey: Any, userAuthObject: Any) -> None: ...
    def clientConnectionLost(self, connector: Any, reason: Any) -> None: ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class SSHClientTransport(transport.SSHClientTransport):
    factory: Any = ...
    unixServer: Any = ...
    def __init__(self, factory: Any) -> None: ...
    def connectionLost(self, reason: Any): ...
    def receiveError(self, code: Any, desc: Any) -> None: ...
    def sendDisconnect(self, code: Any, reason: Any) -> None: ...
    def receiveDebug(self, alwaysDisplay: Any, message: Any, lang: Any) -> None: ...
    def verifyHostKey(self, pubKey: Any, fingerprint: Any): ...
    def setService(self, service: Any) -> None: ...
    def connectionSecure(self) -> None: ...

def connect(host: Any, port: Any, options: Any, verifyHostKey: Any, userAuthObject: Any): ...
