from twisted.conch.error import HostKeyChanged as HostKeyChanged, InvalidEntry as InvalidEntry, UserRejectedKey as UserRejectedKey
from twisted.conch.interfaces import IKnownHostEntry as IKnownHostEntry
from twisted.conch.ssh.keys import BadKeyError as BadKeyError, FingerprintFormats as FingerprintFormats, Key as Key
from twisted.internet import defer as defer
from twisted.python import log as log
from twisted.python.compat import nativeString as nativeString, unicode as unicode
from twisted.python.randbytes import secureRandom as secureRandom
from twisted.python.util import FancyEqMixin as FancyEqMixin
from typing import Any

class _BaseEntry:
    keyType: Any = ...
    publicKey: Any = ...
    comment: Any = ...
    def __init__(self, keyType: Any, publicKey: Any, comment: Any) -> None: ...
    def matchesKey(self, keyObject: Any): ...

class PlainEntry(_BaseEntry):
    def __init__(self, hostnames: Any, keyType: Any, publicKey: Any, comment: Any) -> None: ...
    @classmethod
    def fromString(cls, string: Any): ...
    def matchesHost(self, hostname: Any): ...
    def toString(self): ...

class UnparsedEntry:
    def __init__(self, string: Any) -> None: ...
    def matchesHost(self, hostname: Any): ...
    def matchesKey(self, key: Any): ...
    def toString(self): ...

class HashedEntry(_BaseEntry, FancyEqMixin):
    MAGIC: bytes = ...
    compareAttributes: Any = ...
    def __init__(self, hostSalt: Any, hostHash: Any, keyType: Any, publicKey: Any, comment: Any) -> None: ...
    @classmethod
    def fromString(cls, string: Any): ...
    def matchesHost(self, hostname: Any): ...
    def toString(self): ...

class KnownHostsFile:
    def __init__(self, savePath: Any) -> None: ...
    @property
    def savePath(self): ...
    def iterentries(self) -> None: ...
    def hasHostKey(self, hostname: Any, key: Any): ...
    def verifyHostKey(self, ui: Any, hostname: Any, ip: Any, key: Any): ...
    def addHostKey(self, hostname: Any, key: Any): ...
    def save(self) -> None: ...
    @classmethod
    def fromPath(cls, path: Any): ...

class ConsoleUI:
    opener: Any = ...
    def __init__(self, opener: Any) -> None: ...
    def prompt(self, text: Any): ...
    def warn(self, text: Any) -> None: ...
