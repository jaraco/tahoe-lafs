from twisted.conch.insults import helper as helper, insults as insults
from typing import Any, Optional

class YieldFocus(Exception): ...

class BoundedTerminalWrapper:
    width: Any = ...
    height: Any = ...
    xoff: Any = ...
    yoff: Any = ...
    terminal: Any = ...
    cursorForward: Any = ...
    selectCharacterSet: Any = ...
    selectGraphicRendition: Any = ...
    saveCursor: Any = ...
    restoreCursor: Any = ...
    def __init__(self, terminal: Any, width: Any, height: Any, xoff: Any, yoff: Any) -> None: ...
    def cursorPosition(self, x: Any, y: Any): ...
    def cursorHome(self): ...
    def write(self, data: Any): ...

class Widget:
    focused: bool = ...
    parent: Any = ...
    dirty: bool = ...
    width: Any = ...
    height: Any = ...
    def repaint(self) -> None: ...
    def filthy(self) -> None: ...
    def redraw(self, width: Any, height: Any, terminal: Any) -> None: ...
    def draw(self, width: Any, height: Any, terminal: Any) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...
    def sizeHint(self) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...
    def tabReceived(self, modifier: Any) -> None: ...
    def focusReceived(self) -> None: ...
    def focusLost(self) -> None: ...
    def backspaceReceived(self) -> None: ...
    def functionKeyReceived(self, keyID: Any, modifier: Any) -> None: ...
    def characterReceived(self, keyID: Any, modifier: Any) -> None: ...

class ContainerWidget(Widget):
    focusedChild: Any = ...
    focused: bool = ...
    children: Any = ...
    def __init__(self) -> None: ...
    def addChild(self, child: Any) -> None: ...
    def remChild(self, child: Any) -> None: ...
    def filthy(self) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...
    def changeFocus(self) -> None: ...
    def focusReceived(self) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...

class TopWindow(ContainerWidget):
    focused: bool = ...
    painter: Any = ...
    scheduler: Any = ...
    def __init__(self, painter: Any, scheduler: Any) -> None: ...
    def repaint(self) -> None: ...
    def changeFocus(self) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...

class AbsoluteBox(ContainerWidget):
    def moveChild(self, child: Any, x: Any, y: Any) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class _Box(ContainerWidget):
    TOP: Any = ...
    CENTER: Any = ...
    BOTTOM: Any = ...
    gravity: Any = ...
    def __init__(self, gravity: Any = ...) -> None: ...
    def sizeHint(self): ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class HBox(_Box):
    variableDimension: int = ...

class VBox(_Box):
    variableDimension: int = ...

class Packer(ContainerWidget):
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class Canvas(Widget):
    focused: bool = ...
    contents: Any = ...
    def __init__(self) -> None: ...
    x: Any = ...
    y: Any = ...
    def resize(self, width: Any, height: Any) -> None: ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, value: Any) -> None: ...
    def clear(self) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

def horizontalLine(terminal: Any, y: Any, left: Any, right: Any) -> None: ...
def verticalLine(terminal: Any, x: Any, top: Any, bottom: Any) -> None: ...
def rectangle(terminal: Any, position: Any, dimension: Any) -> None: ...

class Border(Widget):
    containee: Any = ...
    def __init__(self, containee: Any) -> None: ...
    def focusReceived(self): ...
    def focusLost(self): ...
    def keystrokeReceived(self, keyID: Any, modifier: Any): ...
    def sizeHint(self): ...
    def filthy(self) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class Button(Widget):
    label: Any = ...
    onPress: Any = ...
    def __init__(self, label: Any, onPress: Any) -> None: ...
    def sizeHint(self): ...
    def characterReceived(self, keyID: Any, modifier: Any) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class TextInput(Widget):
    onSubmit: Any = ...
    maxwidth: Any = ...
    buffer: bytes = ...
    cursor: int = ...
    def __init__(self, maxwidth: Any, onSubmit: Any) -> None: ...
    def setText(self, text: Any) -> None: ...
    def func_LEFT_ARROW(self, modifier: Any) -> None: ...
    def func_RIGHT_ARROW(self, modifier: Any) -> None: ...
    def backspaceReceived(self) -> None: ...
    def characterReceived(self, keyID: Any, modifier: Any) -> None: ...
    def sizeHint(self): ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class PasswordInput(TextInput): ...

class TextOutput(Widget):
    text: bytes = ...
    size: Any = ...
    def __init__(self, size: Optional[Any] = ...) -> None: ...
    def sizeHint(self): ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...
    def setText(self, text: Any) -> None: ...
    def focusReceived(self) -> None: ...

class TextOutputArea(TextOutput):
    WRAP: Any = ...
    TRUNCATE: Any = ...
    longLines: Any = ...
    def __init__(self, size: Optional[Any] = ..., longLines: Any = ...) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class Viewport(Widget):
    @property
    def xOffset(self): ...
    @xOffset.setter
    def xOffset(self, value: Any) -> None: ...
    @property
    def yOffset(self): ...
    @yOffset.setter
    def yOffset(self, value: Any) -> None: ...
    containee: Any = ...
    def __init__(self, containee: Any) -> None: ...
    def filthy(self) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class _Scrollbar(Widget):
    onScroll: Any = ...
    percent: float = ...
    def __init__(self, onScroll: Any) -> None: ...
    def smaller(self) -> None: ...
    def bigger(self) -> None: ...

class HorizontalScrollbar(_Scrollbar):
    def sizeHint(self): ...
    def func_LEFT_ARROW(self, modifier: Any) -> None: ...
    def func_RIGHT_ARROW(self, modifier: Any) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class VerticalScrollbar(_Scrollbar):
    def sizeHint(self): ...
    def func_UP_ARROW(self, modifier: Any) -> None: ...
    def func_DOWN_ARROW(self, modifier: Any) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

class ScrolledArea(Widget):
    def __init__(self, containee: Any) -> None: ...
    def func_UP_ARROW(self, modifier: Any) -> None: ...
    def func_DOWN_ARROW(self, modifier: Any) -> None: ...
    def func_LEFT_ARROW(self, modifier: Any) -> None: ...
    def func_RIGHT_ARROW(self, modifier: Any) -> None: ...
    def filthy(self) -> None: ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...

def cursor(terminal: Any, ch: Any) -> None: ...

class Selection(Widget):
    focusedIndex: int = ...
    renderOffset: int = ...
    sequence: Any = ...
    onSelect: Any = ...
    minVisible: Any = ...
    def __init__(self, sequence: Any, onSelect: Any, minVisible: Optional[Any] = ...) -> None: ...
    def sizeHint(self): ...
    def func_UP_ARROW(self, modifier: Any) -> None: ...
    def func_PGUP(self, modifier: Any) -> None: ...
    def func_DOWN_ARROW(self, modifier: Any) -> None: ...
    def func_PGDN(self, modifier: Any) -> None: ...
    def characterReceived(self, keyID: Any, modifier: Any) -> None: ...
    height: Any = ...
    def render(self, width: Any, height: Any, terminal: Any) -> None: ...
