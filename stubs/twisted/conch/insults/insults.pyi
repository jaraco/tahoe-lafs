from twisted.internet import interfaces as iinternet, protocol
from typing import Any, Optional
from zope.interface import Interface

class ITerminalProtocol(Interface):
    def makeConnection(transport: Any) -> None: ...
    def keystrokeReceived(keyID: Any, modifier: Any) -> None: ...
    def terminalSize(width: Any, height: Any) -> None: ...
    def unhandledControlSequence(seq: Any) -> None: ...
    def connectionLost(reason: Any) -> None: ...

class TerminalProtocol:
    terminal: Any = ...
    def makeConnection(self, terminal: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...
    def terminalSize(self, width: Any, height: Any) -> None: ...
    def unhandledControlSequence(self, seq: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class ITerminalTransport(iinternet.ITransport):
    def cursorUp(n: int = ...) -> None: ...
    def cursorDown(n: int = ...) -> None: ...
    def cursorForward(n: int = ...) -> None: ...
    def cursorBackward(n: int = ...) -> None: ...
    def cursorPosition(column: Any, line: Any) -> None: ...
    def cursorHome() -> None: ...
    def index() -> None: ...
    def reverseIndex() -> None: ...
    def nextLine() -> None: ...
    def saveCursor() -> None: ...
    def restoreCursor() -> None: ...
    def setModes(modes: Any) -> None: ...
    def resetModes(mode: Any) -> None: ...
    def setPrivateModes(modes: Any) -> None: ...
    def resetPrivateModes(modes: Any) -> None: ...
    def applicationKeypadMode() -> None: ...
    def numericKeypadMode() -> None: ...
    def selectCharacterSet(charSet: Any, which: Any) -> None: ...
    def shiftIn() -> None: ...
    def shiftOut() -> None: ...
    def singleShift2() -> None: ...
    def singleShift3() -> None: ...
    def selectGraphicRendition(*attributes: Any) -> None: ...
    def horizontalTabulationSet() -> None: ...
    def tabulationClear() -> None: ...
    def tabulationClearAll() -> None: ...
    def doubleHeightLine(top: bool = ...) -> None: ...
    def singleWidthLine() -> None: ...
    def doubleWidthLine() -> None: ...
    def eraseToLineEnd() -> None: ...
    def eraseToLineBeginning() -> None: ...
    def eraseLine() -> None: ...
    def eraseToDisplayEnd() -> None: ...
    def eraseToDisplayBeginning() -> None: ...
    def eraseDisplay() -> None: ...
    def deleteCharacter(n: int = ...) -> None: ...
    def insertLine(n: int = ...) -> None: ...
    def deleteLine(n: int = ...) -> None: ...
    def reportCursorPosition() -> None: ...
    def reset() -> None: ...
    def unhandledControlSequence(seq: Any) -> None: ...

class modes:
    KEYBOARD_ACTION: int = ...
    KAM: int = ...
    INSERTION_REPLACEMENT: int = ...
    IRM: int = ...
    LINEFEED_NEWLINE: int = ...
    LNM: int = ...

class privateModes:
    ERROR: int = ...
    CURSOR_KEY: int = ...
    ANSI_VT52: int = ...
    COLUMN: int = ...
    SCROLL: int = ...
    SCREEN: int = ...
    ORIGIN: int = ...
    AUTO_WRAP: int = ...
    AUTO_REPEAT: int = ...
    PRINTER_FORM_FEED: int = ...
    PRINTER_EXTENT: int = ...
    CURSOR_MODE: int = ...

CS_US: bytes
CS_UK: bytes
CS_DRAWING: bytes
CS_ALTERNATE: bytes
CS_ALTERNATE_SPECIAL: bytes
G0: bytes
G1: bytes
G2: bytes
G3: bytes
NORMAL: int
BOLD: int
UNDERLINE: int
BLINK: int
REVERSE_VIDEO: int

class Vector:
    x: Any = ...
    y: Any = ...
    def __init__(self, x: Any, y: Any) -> None: ...

class _const:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def __bytes__(self): ...

FUNCTION_KEYS: Any

class ServerProtocol(protocol.Protocol):
    protocolFactory: Any = ...
    terminalProtocol: Any = ...
    TAB: bytes = ...
    BACKSPACE: bytes = ...
    lastWrite: bytes = ...
    state: bytes = ...
    termSize: Any = ...
    cursorPos: Any = ...
    scrollRegion: Any = ...
    factory: Any = ...
    protocolArgs: Any = ...
    protocolKwArgs: Any = ...
    def __init__(self, protocolFactory: Optional[Any] = ..., *a: Any, **kw: Any) -> None: ...
    def connectionMade(self) -> None: ...
    escBuf: Any = ...
    def dataReceived(self, data: Any) -> None: ...
    def unhandledControlSequence(self, buf: Any) -> None: ...
    class ControlSequenceParser:
        def A(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def B(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def C(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def D(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def E(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def F(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def H(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def R(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def Z(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def tilde(self, proto: Any, handler: Any, buf: Any) -> None: ...
    controlSequenceParser: Any = ...
    def cursorUp(self, n: int = ...) -> None: ...
    def cursorDown(self, n: int = ...) -> None: ...
    def cursorForward(self, n: int = ...) -> None: ...
    def cursorBackward(self, n: int = ...) -> None: ...
    def cursorPosition(self, column: Any, line: Any) -> None: ...
    def cursorHome(self) -> None: ...
    def index(self) -> None: ...
    def reverseIndex(self) -> None: ...
    def nextLine(self) -> None: ...
    def saveCursor(self) -> None: ...
    def restoreCursor(self) -> None: ...
    def setModes(self, modes: Any) -> None: ...
    def setPrivateModes(self, modes: Any) -> None: ...
    def resetModes(self, modes: Any) -> None: ...
    def resetPrivateModes(self, modes: Any) -> None: ...
    def applicationKeypadMode(self) -> None: ...
    def numericKeypadMode(self) -> None: ...
    def selectCharacterSet(self, charSet: Any, which: Any) -> None: ...
    def shiftIn(self) -> None: ...
    def shiftOut(self) -> None: ...
    def singleShift2(self) -> None: ...
    def singleShift3(self) -> None: ...
    def selectGraphicRendition(self, *attributes: Any) -> None: ...
    def horizontalTabulationSet(self) -> None: ...
    def tabulationClear(self) -> None: ...
    def tabulationClearAll(self) -> None: ...
    def doubleHeightLine(self, top: bool = ...) -> None: ...
    def singleWidthLine(self) -> None: ...
    def doubleWidthLine(self) -> None: ...
    def eraseToLineEnd(self) -> None: ...
    def eraseToLineBeginning(self) -> None: ...
    def eraseLine(self) -> None: ...
    def eraseToDisplayEnd(self) -> None: ...
    def eraseToDisplayBeginning(self) -> None: ...
    def eraseDisplay(self) -> None: ...
    def deleteCharacter(self, n: int = ...) -> None: ...
    def insertLine(self, n: int = ...) -> None: ...
    def deleteLine(self, n: int = ...) -> None: ...
    def setScrollRegion(self, first: Optional[Any] = ..., last: Optional[Any] = ...) -> None: ...
    def resetScrollRegion(self) -> None: ...
    def reportCursorPosition(self): ...
    def reset(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, data: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class ClientProtocol(protocol.Protocol):
    terminalFactory: Any = ...
    terminal: Any = ...
    state: bytes = ...
    factory: Any = ...
    terminalArgs: Any = ...
    terminalKwArgs: Any = ...
    def __init__(self, terminalFactory: Optional[Any] = ..., *a: Any, **kw: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    class ControlSequenceParser:
        def h(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def l(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def r(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def K(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def H(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def J(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def P(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def L(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def M(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def n(self, proto: Any, handler: Any, buf: Any) -> None: ...
        def m(self, proto: Any, handler: Any, buf: Any) -> None: ...
    controlSequenceParser: Any = ...
