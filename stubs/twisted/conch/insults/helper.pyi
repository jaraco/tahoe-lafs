from twisted.internet import protocol
from twisted.python import _textattributes
from typing import Any, Optional

class _FormattingState(_textattributes._FormattingStateMixin):
    compareAttributes: Any = ...
    charset: Any = ...
    bold: Any = ...
    underline: Any = ...
    blink: Any = ...
    reverseVideo: Any = ...
    foreground: Any = ...
    background: Any = ...
    def __init__(self, charset: Any = ..., bold: bool = ..., underline: bool = ..., blink: bool = ..., reverseVideo: bool = ..., foreground: Any = ..., background: Any = ..., _subtracting: bool = ...) -> None: ...
    def wantOne(self, **kw: Any): ...
    def toVT102(self): ...

CharacterAttribute: Any

class TerminalBuffer(protocol.Protocol):
    execBytes: Any = ...
    execStr: Any = ...
    TAB: bytes = ...
    BACKSPACE: bytes = ...
    width: int = ...
    height: int = ...
    fill: bytes = ...
    void: Any = ...
    def getCharacter(self, x: Any, y: Any): ...
    def connectionMade(self) -> None: ...
    def write(self, data: Any) -> None: ...
    x: int = ...
    def insertAtCursor(self, b: Any) -> None: ...
    y: Any = ...
    def cursorUp(self, n: int = ...) -> None: ...
    def cursorDown(self, n: int = ...) -> None: ...
    def cursorBackward(self, n: int = ...) -> None: ...
    def cursorForward(self, n: int = ...) -> None: ...
    def cursorPosition(self, column: Any, line: Any) -> None: ...
    def cursorHome(self) -> None: ...
    def index(self) -> None: ...
    def reverseIndex(self) -> None: ...
    def nextLine(self) -> None: ...
    def saveCursor(self) -> None: ...
    def restoreCursor(self) -> None: ...
    def setModes(self, modes: Any) -> None: ...
    def resetModes(self, modes: Any) -> None: ...
    def setPrivateModes(self, modes: Any) -> None: ...
    def resetPrivateModes(self, modes: Any) -> None: ...
    keypadMode: str = ...
    def applicationKeypadMode(self) -> None: ...
    def numericKeypadMode(self) -> None: ...
    def selectCharacterSet(self, charSet: Any, which: Any) -> None: ...
    activeCharset: Any = ...
    def shiftIn(self) -> None: ...
    def shiftOut(self) -> None: ...
    def singleShift2(self) -> None: ...
    def singleShift3(self) -> None: ...
    graphicRendition: Any = ...
    def selectGraphicRendition(self, *attributes: Any) -> None: ...
    def eraseLine(self) -> None: ...
    def eraseToLineEnd(self) -> None: ...
    def eraseToLineBeginning(self) -> None: ...
    lines: Any = ...
    def eraseDisplay(self) -> None: ...
    def eraseToDisplayEnd(self) -> None: ...
    def eraseToDisplayBeginning(self) -> None: ...
    def deleteCharacter(self, n: int = ...) -> None: ...
    def insertLine(self, n: int = ...) -> None: ...
    def deleteLine(self, n: int = ...) -> None: ...
    def reportCursorPosition(self): ...
    home: Any = ...
    modes: Any = ...
    privateModes: Any = ...
    numericKeypad: str = ...
    charsets: Any = ...
    def reset(self) -> None: ...
    def unhandledControlSequence(self, buf: Any) -> None: ...
    def __bytes__(self): ...

class ExpectationTimeout(Exception): ...

class ExpectableBuffer(TerminalBuffer):
    def connectionMade(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def cursorHome(self) -> None: ...
    def expect(self, expression: Any, timeout: Optional[Any] = ..., scheduler: Any = ...): ...
