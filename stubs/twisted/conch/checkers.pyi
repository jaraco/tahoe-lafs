from twisted.conch import error as error
from twisted.conch.ssh import keys as keys
from twisted.cred.checkers import ICredentialsChecker as ICredentialsChecker
from twisted.cred.credentials import ISSHPrivateKey as ISSHPrivateKey, IUsernamePassword as IUsernamePassword
from twisted.cred.error import UnauthorizedLogin as UnauthorizedLogin, UnhandledCredentials as UnhandledCredentials
from twisted.internet import defer as defer
from twisted.python import failure as failure, log as log, reflect as reflect
from twisted.python.deprecate import deprecatedModuleAttribute as deprecatedModuleAttribute
from twisted.python.filepath import FilePath as FilePath
from twisted.python.util import runAsEffectiveUser as runAsEffectiveUser
from typing import Any, Optional
from zope.interface import Interface

def verifyCryptedPassword(crypted: Any, pw: Any): ...

class UNIXPasswordDatabase:
    credentialInterfaces: Any = ...
    def __init__(self, getByNameFunctions: Optional[Any] = ...) -> None: ...
    def requestAvatarId(self, credentials: Any): ...

class SSHPublicKeyDatabase:
    credentialInterfaces: Any = ...
    def requestAvatarId(self, credentials: Any): ...
    def getAuthorizedKeysFiles(self, credentials: Any): ...
    def checkKey(self, credentials: Any): ...

class SSHProtocolChecker:
    checkers: Any = ...
    successfulCredentials: Any = ...
    def __init__(self) -> None: ...
    def get_credentialInterfaces(self): ...
    credentialInterfaces: Any = ...
    def registerChecker(self, checker: Any, *credentialInterfaces: Any) -> None: ...
    def requestAvatarId(self, credentials: Any): ...
    def areDone(self, avatarId: Any): ...

class IAuthorizedKeysDB(Interface):
    def getAuthorizedKeys(avatarId: Any) -> None: ...

def readAuthorizedKeyFile(fileobj: Any, parseKey: Any = ...) -> None: ...

class InMemorySSHKeyDB:
    def __init__(self, mapping: Any) -> None: ...
    def getAuthorizedKeys(self, username: Any): ...

class UNIXAuthorizedKeysFiles:
    def __init__(self, userdb: Optional[Any] = ..., parseKey: Any = ...) -> None: ...
    def getAuthorizedKeys(self, username: Any): ...

class SSHPublicKeyChecker:
    credentialInterfaces: Any = ...
    def __init__(self, keydb: Any) -> None: ...
    def requestAvatarId(self, credentials: Any): ...
