from twisted.conch.ssh import address as address, keys as keys
from twisted.conch.ssh.common import MP as MP, NS as NS, ffs as ffs, getMP as getMP, getNS as getNS, int_from_bytes as int_from_bytes
from twisted.internet import defer as defer, protocol as protocol
from twisted.logger import Logger as Logger
from twisted.python import randbytes as randbytes
from twisted.python.compat import iterbytes as iterbytes, networkString as networkString
from typing import Any

class _MACParams(tuple): ...

class SSHCiphers:
    cipherMap: Any = ...
    macMap: Any = ...
    outCipType: Any = ...
    inCipType: Any = ...
    outMACType: Any = ...
    inMACType: Any = ...
    encBlockSize: int = ...
    decBlockSize: int = ...
    verifyDigestSize: int = ...
    outMAC: Any = ...
    inMAC: Any = ...
    def __init__(self, outCip: Any, inCip: Any, outMac: Any, inMac: Any) -> None: ...
    encryptor: Any = ...
    decryptor: Any = ...
    def setKeys(self, outIV: Any, outKey: Any, inIV: Any, inKey: Any, outInteg: Any, inInteg: Any) -> None: ...
    def encrypt(self, blocks: Any): ...
    def decrypt(self, blocks: Any): ...
    def makeMAC(self, seqid: Any, data: Any): ...
    def verify(self, seqid: Any, data: Any, mac: Any): ...

class SSHTransportBase(protocol.Protocol):
    protocolVersion: bytes = ...
    version: Any = ...
    comment: bytes = ...
    ourVersionString: Any = ...
    supportedCiphers: Any = ...
    supportedMACs: Any = ...
    supportedKeyExchanges: Any = ...
    supportedPublicKeys: Any = ...
    supportedCompressions: Any = ...
    supportedLanguages: Any = ...
    supportedVersions: Any = ...
    isClient: bool = ...
    gotVersion: bool = ...
    buf: bytes = ...
    outgoingPacketSequence: int = ...
    incomingPacketSequence: int = ...
    outgoingCompression: Any = ...
    incomingCompression: Any = ...
    sessionID: Any = ...
    service: Any = ...
    def connectionLost(self, reason: Any) -> None: ...
    currentEncryptions: Any = ...
    def connectionMade(self) -> None: ...
    ourKexInitPayload: Any = ...
    def sendKexInit(self) -> None: ...
    def sendPacket(self, messageType: Any, payload: Any) -> None: ...
    first: Any = ...
    def getPacket(self): ...
    otherVersionString: Any = ...
    def dataReceived(self, data: Any) -> None: ...
    def dispatchMessage(self, messageNum: Any, payload: Any) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    @property
    def kexAlg(self): ...
    @kexAlg.setter
    def kexAlg(self, value: Any) -> None: ...
    otherKexInitPayload: Any = ...
    keyAlg: Any = ...
    nextEncryptions: Any = ...
    outgoingCompressionType: Any = ...
    incomingCompressionType: Any = ...
    def ssh_KEXINIT(self, packet: Any): ...
    def ssh_DISCONNECT(self, packet: Any) -> None: ...
    def ssh_IGNORE(self, packet: Any) -> None: ...
    def ssh_UNIMPLEMENTED(self, packet: Any) -> None: ...
    def ssh_DEBUG(self, packet: Any) -> None: ...
    def setService(self, service: Any) -> None: ...
    def sendDebug(self, message: Any, alwaysDisplay: bool = ..., language: bytes = ...) -> None: ...
    def sendIgnore(self, message: Any) -> None: ...
    def sendUnimplemented(self) -> None: ...
    def sendDisconnect(self, reason: Any, desc: Any) -> None: ...
    def isEncrypted(self, direction: str = ...): ...
    def isVerified(self, direction: str = ...): ...
    def loseConnection(self) -> None: ...
    def receiveError(self, reasonCode: Any, description: Any) -> None: ...
    def receiveUnimplemented(self, seqnum: Any) -> None: ...
    def receiveDebug(self, alwaysDisplay: Any, message: Any, lang: Any) -> None: ...

class SSHServerTransport(SSHTransportBase):
    isClient: bool = ...
    ignoreNextPacket: int = ...
    def ssh_KEXINIT(self, packet: Any) -> None: ...
    dhGexRequest: Any = ...
    def ssh_KEX_DH_GEX_REQUEST_OLD(self, packet: Any): ...
    def ssh_KEX_DH_GEX_REQUEST(self, packet: Any) -> None: ...
    def ssh_KEX_DH_GEX_INIT(self, packet: Any) -> None: ...
    def ssh_NEWKEYS(self, packet: Any) -> None: ...
    def ssh_SERVICE_REQUEST(self, packet: Any) -> None: ...

class SSHClientTransport(SSHTransportBase):
    isClient: bool = ...
    def connectionMade(self) -> None: ...
    ecPriv: Any = ...
    ecPub: Any = ...
    def ssh_KEXINIT(self, packet: Any) -> None: ...
    def ssh_KEX_DH_GEX_GROUP(self, packet: Any): ...
    def ssh_KEX_DH_GEX_REPLY(self, packet: Any): ...
    def ssh_NEWKEYS(self, packet: Any) -> None: ...
    def ssh_SERVICE_ACCEPT(self, packet: Any) -> None: ...
    instance: Any = ...
    def requestService(self, instance: Any) -> None: ...
    def verifyHostKey(self, hostKey: Any, fingerprint: Any): ...
    def connectionSecure(self) -> None: ...

class _NullEncryptionContext:
    def update(self, data: Any): ...

class _DummyAlgorithm:
    block_size: int = ...

class _DummyCipher:
    algorithm: Any = ...
    def encryptor(self): ...
    def decryptor(self): ...

DH_GENERATOR: Any
DH_PRIME: Any
MSG_DISCONNECT: int
MSG_IGNORE: int
MSG_UNIMPLEMENTED: int
MSG_DEBUG: int
MSG_SERVICE_REQUEST: int
MSG_SERVICE_ACCEPT: int
MSG_KEXINIT: int
MSG_NEWKEYS: int
MSG_KEXDH_INIT: int
MSG_KEXDH_REPLY: int
MSG_KEX_DH_GEX_REQUEST_OLD: int
MSG_KEX_DH_GEX_REQUEST: int
MSG_KEX_DH_GEX_GROUP: int
MSG_KEX_DH_GEX_INIT: int
MSG_KEX_DH_GEX_REPLY: int
DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT: int
DISCONNECT_PROTOCOL_ERROR: int
DISCONNECT_KEY_EXCHANGE_FAILED: int
DISCONNECT_RESERVED: int
DISCONNECT_MAC_ERROR: int
DISCONNECT_COMPRESSION_ERROR: int
DISCONNECT_SERVICE_NOT_AVAILABLE: int
DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED: int
DISCONNECT_HOST_KEY_NOT_VERIFIABLE: int
DISCONNECT_CONNECTION_LOST: int
DISCONNECT_BY_APPLICATION: int
DISCONNECT_TOO_MANY_CONNECTIONS: int
DISCONNECT_AUTH_CANCELLED_BY_USER: int
DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE: int
DISCONNECT_ILLEGAL_USER_NAME: int
messages: Any
