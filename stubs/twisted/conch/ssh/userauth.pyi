from twisted.conch import error as error, interfaces as interfaces
from twisted.conch.ssh import keys as keys, service as service, transport as transport
from twisted.conch.ssh.common import NS as NS, getNS as getNS
from twisted.cred import credentials as credentials
from twisted.cred.error import UnauthorizedLogin as UnauthorizedLogin
from twisted.internet import defer as defer, reactor as reactor
from twisted.logger import Logger as Logger
from twisted.python import failure as failure
from twisted.python.compat import nativeString as nativeString
from typing import Any, Optional

class SSHUserAuthServer(service.SSHService):
    name: bytes = ...
    loginTimeout: Any = ...
    attemptsBeforeDisconnect: int = ...
    passwordDelay: int = ...
    clock: Any = ...
    interfaceToMethod: Any = ...
    authenticatedWith: Any = ...
    loginAttempts: int = ...
    user: Any = ...
    nextService: Any = ...
    portal: Any = ...
    supportedAuthentications: Any = ...
    def serviceStarted(self) -> None: ...
    def serviceStopped(self) -> None: ...
    def timeoutAuthentication(self) -> None: ...
    def tryAuth(self, kind: Any, user: Any, data: Any): ...
    method: Any = ...
    def ssh_USERAUTH_REQUEST(self, packet: Any): ...
    def auth_publickey(self, packet: Any): ...
    def auth_password(self, packet: Any): ...

class SSHUserAuthClient(service.SSHService):
    name: bytes = ...
    preferredOrder: Any = ...
    user: Any = ...
    instance: Any = ...
    def __init__(self, user: Any, instance: Any) -> None: ...
    authenticatedWith: Any = ...
    triedPublicKeys: Any = ...
    lastPublicKey: Any = ...
    def serviceStarted(self) -> None: ...
    lastAuth: Any = ...
    def askForAuth(self, kind: Any, extraData: Any) -> None: ...
    def tryAuth(self, kind: Any): ...
    def ssh_USERAUTH_SUCCESS(self, packet: Any) -> None: ...
    def ssh_USERAUTH_FAILURE(self, packet: Any): ...
    def ssh_USERAUTH_PK_OK(self, packet: Any): ...
    def ssh_USERAUTH_PK_OK_publickey(self, packet: Any) -> None: ...
    def ssh_USERAUTH_PK_OK_password(self, packet: Any): ...
    def ssh_USERAUTH_PK_OK_keyboard_interactive(self, packet: Any) -> None: ...
    def auth_publickey(self): ...
    def auth_password(self): ...
    def auth_keyboard_interactive(self): ...
    def signData(self, publicKey: Any, signData: Any): ...
    def getPublicKey(self) -> None: ...
    def getPrivateKey(self): ...
    def getPassword(self, prompt: Optional[Any] = ...): ...
    def getGenericAnswers(self, name: Any, instruction: Any, prompts: Any): ...

MSG_USERAUTH_REQUEST: int
MSG_USERAUTH_FAILURE: int
MSG_USERAUTH_SUCCESS: int
MSG_USERAUTH_BANNER: int
MSG_USERAUTH_INFO_RESPONSE: int
MSG_USERAUTH_PK_OK: int
messages: Any
MSG_USERAUTH_PASSWD_CHANGEREQ: int
MSG_USERAUTH_INFO_REQUEST: int
