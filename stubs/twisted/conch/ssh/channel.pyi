from twisted.internet import interfaces as interfaces
from twisted.python import log as log
from twisted.python.compat import intToBytes as intToBytes, nativeString as nativeString
from typing import Any, Optional

class SSHChannel(log.Logger):
    name: Any = ...
    localWindowSize: Any = ...
    localWindowLeft: Any = ...
    localMaxPacket: Any = ...
    remoteWindowLeft: Any = ...
    remoteMaxPacket: Any = ...
    areWriting: int = ...
    conn: Any = ...
    data: Any = ...
    avatar: Any = ...
    specificData: bytes = ...
    buf: bytes = ...
    extBuf: Any = ...
    closing: int = ...
    localClosed: int = ...
    remoteClosed: int = ...
    id: Any = ...
    def __init__(self, localWindow: int = ..., localMaxPacket: int = ..., remoteWindow: int = ..., remoteMaxPacket: int = ..., conn: Optional[Any] = ..., data: Optional[Any] = ..., avatar: Optional[Any] = ...) -> None: ...
    def __bytes__(self): ...
    def logPrefix(self): ...
    def channelOpen(self, specificData: Any) -> None: ...
    def openFailed(self, reason: Any) -> None: ...
    def addWindowBytes(self, data: Any) -> None: ...
    def requestReceived(self, requestType: Any, data: Any): ...
    def dataReceived(self, data: Any) -> None: ...
    def extReceived(self, dataType: Any, data: Any) -> None: ...
    def eofReceived(self) -> None: ...
    def closeReceived(self) -> None: ...
    def closed(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeExtended(self, dataType: Any, data: Any) -> None: ...
    def writeSequence(self, data: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    def stopWriting(self) -> None: ...
    def startWriting(self) -> None: ...
