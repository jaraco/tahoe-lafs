from twisted.conch.interfaces import ISFTPFile as ISFTPFile, ISFTPServer as ISFTPServer
from twisted.conch.ssh.common import NS as NS, getNS as getNS
from twisted.internet import defer as defer, error as error, protocol as protocol
from twisted.logger import Logger as Logger
from twisted.python import failure as failure
from twisted.python.compat import nativeString as nativeString, networkString as networkString
from typing import Any, Dict, Optional

class FileTransferBase(protocol.Protocol):
    versions: Any = ...
    packetTypes: Dict[int, str] = ...
    buf: bytes = ...
    otherVersion: Any = ...
    def __init__(self) -> None: ...
    def sendPacket(self, kind: Any, data: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    connected: bool = ...
    def connectionLost(self, reason: Any) -> None: ...

class FileTransferServer(FileTransferBase):
    client: Any = ...
    openFiles: Any = ...
    openDirs: Any = ...
    def __init__(self, data: Optional[Any] = ..., avatar: Optional[Any] = ...) -> None: ...
    version: Any = ...
    def packet_INIT(self, data: Any) -> None: ...
    def packet_OPEN(self, data: Any) -> None: ...
    def packet_CLOSE(self, data: Any) -> None: ...
    def packet_READ(self, data: Any) -> None: ...
    def packet_WRITE(self, data: Any) -> None: ...
    def packet_REMOVE(self, data: Any) -> None: ...
    def packet_RENAME(self, data: Any) -> None: ...
    def packet_MKDIR(self, data: Any) -> None: ...
    def packet_RMDIR(self, data: Any) -> None: ...
    def packet_OPENDIR(self, data: Any) -> None: ...
    def packet_READDIR(self, data: Any) -> None: ...
    def packet_STAT(self, data: Any, followLinks: int = ...) -> None: ...
    def packet_LSTAT(self, data: Any) -> None: ...
    def packet_FSTAT(self, data: Any) -> None: ...
    def packet_SETSTAT(self, data: Any) -> None: ...
    def packet_FSETSTAT(self, data: Any) -> None: ...
    def packet_READLINK(self, data: Any) -> None: ...
    def packet_SYMLINK(self, data: Any) -> None: ...
    def packet_REALPATH(self, data: Any) -> None: ...
    def packet_EXTENDED(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class FileTransferClient(FileTransferBase):
    extData: Any = ...
    counter: int = ...
    openRequests: Any = ...
    def __init__(self, extData: Any = ...) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def openFile(self, filename: Any, flags: Any, attrs: Any): ...
    def removeFile(self, filename: Any): ...
    def renameFile(self, oldpath: Any, newpath: Any): ...
    def makeDirectory(self, path: Any, attrs: Any): ...
    def removeDirectory(self, path: Any): ...
    def openDirectory(self, path: Any): ...
    def getAttrs(self, path: Any, followLinks: int = ...): ...
    def setAttrs(self, path: Any, attrs: Any): ...
    def readLink(self, path: Any): ...
    def makeLink(self, linkPath: Any, targetPath: Any): ...
    def realPath(self, path: Any): ...
    def extendedRequest(self, request: Any, data: Any): ...
    version: Any = ...
    def packet_VERSION(self, data: Any) -> None: ...
    def packet_STATUS(self, data: Any) -> None: ...
    def packet_HANDLE(self, data: Any) -> None: ...
    def packet_DATA(self, data: Any) -> None: ...
    def packet_NAME(self, data: Any) -> None: ...
    def packet_ATTRS(self, data: Any) -> None: ...
    def packet_EXTENDED_REPLY(self, data: Any) -> None: ...
    def gotServerVersion(self, serverVersion: Any, extData: Any) -> None: ...

class ClientFile:
    parent: Any = ...
    handle: Any = ...
    def __init__(self, parent: Any, handle: Any) -> None: ...
    def close(self): ...
    def readChunk(self, offset: Any, length: Any): ...
    def writeChunk(self, offset: Any, chunk: Any): ...
    def getAttrs(self): ...
    def setAttrs(self, attrs: Any): ...

class ClientDirectory:
    parent: Any = ...
    handle: Any = ...
    filesCache: Any = ...
    def __init__(self, parent: Any, handle: Any) -> None: ...
    def read(self): ...
    def close(self): ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...

class SFTPError(Exception):
    code: Any = ...
    lang: Any = ...
    def __init__(self, errorCode: Any, errorMessage: Any, lang: str = ...) -> None: ...
    @property
    def message(self): ...

FXP_INIT: int
FXP_VERSION: int
FXP_OPEN: int
FXP_CLOSE: int
FXP_READ: int
FXP_WRITE: int
FXP_LSTAT: int
FXP_FSTAT: int
FXP_SETSTAT: int
FXP_FSETSTAT: int
FXP_OPENDIR: int
FXP_READDIR: int
FXP_REMOVE: int
FXP_MKDIR: int
FXP_RMDIR: int
FXP_REALPATH: int
FXP_STAT: int
FXP_RENAME: int
FXP_READLINK: int
FXP_SYMLINK: int
FXP_STATUS: int
FXP_HANDLE: int
FXP_DATA: int
FXP_NAME: int
FXP_ATTRS: int
FXP_EXTENDED: int
FXP_EXTENDED_REPLY: int
FILEXFER_ATTR_SIZE: int
FILEXFER_ATTR_UIDGID: int
FILEXFER_ATTR_OWNERGROUP = FILEXFER_ATTR_UIDGID
FILEXFER_ATTR_PERMISSIONS: int
FILEXFER_ATTR_ACMODTIME: int
FILEXFER_ATTR_EXTENDED: int
FILEXFER_TYPE_REGULAR: int
FILEXFER_TYPE_DIRECTORY: int
FILEXFER_TYPE_SYMLINK: int
FILEXFER_TYPE_SPECIAL: int
FILEXFER_TYPE_UNKNOWN: int
FXF_READ: int
FXF_WRITE: int
FXF_APPEND: int
FXF_CREAT: int
FXF_TRUNC: int
FXF_EXCL: int
FXF_TEXT: int
FX_OK: int
FX_EOF: int
FX_NO_SUCH_FILE: int
FX_PERMISSION_DENIED: int
FX_FAILURE: int
FX_BAD_MESSAGE: int
FX_NO_CONNECTION: int
FX_CONNECTION_LOST: int
FX_OP_UNSUPPORTED: int
FX_FILE_ALREADY_EXISTS: int
FX_NOT_A_DIRECTORY = FX_FAILURE
FX_FILE_IS_A_DIRECTORY = FX_FAILURE
g: Any
value = g[name]
