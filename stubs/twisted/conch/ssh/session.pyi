from twisted.conch.interfaces import EnvironmentVariableNotPermitted as EnvironmentVariableNotPermitted, ISession as ISession, ISessionSetEnv as ISessionSetEnv
from twisted.conch.ssh import channel as channel, common as common, connection as connection
from twisted.internet import interfaces as interfaces, protocol as protocol
from twisted.logger import Logger as Logger
from twisted.python.compat import networkString as networkString
from typing import Any, Optional

log: Any

class SSHSession(channel.SSHChannel):
    name: bytes = ...
    buf: bytes = ...
    client: Any = ...
    session: Any = ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def request_subsystem(self, data: Any): ...
    def request_shell(self, data: Any): ...
    def request_exec(self, data: Any): ...
    def request_pty_req(self, data: Any): ...
    def request_env(self, data: Any): ...
    def request_window_change(self, data: Any): ...
    def dataReceived(self, data: Any) -> None: ...
    def extReceived(self, dataType: Any, data: Any) -> None: ...
    def eofReceived(self) -> None: ...
    def closed(self) -> None: ...
    def loseConnection(self) -> None: ...

class _ProtocolWrapper(protocol.ProcessProtocol):
    proto: Any = ...
    def __init__(self, proto: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def outReceived(self, data: Any) -> None: ...
    def processEnded(self, reason: Any) -> None: ...

class _DummyTransport:
    proto: Any = ...
    def __init__(self, proto: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def loseConnection(self) -> None: ...

def wrapProcessProtocol(inst: Any): ...
def wrapProtocol(proto: Any): ...

SUPPORTED_SIGNALS: Any

class SSHSessionProcessProtocol(protocol.ProcessProtocol):
    session: Any = ...
    lostOutOrErrFlag: bool = ...
    def __init__(self, session: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def outReceived(self, data: Any) -> None: ...
    def errReceived(self, err: Any) -> None: ...
    def outConnectionLost(self) -> None: ...
    def errConnectionLost(self) -> None: ...
    def connectionLost(self, reason: Optional[Any] = ...) -> None: ...
    def processEnded(self, reason: Optional[Any] = ...) -> None: ...
    def getHost(self): ...
    def getPeer(self): ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def loseConnection(self) -> None: ...

class SSHSessionClient(protocol.Protocol):
    def dataReceived(self, data: Any) -> None: ...

def parseRequest_pty_req(data: Any): ...
def packRequest_pty_req(term: Any, geometry: Any, modes: Any): ...
def parseRequest_window_change(data: Any): ...
def packRequest_window_change(geometry: Any): ...
