from twisted.conch.ssh.channel import SSHChannel
from twisted.conch.ssh.connection import SSHConnection
from twisted.conch.ssh.transport import SSHClientTransport
from twisted.conch.ssh.userauth import SSHUserAuthClient
from typing import Any, Optional
from zope.interface import Interface

class AuthenticationFailed(Exception): ...

class _ISSHConnectionCreator(Interface):
    def secureConnection() -> None: ...
    def cleanupConnection(connection: Any, immediate: Any) -> None: ...

class SSHCommandAddress:
    server: Any = ...
    username: Any = ...
    command: Any = ...
    def __init__(self, server: Any, username: Any, command: Any) -> None: ...

class _CommandChannel(SSHChannel):
    name: bytes = ...
    def __init__(self, creator: Any, command: Any, protocolFactory: Any, commandConnected: Any) -> None: ...
    def openFailed(self, reason: Any) -> None: ...
    def channelOpen(self, ignored: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def request_exit_status(self, data: Any) -> None: ...
    def request_exit_signal(self, data: Any) -> None: ...
    def closed(self) -> None: ...

class _ConnectionReady(SSHConnection):
    def __init__(self, ready: Any) -> None: ...
    def serviceStarted(self) -> None: ...

class _UserAuth(SSHUserAuthClient):
    password: Any = ...
    keys: Any = ...
    agent: Any = ...
    key: Any = ...
    def getPublicKey(self): ...
    def signData(self, publicKey: Any, signData: Any): ...
    def getPrivateKey(self): ...
    def getPassword(self): ...
    def ssh_USERAUTH_SUCCESS(self, packet: Any): ...
    def connectToAgent(self, endpoint: Any): ...
    def loseAgentConnection(self) -> None: ...

class _CommandTransport(SSHClientTransport):
    connectionReady: Any = ...
    creator: Any = ...
    def __init__(self, creator: Any): ...
    def verifyHostKey(self, hostKey: Any, fingerprint: Any): ...
    def connectionSecure(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class SSHCommandClientEndpoint:
    def __init__(self, creator: Any, command: Any) -> None: ...
    @classmethod
    def newConnection(cls, reactor: Any, command: Any, username: Any, hostname: Any, port: Optional[Any] = ..., keys: Optional[Any] = ..., password: Optional[Any] = ..., agentEndpoint: Optional[Any] = ..., knownHosts: Optional[Any] = ..., ui: Optional[Any] = ...): ...
    @classmethod
    def existingConnection(cls, connection: Any, command: Any): ...
    def connect(self, protocolFactory: Any): ...

class _ReadFile:
    def __init__(self, contents: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def readline(self, count: int = ...): ...
    def close(self) -> None: ...

class _NewConnectionHelper:
    port: int = ...
    reactor: Any = ...
    hostname: Any = ...
    command: Any = ...
    username: Any = ...
    keys: Any = ...
    password: Any = ...
    agentEndpoint: Any = ...
    knownHosts: Any = ...
    ui: Any = ...
    tty: Any = ...
    def __init__(self, reactor: Any, hostname: Any, port: Any, command: Any, username: Any, keys: Any, password: Any, agentEndpoint: Any, knownHosts: Any, ui: Any, tty: Any = ...) -> None: ...
    def secureConnection(self): ...
    def cleanupConnection(self, connection: Any, immediate: Any) -> None: ...

class _ExistingConnectionHelper:
    connection: Any = ...
    def __init__(self, connection: Any) -> None: ...
    def secureConnection(self): ...
    def cleanupConnection(self, connection: Any, immediate: Any) -> None: ...
