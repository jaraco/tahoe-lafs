from twisted.application import service as service, strports as strports
from twisted.conch import manhole as manhole, manhole_ssh as manhole_ssh, telnet as telnet
from twisted.conch.insults import insults as insults
from twisted.conch.ssh import keys as keys
from twisted.cred import checkers as checkers, portal as portal
from twisted.internet import protocol as protocol
from twisted.python import filepath as filepath, usage as usage
from typing import Any

class makeTelnetProtocol:
    portal: Any = ...
    def __init__(self, portal: Any) -> None: ...
    def __call__(self): ...

class chainedProtocolFactory:
    namespace: Any = ...
    def __init__(self, namespace: Any) -> None: ...
    def __call__(self): ...

class _StupidRealm:
    protocolFactory: Any = ...
    protocolArgs: Any = ...
    protocolKwArgs: Any = ...
    def __init__(self, proto: Any, *a: Any, **kw: Any) -> None: ...
    def requestAvatar(self, avatarId: Any, *interfaces: Any): ...

class Options(usage.Options):
    optParameters: Any = ...
    def __init__(self) -> None: ...
    def postOptions(self) -> None: ...

def makeService(options: Any): ...
