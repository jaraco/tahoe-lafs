from twisted.conch.insults import helper as helper, insults as insults
from twisted.python import log as log, reflect as reflect
from twisted.python.compat import iterbytes as iterbytes
from typing import Any

class Logging:
    original: Any = ...
    def __init__(self, original: Any) -> None: ...
    def __getattribute__(self, name: Any): ...

class TransportSequence:
    execBytes: Any = ...
    execStr: Any = ...
    TAB: bytes = ...
    BACKSPACE: bytes = ...
    transports: Any = ...
    def __init__(self, *transports: Any) -> None: ...

class LocalTerminalBufferMixin:
    terminalCopy: Any = ...
    def makeConnection(self, transport: Any): ...

class RecvLine(insults.TerminalProtocol):
    width: int = ...
    height: int = ...
    TABSTOP: int = ...
    ps: Any = ...
    pn: int = ...
    lineBuffer: Any = ...
    lineBufferIndex: int = ...
    keyHandlers: Any = ...
    def connectionMade(self) -> None: ...
    def initializeScreen(self) -> None: ...
    def currentLineBuffer(self): ...
    mode: str = ...
    def setInsertMode(self) -> None: ...
    def setTypeoverMode(self) -> None: ...
    def drawInputLine(self) -> None: ...
    def terminalSize(self, width: Any, height: Any) -> None: ...
    def unhandledControlSequence(self, seq: Any) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...
    def characterReceived(self, ch: Any, moreCharactersComing: Any) -> None: ...
    def handle_TAB(self) -> None: ...
    def handle_LEFT(self) -> None: ...
    def handle_RIGHT(self) -> None: ...
    def handle_HOME(self) -> None: ...
    def handle_END(self) -> None: ...
    def handle_BACKSPACE(self) -> None: ...
    def handle_DELETE(self) -> None: ...
    def handle_RETURN(self) -> None: ...
    def handle_INSERT(self) -> None: ...
    def lineReceived(self, line: Any) -> None: ...

class HistoricRecvLine(RecvLine):
    historyLines: Any = ...
    historyPosition: int = ...
    def connectionMade(self) -> None: ...
    def currentHistoryBuffer(self): ...
    lineBuffer: Any = ...
    def handle_UP(self) -> None: ...
    lineBufferIndex: int = ...
    def handle_DOWN(self) -> None: ...
    def handle_RETURN(self): ...
