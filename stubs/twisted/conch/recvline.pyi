from twisted.conch.insults import helper as helper, insults as insults
from twisted.logger import Logger as Logger
from twisted.python import reflect as reflect
from twisted.python.compat import iterbytes as iterbytes
from typing import Any

class Logging:
    original: Any = ...
    def __init__(self, original: Any) -> None: ...
    def __getattribute__(self, name: Any): ...

class TransportSequence:
    execBytes: Any = ...
    execStr: Any = ...
    TAB: bytes = ...
    BACKSPACE: bytes = ...
    transports: Any = ...
    def __init__(self, *transports: Any) -> None: ...
    def getHost(self) -> None: ...
    def getPeer(self) -> None: ...
    def loseConnection(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, data: Any) -> None: ...
    def cursorUp(self, n: int = ...) -> None: ...
    def cursorDown(self, n: int = ...) -> None: ...
    def cursorForward(self, n: int = ...) -> None: ...
    def cursorBackward(self, n: int = ...) -> None: ...
    def cursorPosition(self, column: Any, line: Any) -> None: ...
    def cursorHome(self) -> None: ...
    def index(self) -> None: ...
    def reverseIndex(self) -> None: ...
    def nextLine(self) -> None: ...
    def saveCursor(self) -> None: ...
    def restoreCursor(self) -> None: ...
    def setModes(self, modes: Any) -> None: ...
    def resetModes(self, mode: Any) -> None: ...
    def setPrivateModes(self, modes: Any) -> None: ...
    def resetPrivateModes(self, modes: Any) -> None: ...
    def applicationKeypadMode(self) -> None: ...
    def numericKeypadMode(self) -> None: ...
    def selectCharacterSet(self, charSet: Any, which: Any) -> None: ...
    def shiftIn(self) -> None: ...
    def shiftOut(self) -> None: ...
    def singleShift2(self) -> None: ...
    def singleShift3(self) -> None: ...
    def selectGraphicRendition(self, *attributes: Any) -> None: ...
    def horizontalTabulationSet(self) -> None: ...
    def tabulationClear(self) -> None: ...
    def tabulationClearAll(self) -> None: ...
    def doubleHeightLine(self, top: bool = ...) -> None: ...
    def singleWidthLine(self) -> None: ...
    def doubleWidthLine(self) -> None: ...
    def eraseToLineEnd(self) -> None: ...
    def eraseToLineBeginning(self) -> None: ...
    def eraseLine(self) -> None: ...
    def eraseToDisplayEnd(self) -> None: ...
    def eraseToDisplayBeginning(self) -> None: ...
    def eraseDisplay(self) -> None: ...
    def deleteCharacter(self, n: int = ...) -> None: ...
    def insertLine(self, n: int = ...) -> None: ...
    def deleteLine(self, n: int = ...) -> None: ...
    def reportCursorPosition(self) -> None: ...
    def reset(self) -> None: ...
    def unhandledControlSequence(self, seq: Any) -> None: ...

class LocalTerminalBufferMixin:
    terminalCopy: Any = ...
    def makeConnection(self, transport: Any): ...

class RecvLine(insults.TerminalProtocol):
    width: int = ...
    height: int = ...
    TABSTOP: int = ...
    ps: Any = ...
    pn: int = ...
    lineBuffer: Any = ...
    lineBufferIndex: int = ...
    keyHandlers: Any = ...
    def connectionMade(self) -> None: ...
    def initializeScreen(self) -> None: ...
    def currentLineBuffer(self): ...
    mode: str = ...
    def setInsertMode(self) -> None: ...
    def setTypeoverMode(self) -> None: ...
    def drawInputLine(self) -> None: ...
    def terminalSize(self, width: Any, height: Any) -> None: ...
    def unhandledControlSequence(self, seq: Any) -> None: ...
    def keystrokeReceived(self, keyID: Any, modifier: Any) -> None: ...
    def characterReceived(self, ch: Any, moreCharactersComing: Any) -> None: ...
    def handle_TAB(self) -> None: ...
    def handle_LEFT(self) -> None: ...
    def handle_RIGHT(self) -> None: ...
    def handle_HOME(self) -> None: ...
    def handle_END(self) -> None: ...
    def handle_BACKSPACE(self) -> None: ...
    def handle_DELETE(self) -> None: ...
    def handle_RETURN(self) -> None: ...
    def handle_INSERT(self) -> None: ...
    def lineReceived(self, line: Any) -> None: ...

class HistoricRecvLine(RecvLine):
    historyLines: Any = ...
    historyPosition: int = ...
    def connectionMade(self) -> None: ...
    def currentHistoryBuffer(self): ...
    lineBuffer: Any = ...
    def handle_UP(self) -> None: ...
    lineBufferIndex: int = ...
    def handle_DOWN(self) -> None: ...
    def handle_RETURN(self): ...
