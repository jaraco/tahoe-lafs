from twisted.conch.client import connect as connect, default as default, options as options
from twisted.conch.ssh import channel as channel, common as common, connection as connection, filetransfer as filetransfer
from twisted.internet import defer as defer, reactor as reactor, stdio as stdio, utils as utils
from twisted.protocols import basic as basic
from twisted.python import failure as failure, log as log, usage as usage
from twisted.python.compat import unicode as unicode
from twisted.python.filepath import FilePath as FilePath
from typing import Any, Optional

class ClientOptions(options.ConchOptions):
    synopsis: str = ...
    longdesc: str = ...
    optParameters: Any = ...
    compData: Any = ...
    def parseArgs(self, host: Any, localPath: Optional[Any] = ...) -> None: ...

def run() -> None: ...
def handleError() -> None: ...
def doConnect(options: Any) -> None: ...

class FileWrapper:
    f: Any = ...
    total: float = ...
    size: Any = ...
    def __init__(self, f: Any) -> None: ...
    def __getattr__(self, attr: Any): ...

class StdioClient(basic.LineReceiver):
    ps: str = ...
    delimiter: bytes = ...
    reactor: Any = ...
    client: Any = ...
    currentDirectory: str = ...
    file: Any = ...
    useProgressBar: Any = ...
    def __init__(self, client: Any, f: Optional[Any] = ...) -> None: ...
    def connectionMade(self) -> None: ...
    ignoreErrors: int = ...
    def lineReceived(self, line: Any) -> None: ...
    def cmd_CD(self, path: Any): ...
    def cmd_CHGRP(self, rest: Any): ...
    def cmd_CHMOD(self, rest: Any): ...
    def cmd_CHOWN(self, rest: Any): ...
    def cmd_GET(self, rest: Any): ...
    def cmd_PUT(self, rest: Any): ...
    def cmd_LCD(self, path: Any) -> None: ...
    def cmd_LN(self, rest: Any): ...
    def cmd_LS(self, rest: Any): ...
    def cmd_MKDIR(self, path: Any): ...
    def cmd_RMDIR(self, path: Any): ...
    def cmd_LMKDIR(self, path: Any) -> None: ...
    def cmd_RM(self, path: Any): ...
    def cmd_LLS(self, rest: Any) -> None: ...
    def cmd_RENAME(self, rest: Any): ...
    def cmd_EXIT(self, ignored: Any) -> None: ...
    cmd_QUIT: Any = ...
    def cmd_VERSION(self, ignored: Any): ...
    def cmd_HELP(self, ignored: Any): ...
    def cmd_PWD(self, ignored: Any): ...
    def cmd_LPWD(self, ignored: Any): ...
    def cmd_PROGRESS(self, ignored: Any): ...
    def cmd_EXEC(self, rest: Any): ...

class SSHConnection(connection.SSHConnection):
    def serviceStarted(self) -> None: ...

class SSHSession(channel.SSHChannel):
    name: bytes = ...
    def channelOpen(self, foo: Any) -> None: ...
    def extReceived(self, t: Any, data: Any) -> None: ...
    def eofReceived(self) -> None: ...
    def closeReceived(self) -> None: ...
    def closed(self) -> None: ...
    def stopWriting(self) -> None: ...
    def startWriting(self) -> None: ...
