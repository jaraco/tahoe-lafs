import tkinter.messagebox as Tkinter
from twisted.conch import error as error
from twisted.conch.client.default import isInKnownHosts as isInKnownHosts
from twisted.conch.ssh import channel as channel, common as common, connection as connection, forwarding as forwarding, keys as keys, session as session, transport as transport, userauth as userauth
from twisted.conch.ui import tkvt100 as tkvt100
from twisted.internet import defer as defer, protocol as protocol, reactor as reactor, tksupport as tksupport
from twisted.python import log as log, usage as usage
from typing import Any, Optional

class TkConchMenu(Tkinter.Frame):
    localRemoteVar: Any = ...
    host: Any = ...
    port: Any = ...
    user: Any = ...
    command: Any = ...
    identity: Any = ...
    forwards: Any = ...
    forwardPort: Any = ...
    forwardHost: Any = ...
    localForward: Any = ...
    remoteForward: Any = ...
    cipher: Any = ...
    mac: Any = ...
    escape: Any = ...
    def __init__(self, *args: Any, **params: Any) -> None: ...
    def getIdentityFile(self) -> None: ...
    def addForward(self) -> None: ...
    def removeForward(self) -> None: ...
    def doConnect(self) -> None: ...

class GeneralOptions(usage.Options):
    synopsis: str = ...
    optParameters: Any = ...
    optFlags: Any = ...
    compData: Any = ...
    identitys: Any = ...
    localForwards: Any = ...
    remoteForwards: Any = ...
    def opt_identity(self, i: Any) -> None: ...
    def opt_localforward(self, f: Any) -> None: ...
    def opt_remoteforward(self, f: Any) -> None: ...
    def opt_compress(self) -> None: ...
    def parseArgs(self, *args: Any) -> None: ...

options: Any
menu: Any
exitStatus: int
frame: Any

def deferredAskFrame(question: Any, echo: Any): ...
def run() -> None: ...
def handleError() -> None: ...

class SSHClientFactory(protocol.ClientFactory):
    noisy: int = ...
    def stopFactory(self) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class SSHClientTransport(transport.SSHClientTransport):
    def receiveError(self, code: Any, desc: Any) -> None: ...
    def sendDisconnect(self, code: Any, reason: Any) -> None: ...
    def receiveDebug(self, alwaysDisplay: Any, message: Any, lang: Any) -> None: ...
    def verifyHostKey(self, pubKey: Any, fingerprint: Any): ...
    def connectionSecure(self) -> None: ...

class SSHUserAuthClient(userauth.SSHUserAuthClient):
    usedFiles: Any = ...
    def getPassword(self, prompt: Optional[Any] = ...): ...
    def getPublicKey(self): ...
    def getPrivateKey(self): ...

class SSHConnection(connection.SSHConnection):
    def serviceStarted(self) -> None: ...

class SSHSession(channel.SSHChannel):
    name: bytes = ...
    escapeMode: int = ...
    def channelOpen(self, foo: Any) -> None: ...
    def handleInput(self, char: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def extReceived(self, t: Any, data: Any) -> None: ...
    def eofReceived(self) -> None: ...
    def closed(self) -> None: ...
    def request_exit_status(self, data: Any) -> None: ...
    def sendEOF(self) -> None: ...
