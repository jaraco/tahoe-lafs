from twisted.conch import ttymodes as ttymodes
from twisted.conch.avatar import ConchUser as ConchUser
from twisted.conch.error import ConchError as ConchError
from twisted.conch.interfaces import ISFTPFile as ISFTPFile, ISFTPServer as ISFTPServer, ISession as ISession
from twisted.conch.ls import lsLine as lsLine
from twisted.conch.ssh import filetransfer as filetransfer, forwarding as forwarding, session as session
from twisted.conch.ssh.filetransfer import FXF_APPEND as FXF_APPEND, FXF_CREAT as FXF_CREAT, FXF_EXCL as FXF_EXCL, FXF_READ as FXF_READ, FXF_TRUNC as FXF_TRUNC, FXF_WRITE as FXF_WRITE
from twisted.cred import portal as portal
from twisted.internet.error import ProcessExitedAlready as ProcessExitedAlready
from twisted.logger import Logger as Logger
from twisted.python import components as components
from twisted.python.compat import nativeString as nativeString
from typing import Any, Optional

class UnixSSHRealm:
    def requestAvatar(self, username: Any, mind: Any, *interfaces: Any): ...

class UnixConchUser(ConchUser):
    username: Any = ...
    pwdData: Any = ...
    otherGroups: Any = ...
    listeners: Any = ...
    def __init__(self, username: Any) -> None: ...
    def getUserGroupId(self): ...
    def getOtherGroups(self): ...
    def getHomeDir(self): ...
    def getShell(self): ...
    def global_tcpip_forward(self, data: Any): ...
    def global_cancel_tcpip_forward(self, data: Any): ...
    def logout(self) -> None: ...

class SSHSessionForUnixConchUser:
    avatar: Any = ...
    environ: Any = ...
    pty: Any = ...
    ptyTuple: int = ...
    def __init__(self, avatar: Any, reactor: Optional[Any] = ...) -> None: ...
    def addUTMPEntry(self, loggedIn: int = ...) -> None: ...
    winSize: Any = ...
    modes: Any = ...
    def getPty(self, term: Any, windowSize: Any, modes: Any) -> None: ...
    oldWrite: Any = ...
    def openShell(self, proto: Any) -> None: ...
    def execCommand(self, proto: Any, cmd: Any) -> None: ...
    def getPtyOwnership(self) -> None: ...
    def setModes(self) -> None: ...
    def eofReceived(self) -> None: ...
    def closed(self) -> None: ...
    def windowChanged(self, winSize: Any) -> None: ...

class SFTPServerForUnixConchUser:
    avatar: Any = ...
    def __init__(self, avatar: Any) -> None: ...
    def gotVersion(self, otherVersion: Any, extData: Any): ...
    def openFile(self, filename: Any, flags: Any, attrs: Any): ...
    def removeFile(self, filename: Any): ...
    def renameFile(self, oldpath: Any, newpath: Any): ...
    def makeDirectory(self, path: Any, attrs: Any): ...
    def removeDirectory(self, path: Any) -> None: ...
    def openDirectory(self, path: Any): ...
    def getAttrs(self, path: Any, followLinks: Any): ...
    def setAttrs(self, path: Any, attrs: Any) -> None: ...
    def readLink(self, path: Any): ...
    def makeLink(self, linkPath: Any, targetPath: Any): ...
    def realPath(self, path: Any): ...
    def extendedRequest(self, extName: Any, extData: Any) -> None: ...

class UnixSFTPFile:
    server: Any = ...
    fd: Any = ...
    def __init__(self, server: Any, filename: Any, flags: Any, attrs: Any) -> None: ...
    def close(self): ...
    def readChunk(self, offset: Any, length: Any): ...
    def writeChunk(self, offset: Any, data: Any): ...
    def getAttrs(self): ...
    def setAttrs(self, attrs: Any) -> None: ...

class UnixSFTPDirectory:
    server: Any = ...
    files: Any = ...
    dir: Any = ...
    def __init__(self, server: Any, directory: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...
    def close(self) -> None: ...
