from twisted.cred import error as error
from twisted.cred._digest import calcHA1 as calcHA1, calcHA2 as calcHA2, calcResponse as calcResponse
from twisted.python.compat import intToBytes as intToBytes, nativeString as nativeString, networkString as networkString, unicode as unicode
from twisted.python.randbytes import secureRandom as secureRandom
from typing import Any, Optional
from zope.interface import Interface

class ICredentials(Interface): ...

class IUsernameDigestHash(ICredentials):
    def checkHash(digestHash: Any) -> None: ...

class IUsernameHashedPassword(ICredentials):
    def checkPassword(password: Any) -> None: ...

class IUsernamePassword(ICredentials):
    def checkPassword(password: Any) -> None: ...

class IAnonymous(ICredentials): ...

class DigestedCredentials:
    username: Any = ...
    method: Any = ...
    realm: Any = ...
    fields: Any = ...
    def __init__(self, username: Any, method: Any, realm: Any, fields: Any) -> None: ...
    def checkPassword(self, password: Any): ...
    def checkHash(self, digestHash: Any): ...

class DigestCredentialFactory:
    CHALLENGE_LIFETIME_SECS: Any = ...
    scheme: bytes = ...
    algorithm: Any = ...
    authenticationRealm: Any = ...
    privateKey: Any = ...
    def __init__(self, algorithm: Any, authenticationRealm: Any) -> None: ...
    def getChallenge(self, address: Any): ...
    def decode(self, response: Any, method: Any, host: Any): ...

class CramMD5Credentials:
    username: Any = ...
    challenge: bytes = ...
    response: bytes = ...
    host: Any = ...
    def __init__(self, host: Optional[Any] = ...) -> None: ...
    def getChallenge(self): ...
    def setResponse(self, response: Any) -> None: ...
    def moreChallenges(self): ...
    def checkPassword(self, password: Any): ...

class UsernameHashedPassword:
    username: Any = ...
    hashed: Any = ...
    def __init__(self, username: Any, hashed: Any) -> None: ...
    def checkPassword(self, password: Any): ...

class UsernamePassword:
    username: Any = ...
    password: Any = ...
    def __init__(self, username: Any, password: Any) -> None: ...
    def checkPassword(self, password: Any): ...

class Anonymous: ...
class ISSHPrivateKey(ICredentials): ...

class SSHPrivateKey:
    username: Any = ...
    algName: Any = ...
    blob: Any = ...
    sigData: Any = ...
    signature: Any = ...
    def __init__(self, username: Any, algName: Any, blob: Any, sigData: Any, signature: Any) -> None: ...
