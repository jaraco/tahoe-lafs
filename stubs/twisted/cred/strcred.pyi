from twisted.plugin import getPlugins as getPlugins
from twisted.python import usage as usage
from typing import Any
from zope.interface import Interface

class ICheckerFactory(Interface):
    authType: Any = ...
    authHelp: Any = ...
    argStringFormat: Any = ...
    credentialInterfaces: Any = ...
    def generateChecker(argstring: Any) -> None: ...

class StrcredException(Exception): ...
class InvalidAuthType(StrcredException): ...
class InvalidAuthArgumentString(StrcredException): ...
class UnsupportedInterfaces(StrcredException): ...

notSupportedWarning: str

def findCheckerFactories(): ...
def findCheckerFactory(authType: Any): ...
def makeChecker(description: Any): ...

class AuthOptionMixin:
    supportedInterfaces: Any = ...
    authOutput: Any = ...
    def supportsInterface(self, interface: Any): ...
    def supportsCheckerFactory(self, factory: Any): ...
    def addChecker(self, checker: Any) -> None: ...
    def opt_auth(self, description: Any) -> None: ...
    def opt_help_auth(self) -> None: ...
    def opt_help_auth_type(self, authType: Any) -> None: ...
