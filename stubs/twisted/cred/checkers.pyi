from twisted.cred import credentials as credentials, error as error
from twisted.internet import defer as defer
from twisted.logger import Logger as Logger
from twisted.python import failure as failure
from typing import Any, Optional
from zope.interface import Interface

class ICredentialsChecker(Interface):
    credentialInterfaces: Any = ...
    def requestAvatarId(credentials: Any) -> None: ...

ANONYMOUS: Any

class AllowAnonymousAccess:
    credentialInterfaces: Any = ...
    def requestAvatarId(self, credentials: Any): ...

class InMemoryUsernamePasswordDatabaseDontUse:
    credentialInterfaces: Any = ...
    users: Any = ...
    def __init__(self, **users: Any) -> None: ...
    def addUser(self, username: Any, password: Any) -> None: ...
    def requestAvatarId(self, credentials: Any): ...

class FilePasswordDB:
    cache: bool = ...
    filename: Any = ...
    delim: Any = ...
    ufield: Any = ...
    pfield: Any = ...
    caseSensitive: Any = ...
    hash: Any = ...
    credentialInterfaces: Any = ...
    def __init__(self, filename: Any, delim: bytes = ..., usernameField: int = ..., passwordField: int = ..., caseSensitive: bool = ..., hash: Optional[Any] = ..., cache: bool = ...) -> None: ...
    def getUser(self, username: Any): ...
    def requestAvatarId(self, c: Any): ...
OnDiskUsernamePasswordDatabase = FilePasswordDB
