from twisted.internet import defer as defer
from twisted.spread import banana as banana, flavors as flavors, jelly as jelly
from typing import Any

class Publishable(flavors.Cacheable):
    publishedID: Any = ...
    def __init__(self, publishedID: Any) -> None: ...
    timestamp: Any = ...
    def republish(self) -> None: ...
    def view_getStateToPublish(self, perspective: Any): ...
    def getStateToPublishFor(self, perspective: Any): ...
    def getStateToPublish(self) -> None: ...
    def getStateToCacheAndObserveFor(self, perspective: Any, observer: Any): ...

class RemotePublished(flavors.RemoteCache):
    isActivated: int = ...
    def getFileName(self, ext: str = ...): ...
    def setCopyableState(self, state: Any) -> None: ...
    def activated(self) -> None: ...
    def callWhenActivated(self, callback: Any) -> None: ...

def whenReady(d: Any): ...
