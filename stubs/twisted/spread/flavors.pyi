from .jelly import Jellyable as Jellyable, Unjellyable as Unjellyable, getInstanceState as getInstanceState, setInstanceState as setInstanceState, setUnjellyableFactoryForClass as setUnjellyableFactoryForClass, setUnjellyableForClass as setUnjellyableForClass, setUnjellyableForClassTree as setUnjellyableForClassTree, unjellyableRegistry as unjellyableRegistry
from twisted.python import log as log, reflect as reflect
from twisted.python.compat import cmp as cmp, comparable as comparable, unicode as unicode
from typing import Any
from zope.interface import Interface

setCopierForClass = setUnjellyableForClass
setCopierForClassTree = setUnjellyableForClassTree
setFactoryForClass = setUnjellyableFactoryForClass
copyTags = unjellyableRegistry
copy_atom: bytes
cache_atom: bytes
cached_atom: bytes
remote_atom: bytes

class NoSuchMethod(AttributeError): ...

class IPBRoot(Interface):
    def rootObject(broker: Any) -> None: ...

class Serializable(Jellyable):
    def processUniqueID(self): ...

class Referenceable(Serializable):
    perspective: Any = ...
    def remoteMessageReceived(self, broker: Any, message: Any, args: Any, kw: Any): ...
    def jellyFor(self, jellier: Any): ...

class Root(Referenceable):
    def rootObject(self, broker: Any): ...

class ViewPoint(Referenceable):
    perspective: Any = ...
    object: Any = ...
    def __init__(self, perspective: Any, object: Any) -> None: ...
    def processUniqueID(self): ...
    def remoteMessageReceived(self, broker: Any, message: Any, args: Any, kw: Any): ...

class Viewable(Serializable):
    def jellyFor(self, jellier: Any): ...

class Copyable(Serializable):
    def getStateToCopy(self): ...
    def getStateToCopyFor(self, perspective: Any): ...
    def getTypeToCopy(self): ...
    def getTypeToCopyFor(self, perspective: Any): ...
    def jellyFor(self, jellier: Any): ...

class Cacheable(Copyable):
    def getStateToCacheAndObserveFor(self, perspective: Any, observer: Any): ...
    def jellyFor(self, jellier: Any): ...
    def stoppedObserving(self, perspective: Any, observer: Any) -> None: ...

class RemoteCopy(Unjellyable):
    __dict__: Any = ...
    def setCopyableState(self, state: Any) -> None: ...
    def unjellyFor(self, unjellier: Any, jellyList: Any): ...

class RemoteCache(RemoteCopy, Serializable):
    def remoteMessageReceived(self, broker: Any, message: Any, args: Any, kw: Any): ...
    def jellyFor(self, jellier: Any): ...
    broker: Any = ...
    luid: Any = ...
    __dict__: Any = ...
    def unjellyFor(self, unjellier: Any, jellyList: Any): ...
    def __cmp__(self, other: Any): ...
    def __hash__(self) -> Any: ...
    def __del__(self) -> None: ...

def unjellyCached(unjellier: Any, unjellyList: Any): ...
def unjellyLCache(unjellier: Any, unjellyList: Any): ...
def unjellyLocal(unjellier: Any, unjellyList: Any): ...

class RemoteCacheMethod:
    name: Any = ...
    broker: Any = ...
    perspective: Any = ...
    cached: Any = ...
    def __init__(self, name: Any, broker: Any, cached: Any, perspective: Any) -> None: ...
    def __cmp__(self, other: Any): ...
    def __hash__(self) -> Any: ...
    def __call__(self, *args: Any, **kw: Any): ...

class RemoteCacheObserver:
    broker: Any = ...
    cached: Any = ...
    perspective: Any = ...
    def __init__(self, broker: Any, cached: Any, perspective: Any) -> None: ...
    def __hash__(self) -> Any: ...
    def __cmp__(self, other: Any): ...
    def callRemote(self, _name: Any, *args: Any, **kw: Any): ...
    def remoteMethod(self, key: Any): ...
