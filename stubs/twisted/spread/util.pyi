from twisted.internet import defer as defer, interfaces as interfaces
from twisted.protocols import basic as basic
from twisted.python.failure import Failure as Failure
from twisted.spread import pb as pb
from typing import Any, Optional

class LocalMethod:
    local: Any = ...
    name: Any = ...
    def __init__(self, local: Any, name: Any) -> None: ...
    def __call__(self, *args: Any, **kw: Any): ...

class LocalAsRemote:
    reportAllTracebacks: int = ...
    def callRemote(self, name: Any, *args: Any, **kw: Any): ...
    def remoteMethod(self, name: Any): ...

class LocalAsyncForwarder:
    forwarded: Any = ...
    interfaceClass: Any = ...
    failWhenNotImplemented: Any = ...
    def __init__(self, forwarded: Any, interfaceClass: Any, failWhenNotImplemented: int = ...) -> None: ...
    def callRemote(self, method: Any, *args: Any, **kw: Any): ...

class Pager:
    callback: Any = ...
    callbackArgs: Any = ...
    callbackKeyword: Any = ...
    collector: Any = ...
    def __init__(self, collector: Any, callback: Optional[Any] = ..., *args: Any, **kw: Any) -> None: ...
    def stillPaging(self): ...
    def sendNextPage(self) -> None: ...
    def nextPage(self) -> None: ...
    def stopPaging(self) -> None: ...

class StringPager(Pager):
    string: Any = ...
    pointer: int = ...
    chunkSize: Any = ...
    def __init__(self, collector: Any, st: Any, chunkSize: int = ..., callback: Optional[Any] = ..., *args: Any, **kw: Any) -> None: ...
    def nextPage(self): ...

class FilePager(Pager):
    chunks: Any = ...
    def __init__(self, collector: Any, fd: Any, callback: Optional[Any] = ..., *args: Any, **kw: Any) -> None: ...
    deferred: Any = ...
    def startProducing(self, fd: Any): ...
    producer: Any = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def write(self, chunk: Any) -> None: ...
    def sendNextPage(self) -> None: ...

class CallbackPageCollector(pb.Referenceable):
    pages: Any = ...
    callback: Any = ...
    def __init__(self, callback: Any) -> None: ...
    def remote_gotPage(self, page: Any) -> None: ...
    def remote_endedPaging(self) -> None: ...

def getAllPages(referenceable: Any, methodName: Any, *args: Any, **kw: Any): ...
