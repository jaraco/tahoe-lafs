from constantly import Names
from twisted.python.util import FancyEqMixin
from typing import Any, ClassVar, Optional, Sequence

MPS_PER_KNOT: float
MPS_PER_KPH: float
METERS_PER_FOOT: float

class Angles(Names):
    LATITUDE: Any = ...
    LONGITUDE: Any = ...
    HEADING: Any = ...
    VARIATION: Any = ...

class Directions(Names):
    NORTH: Any = ...
    EAST: Any = ...
    SOUTH: Any = ...
    WEST: Any = ...

class BasePositioningReceiver:
    def timeReceived(self, time: Any) -> None: ...
    def headingReceived(self, heading: Any) -> None: ...
    def speedReceived(self, speed: Any) -> None: ...
    def climbReceived(self, climb: Any) -> None: ...
    def positionReceived(self, latitude: Any, longitude: Any) -> None: ...
    def positionErrorReceived(self, positionError: Any) -> None: ...
    def altitudeReceived(self, altitude: Any) -> None: ...
    def beaconInformationReceived(self, beaconInformation: Any) -> None: ...

class InvalidSentence(Exception): ...
class InvalidChecksum(Exception): ...

class Angle(FancyEqMixin):
    compareAttributes: ClassVar[Sequence[str]] = ...
    angleType: Any = ...
    def __init__(self, angle: Optional[Any] = ..., angleType: Optional[Any] = ...) -> None: ...
    @property
    def inDecimalDegrees(self): ...
    @property
    def inDegreesMinutesSeconds(self): ...
    def setSign(self, sign: Any) -> None: ...
    def __float__(self): ...

class Heading(Angle):
    variation: Any = ...
    def __init__(self, angle: Optional[Any] = ..., variation: Optional[Any] = ...) -> None: ...
    @classmethod
    def fromFloats(cls, angleValue: Optional[Any] = ..., variationValue: Optional[Any] = ...): ...
    @property
    def correctedHeading(self): ...
    def setSign(self, sign: Any) -> None: ...
    compareAttributes: Any = ...

class Coordinate(Angle):
    def __init__(self, angle: Any, coordinateType: Optional[Any] = ...) -> None: ...
    @property
    def hemisphere(self): ...

class Altitude(FancyEqMixin):
    compareAttributes: Any = ...
    def __init__(self, altitude: Any) -> None: ...
    @property
    def inFeet(self): ...
    @property
    def inMeters(self): ...
    def __float__(self): ...

class _BaseSpeed(FancyEqMixin):
    compareAttributes: Any = ...
    def __init__(self, speed: Any) -> None: ...
    @property
    def inMetersPerSecond(self): ...
    @property
    def inKnots(self): ...
    def __float__(self): ...

class Speed(_BaseSpeed):
    def __init__(self, speed: Any) -> None: ...

class Climb(_BaseSpeed):
    def __init__(self, climb: Any) -> None: ...

class PositionError(FancyEqMixin):
    compareAttributes: Any = ...
    def __init__(self, pdop: Optional[Any] = ..., hdop: Optional[Any] = ..., vdop: Optional[Any] = ..., testInvariant: bool = ...) -> None: ...
    @property
    def pdop(self): ...
    @pdop.setter
    def pdop(self, value: Any): ...
    @property
    def hdop(self): ...
    @hdop.setter
    def hdop(self, value: Any): ...
    @property
    def vdop(self): ...
    @vdop.setter
    def vdop(self, value: Any): ...

class BeaconInformation:
    seenBeacons: Any = ...
    usedBeacons: Any = ...
    def __init__(self, seenBeacons: Any = ...) -> None: ...

class PositioningBeacon:
    identifier: Any = ...
    def __init__(self, identifier: Any) -> None: ...
    def __hash__(self) -> Any: ...

class Satellite(PositioningBeacon):
    azimuth: Any = ...
    elevation: Any = ...
    signalToNoiseRatio: Any = ...
    def __init__(self, identifier: Any, azimuth: Optional[Any] = ..., elevation: Optional[Any] = ..., signalToNoiseRatio: Optional[Any] = ...) -> None: ...
