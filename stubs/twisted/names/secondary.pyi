from twisted.application import service
from twisted.names.authority import FileAuthority
from typing import Any

class SecondaryAuthorityService(service.Service):
    calls: Any = ...
    primary: Any = ...
    domains: Any = ...
    def __init__(self, primary: Any, domains: Any) -> None: ...
    @classmethod
    def fromServerAddressAndDomains(cls, serverAddress: Any, domains: Any): ...
    def getAuthority(self): ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...

class SecondaryAuthority(FileAuthority):
    transferring: bool = ...
    soa: Any = ...
    records: Any = ...
    primary: Any = ...
    domain: Any = ...
    def __init__(self, primaryIP: Any, domain: Any) -> None: ...
    @classmethod
    def fromServerAddressAndDomain(cls, serverAddress: Any, domain: Any): ...
    transfering: bool = ...
    def transfer(self): ...
    def update(self) -> None: ...
