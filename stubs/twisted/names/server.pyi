from twisted.internet import protocol as protocol
from twisted.names import dns as dns, resolve as resolve
from twisted.python import log as log
from typing import Any, Optional

class DNSServerFactory(protocol.ServerFactory):
    protocol: Any = ...
    cache: Any = ...
    canRecurse: Any = ...
    resolver: Any = ...
    verbose: Any = ...
    connections: Any = ...
    def __init__(self, authorities: Optional[Any] = ..., caches: Optional[Any] = ..., clients: Optional[Any] = ..., verbose: int = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def connectionMade(self, protocol: Any) -> None: ...
    def connectionLost(self, protocol: Any) -> None: ...
    def sendReply(self, protocol: Any, message: Any, address: Any) -> None: ...
    def gotResolverResponse(self, response: Any, protocol: Any, message: Any, address: Any) -> None: ...
    def gotResolverError(self, failure: Any, protocol: Any, message: Any, address: Any) -> None: ...
    def handleQuery(self, message: Any, protocol: Any, address: Any): ...
    def handleInverseQuery(self, message: Any, protocol: Any, address: Any) -> None: ...
    def handleStatus(self, message: Any, protocol: Any, address: Any) -> None: ...
    def handleNotify(self, message: Any, protocol: Any, address: Any) -> None: ...
    def handleOther(self, message: Any, protocol: Any, address: Any) -> None: ...
    def messageReceived(self, message: Any, proto: Any, address: Optional[Any] = ...) -> None: ...
    def allowQuery(self, message: Any, protocol: Any, address: Any): ...
