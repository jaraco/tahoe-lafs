from twisted.internet import defer as defer, error as error, interfaces as interfaces, protocol as protocol
from twisted.internet.abstract import isIPv6Address as isIPv6Address
from twisted.internet.base import ThreadedResolver as _ThreadedResolverImpl
from twisted.names import cache as cache, common as common, dns as dns, resolve as resolve, root as root
from twisted.python import failure as failure, log as log
from twisted.python.compat import nativeString as nativeString
from twisted.python.filepath import FilePath as FilePath
from twisted.python.runtime import platform as platform
from typing import Any, Optional

class Resolver(common.ResolverBase):
    index: int = ...
    timeout: Any = ...
    factory: Any = ...
    servers: Any = ...
    dynServers: Any = ...
    pending: Any = ...
    connections: Any = ...
    resolv: Any = ...
    def __init__(self, resolv: Optional[Any] = ..., servers: Optional[Any] = ..., timeout: Any = ..., reactor: Optional[Any] = ...) -> None: ...
    def maybeParseConfig(self) -> None: ...
    domain: Any = ...
    search: Any = ...
    def parseConfig(self, resolvConf: Any) -> None: ...
    def pickServer(self): ...
    def connectionMade(self, protocol: Any) -> None: ...
    def connectionLost(self, protocol: Any) -> None: ...
    def messageReceived(self, message: Any, protocol: Any, address: Optional[Any] = ...) -> None: ...
    def queryUDP(self, queries: Any, timeout: Optional[Any] = ...): ...
    def queryTCP(self, queries: Any, timeout: int = ...): ...
    def filterAnswers(self, message: Any): ...
    def lookupZone(self, name: Any, timeout: int = ...): ...

class AXFRController:
    timeoutCall: Any = ...
    name: Any = ...
    deferred: Any = ...
    soa: Any = ...
    records: Any = ...
    pending: Any = ...
    def __init__(self, name: Any, deferred: Any) -> None: ...
    def connectionMade(self, protocol: Any) -> None: ...
    def connectionLost(self, protocol: Any) -> None: ...
    def messageReceived(self, message: Any, protocol: Any) -> None: ...

class ThreadedResolver(_ThreadedResolverImpl):
    def __init__(self, reactor: Optional[Any] = ...) -> None: ...

class DNSClientFactory(protocol.ClientFactory):
    controller: Any = ...
    timeout: Any = ...
    def __init__(self, controller: Any, timeout: int = ...) -> None: ...
    def clientConnectionLost(self, connector: Any, reason: Any) -> None: ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

def createResolver(servers: Optional[Any] = ..., resolvconf: Optional[Any] = ..., hosts: Optional[Any] = ...): ...

theResolver: Any

def getResolver(): ...
def getHostByName(name: Any, timeout: Optional[Any] = ..., effort: int = ...): ...
def query(query: Any, timeout: Optional[Any] = ...): ...
def lookupAddress(name: Any, timeout: Optional[Any] = ...): ...
def lookupIPV6Address(name: Any, timeout: Optional[Any] = ...): ...
def lookupAddress6(name: Any, timeout: Optional[Any] = ...): ...
def lookupMailExchange(name: Any, timeout: Optional[Any] = ...): ...
def lookupNameservers(name: Any, timeout: Optional[Any] = ...): ...
def lookupCanonicalName(name: Any, timeout: Optional[Any] = ...): ...
def lookupMailBox(name: Any, timeout: Optional[Any] = ...): ...
def lookupMailGroup(name: Any, timeout: Optional[Any] = ...): ...
def lookupMailRename(name: Any, timeout: Optional[Any] = ...): ...
def lookupPointer(name: Any, timeout: Optional[Any] = ...): ...
def lookupAuthority(name: Any, timeout: Optional[Any] = ...): ...
def lookupNull(name: Any, timeout: Optional[Any] = ...): ...
def lookupWellKnownServices(name: Any, timeout: Optional[Any] = ...): ...
def lookupService(name: Any, timeout: Optional[Any] = ...): ...
def lookupHostInfo(name: Any, timeout: Optional[Any] = ...): ...
def lookupMailboxInfo(name: Any, timeout: Optional[Any] = ...): ...
def lookupText(name: Any, timeout: Optional[Any] = ...): ...
def lookupSenderPolicy(name: Any, timeout: Optional[Any] = ...): ...
def lookupResponsibility(name: Any, timeout: Optional[Any] = ...): ...
def lookupAFSDatabase(name: Any, timeout: Optional[Any] = ...): ...
def lookupZone(name: Any, timeout: Optional[Any] = ...): ...
def lookupAllRecords(name: Any, timeout: Optional[Any] = ...): ...
def lookupNamingAuthorityPointer(name: Any, timeout: Optional[Any] = ...): ...
