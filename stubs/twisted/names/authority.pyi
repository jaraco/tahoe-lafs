from twisted.internet import defer as defer
from twisted.names import common as common, dns as dns, error as error
from twisted.python import failure as failure
from twisted.python.compat import execfile as execfile, nativeString as nativeString
from twisted.python.filepath import FilePath as FilePath
from typing import Any

def getSerial(filename: str = ...): ...

class FileAuthority(common.ResolverBase):
    soa: Any = ...
    records: Any = ...
    def __init__(self, filename: Any) -> None: ...
    def loadFile(self, filename: Any) -> None: ...
    def lookupZone(self, name: Any, timeout: int = ...): ...

class PySourceAuthority(FileAuthority):
    records: Any = ...
    soa: Any = ...
    def loadFile(self, filename: Any) -> None: ...
    def wrapRecord(self, type: Any): ...
    def setupConfigNamespace(self): ...

class BindAuthority(FileAuthority):
    origin: Any = ...
    def loadFile(self, filename: Any) -> None: ...
    def stripComments(self, lines: Any): ...
    def collapseContinuations(self, lines: Any): ...
    records: Any = ...
    def parseLines(self, lines: Any) -> None: ...
    def addRecord(self, owner: Any, ttl: Any, type: Any, domain: Any, cls: Any, rdata: Any) -> None: ...
    soa: Any = ...
    def class_IN(self, ttl: Any, type: Any, domain: Any, rdata: Any) -> None: ...
    def parseRecordLine(self, origin: Any, ttl: Any, line: Any) -> None: ...
