from twisted.internet import defer as defer
from twisted.names import common as common, dns as dns
from twisted.python import failure as failure, log as log
from typing import Any, Optional

class CacheResolver(common.ResolverBase):
    cache: Any = ...
    verbose: Any = ...
    cancel: Any = ...
    def __init__(self, cache: Optional[Any] = ..., verbose: int = ..., reactor: Optional[Any] = ...) -> None: ...
    def lookupAllRecords(self, name: Any, timeout: Optional[Any] = ...): ...
    def cacheResult(self, query: Any, payload: Any, cacheTime: Optional[Any] = ...) -> None: ...
    def clearEntry(self, query: Any) -> None: ...
