from twisted.internet import error as error, interfaces as interfaces
from twisted.names import client as client, dns as dns
from twisted.names.error import DNSNameError as DNSNameError
from twisted.python.compat import nativeString as nativeString
from typing import Any, Optional

class _SRVConnector_ClientFactoryWrapper:
    def __init__(self, connector: Any, wrappedFactory: Any) -> None: ...
    def startedConnecting(self, connector: Any) -> None: ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...
    def clientConnectionLost(self, connector: Any, reason: Any) -> None: ...
    def __getattr__(self, key: Any): ...

class SRVConnector:
    stopAfterDNS: int = ...
    reactor: Any = ...
    service: Any = ...
    domain: Any = ...
    factory: Any = ...
    protocol: Any = ...
    connectFuncName: Any = ...
    connectFuncArgs: Any = ...
    connectFuncKwArgs: Any = ...
    connector: Any = ...
    servers: Any = ...
    orderedServers: Any = ...
    def __init__(self, reactor: Any, service: Any, domain: Any, factory: Any, protocol: str = ..., connectFuncName: str = ..., connectFuncArgs: Any = ..., connectFuncKwArgs: Any = ..., defaultPort: Optional[Any] = ...) -> None: ...
    def connect(self): ...
    def pickServer(self): ...
    def stopConnecting(self) -> None: ...
    def disconnect(self) -> None: ...
    def getDestination(self): ...
    def connectionFailed(self, reason: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
