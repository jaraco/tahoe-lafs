from twisted.internet import defer as defer, interfaces as interfaces
from twisted.names import common as common, dns as dns, error as error
from typing import Any, Optional

class FailureHandler:
    resolver: Any = ...
    query: Any = ...
    timeout: Any = ...
    def __init__(self, resolver: Any, query: Any, timeout: Any) -> None: ...
    def __call__(self, failure: Any): ...

class ResolverChain(common.ResolverBase):
    resolvers: Any = ...
    def __init__(self, resolvers: Any) -> None: ...
    def lookupAllRecords(self, name: Any, timeout: Optional[Any] = ...): ...
