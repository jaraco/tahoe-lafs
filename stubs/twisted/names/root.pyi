from twisted.internet import defer as defer
from twisted.names import common as common, dns as dns, error as error
from twisted.python.failure import Failure as Failure
from typing import Any, Optional

class _DummyController:
    def messageReceived(self, *args: Any) -> None: ...

class Resolver(common.ResolverBase):
    hints: Any = ...
    def __init__(self, hints: Any, maximumQueries: int = ..., reactor: Optional[Any] = ..., resolverFactory: Optional[Any] = ...) -> None: ...

def makePlaceholder(deferred: Any, name: Any): ...

class DeferredResolver:
    waiting: Any = ...
    def __init__(self, resolverDeferred: Any) -> None: ...
    __dict__: Any = ...
    __class__: Any = ...
    def gotRealResolver(self, resolver: Any) -> None: ...
    def __getattr__(self, name: Any): ...

def bootstrap(resolver: Any, resolverFactory: Optional[Any] = ...): ...
