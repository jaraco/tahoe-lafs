from twisted.internet import defer as defer, error as error, interfaces as interfaces
from twisted.logger import Logger as Logger
from twisted.names import dns as dns
from twisted.names.error import DNSFormatError as DNSFormatError, DNSNameError as DNSNameError, DNSNotImplementedError as DNSNotImplementedError, DNSQueryRefusedError as DNSQueryRefusedError, DNSServerError as DNSServerError, DNSUnknownError as DNSUnknownError
from typing import Any, Optional

EMPTY_RESULT: Any

class ResolverBase:
    typeToMethod: Any = ...
    def __init__(self) -> None: ...
    def exceptionForCode(self, responseCode: Any): ...
    def query(self, query: Any, timeout: Optional[Any] = ...): ...
    def lookupAddress(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupIPV6Address(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupAddress6(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupMailExchange(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupNameservers(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupCanonicalName(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupMailBox(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupMailGroup(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupMailRename(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupPointer(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupAuthority(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupNull(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupWellKnownServices(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupService(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupHostInfo(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupMailboxInfo(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupText(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupSenderPolicy(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupResponsibility(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupAFSDatabase(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupZone(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupNamingAuthorityPointer(self, name: Any, timeout: Optional[Any] = ...): ...
    def lookupAllRecords(self, name: Any, timeout: Optional[Any] = ...): ...
    def getHostByName(self, name: Any, timeout: Optional[Any] = ..., effort: int = ...): ...

def extractRecord(resolver: Any, name: Any, answers: Any, level: int = ...): ...

typeToMethod: Any
