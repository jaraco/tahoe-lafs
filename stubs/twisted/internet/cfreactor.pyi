from twisted.internet.posixbase import PosixReactorBase, _Waker
from typing import Any, Optional

class _WakerPlus(_Waker):
    def doRead(self): ...

class CFReactor(PosixReactorBase):
    def __init__(self, runLoop: Optional[Any] = ..., runner: Optional[Any] = ...) -> None: ...
    waker: Any = ...
    def installWaker(self) -> None: ...
    def addReader(self, reader: Any) -> None: ...
    def addWriter(self, writer: Any) -> None: ...
    def removeReader(self, reader: Any) -> None: ...
    def removeWriter(self, writer: Any) -> None: ...
    def removeAll(self): ...
    def getReaders(self): ...
    def getWriters(self): ...
    def mainLoop(self) -> None: ...
    def callLater(self, _seconds: Any, _f: Any, *args: Any, **kw: Any): ...
    def stop(self) -> None: ...
    def crash(self) -> None: ...
    def iterate(self, delay: int = ...) -> None: ...

def install(runLoop: Optional[Any] = ..., runner: Optional[Any] = ...): ...
