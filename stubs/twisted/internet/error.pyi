from typing import Any, Optional

class BindError(Exception):
    __doc__: str = ...
    MESSAGE: str = ...

class CannotListenError(BindError):
    interface: Any = ...
    port: Any = ...
    socketError: Any = ...
    def __init__(self, interface: Any, port: Any, socketError: Any) -> None: ...

class MulticastJoinError(Exception): ...

class MessageLengthError(Exception):
    __doc__: str = ...
    MESSAGE: str = ...

class DNSLookupError(IOError):
    __doc__: str = ...
    MESSAGE: str = ...

class ConnectInProgressError(Exception): ...

class ConnectError(Exception):
    __doc__: str = ...
    MESSAGE: str = ...
    osError: Any = ...
    def __init__(self, osError: Optional[Any] = ..., string: str = ...) -> None: ...

class ConnectBindError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class UnknownHostError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class NoRouteError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class ConnectionRefusedError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class TCPTimedOutError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class BadFileError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class ServiceNameUnknownError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class UserError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class TimeoutError(UserError):
    __doc__: str = ...
    MESSAGE: str = ...

class SSLError(ConnectError):
    __doc__: str = ...
    MESSAGE: str = ...

class VerifyError(Exception):
    __doc__: str = ...
    MESSAGE: str = ...

class PeerVerifyError(VerifyError):
    __doc__: str = ...
    MESSAGE: str = ...

class CertificateError(Exception):
    __doc__: str = ...
    MESSAGE: str = ...

def getConnectError(e: Any): ...

class ConnectionClosed(Exception): ...

class ConnectionLost(ConnectionClosed):
    __doc__: str = ...
    MESSAGE: str = ...

class ConnectionAborted(ConnectionLost):
    MESSAGE: str = ...

class ConnectionDone(ConnectionClosed):
    __doc__: str = ...
    MESSAGE: str = ...

class FileDescriptorOverrun(ConnectionLost):
    MESSAGE: str = ...

class ConnectionFdescWentAway(ConnectionLost):
    __doc__: str = ...
    MESSAGE: str = ...

class AlreadyCalled(ValueError):
    __doc__: str = ...
    MESSAGE: str = ...

class AlreadyCancelled(ValueError):
    __doc__: str = ...
    MESSAGE: str = ...

class PotentialZombieWarning(Warning):
    MESSAGE: str = ...

class ProcessDone(ConnectionDone):
    __doc__: str = ...
    MESSAGE: str = ...
    exitCode: int = ...
    signal: Any = ...
    status: Any = ...
    def __init__(self, status: Any) -> None: ...

class ProcessTerminated(ConnectionLost):
    __doc__: str = ...
    MESSAGE: str = ...
    exitCode: Any = ...
    signal: Any = ...
    status: Any = ...
    def __init__(self, exitCode: Optional[Any] = ..., signal: Optional[Any] = ..., status: Optional[Any] = ...) -> None: ...

class ProcessExitedAlready(Exception): ...

class NotConnectingError(RuntimeError):
    __doc__: str = ...
    MESSAGE: str = ...

class NotListeningError(RuntimeError):
    __doc__: str = ...
    MESSAGE: str = ...

class ReactorNotRunning(RuntimeError): ...
class ReactorNotRestartable(RuntimeError): ...
class ReactorAlreadyRunning(RuntimeError): ...
class ReactorAlreadyInstalledError(AssertionError): ...

class ConnectingCancelledError(Exception):
    address: Any = ...
    def __init__(self, address: Any) -> None: ...

class NoProtocol(Exception): ...
class UnsupportedAddressFamily(Exception): ...
class UnsupportedSocketType(Exception): ...
class AlreadyListened(Exception): ...

class InvalidAddressError(ValueError):
    address: Any = ...
    message: Any = ...
    def __init__(self, address: Any, message: Any) -> None: ...
