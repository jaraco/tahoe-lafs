from typing import Any, Optional
from zope.interface import Interface

class IAddress(Interface): ...

class IConnector(Interface):
    def stopConnecting() -> None: ...
    def disconnect() -> None: ...
    def connect() -> None: ...
    def getDestination() -> None: ...

class IResolverSimple(Interface):
    def getHostByName(name: Any, timeout: Any = ...) -> None: ...

class IHostResolution(Interface):
    name: Any = ...
    def cancel() -> None: ...

class IResolutionReceiver(Interface):
    def resolutionBegan(resolutionInProgress: Any) -> None: ...
    def addressResolved(address: Any) -> None: ...
    def resolutionComplete() -> None: ...

class IHostnameResolver(Interface):
    def resolveHostName(resolutionReceiver: Any, hostName: Any, portNumber: int = ..., addressTypes: Optional[Any] = ..., transportSemantics: str = ...) -> None: ...

class IResolver(IResolverSimple):
    def query(query: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupAddress(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupAddress6(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupIPV6Address(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupMailExchange(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupNameservers(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupCanonicalName(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupMailBox(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupMailGroup(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupMailRename(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupPointer(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupAuthority(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupNull(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupWellKnownServices(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupHostInfo(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupMailboxInfo(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupText(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupResponsibility(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupAFSDatabase(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupService(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupAllRecords(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupSenderPolicy(name: Any, timeout: int = ...) -> None: ...
    def lookupNamingAuthorityPointer(name: Any, timeout: Optional[Any] = ...) -> None: ...
    def lookupZone(name: Any, timeout: Optional[Any] = ...) -> None: ...

class IReactorTCP(Interface):
    def listenTCP(port: Any, factory: Any, backlog: int = ..., interface: str = ...) -> None: ...
    def connectTCP(host: Any, port: Any, factory: Any, timeout: int = ..., bindAddress: Optional[Any] = ...) -> None: ...

class IReactorSSL(Interface):
    def connectSSL(host: Any, port: Any, factory: Any, contextFactory: Any, timeout: int = ..., bindAddress: Optional[Any] = ...) -> None: ...
    def listenSSL(port: Any, factory: Any, contextFactory: Any, backlog: int = ..., interface: str = ...) -> None: ...

class IReactorUNIX(Interface):
    def connectUNIX(address: Any, factory: Any, timeout: int = ..., checkPID: int = ...) -> None: ...
    def listenUNIX(address: Any, factory: Any, backlog: int = ..., mode: int = ..., wantPID: int = ...) -> None: ...

class IReactorUNIXDatagram(Interface):
    def connectUNIXDatagram(address: Any, protocol: Any, maxPacketSize: int = ..., mode: int = ..., bindAddress: Optional[Any] = ...) -> None: ...
    def listenUNIXDatagram(address: Any, protocol: Any, maxPacketSize: int = ..., mode: int = ...) -> None: ...

class IReactorWin32Events(Interface):
    def addEvent(event: Any, fd: Any, action: Any) -> None: ...
    def removeEvent(event: Any) -> None: ...

class IReactorUDP(Interface):
    def listenUDP(port: Any, protocol: Any, interface: str = ..., maxPacketSize: int = ...) -> None: ...

class IReactorMulticast(Interface):
    def listenMulticast(port: Any, protocol: Any, interface: str = ..., maxPacketSize: int = ..., listenMultiple: bool = ...) -> None: ...

class IReactorSocket(Interface):
    def adoptStreamPort(fileDescriptor: Any, addressFamily: Any, factory: Any) -> None: ...
    def adoptStreamConnection(fileDescriptor: Any, addressFamily: Any, factory: Any) -> None: ...
    def adoptDatagramPort(fileDescriptor: Any, addressFamily: Any, protocol: Any, maxPacketSize: int = ...) -> None: ...

class IReactorProcess(Interface):
    def spawnProcess(processProtocol: Any, executable: Any, args: Any = ..., env: Any = ..., path: Optional[Any] = ..., uid: Optional[Any] = ..., gid: Optional[Any] = ..., usePTY: int = ..., childFDs: Optional[Any] = ...) -> None: ...

class IReactorTime(Interface):
    def seconds() -> None: ...
    def callLater(delay: Any, callable: Any, *args: Any, **kw: Any) -> None: ...
    def getDelayedCalls() -> None: ...

class IDelayedCall(Interface):
    def getTime() -> None: ...
    def cancel() -> None: ...
    def delay(secondsLater: Any) -> None: ...
    def reset(secondsFromNow: Any) -> None: ...
    def active() -> None: ...

class IReactorFromThreads(Interface):
    def callFromThread(callable: Any, *args: Any, **kw: Any) -> None: ...

class IReactorInThreads(Interface):
    def callInThread(callable: Any, *args: Any, **kwargs: Any) -> None: ...

class IReactorThreads(IReactorFromThreads, IReactorInThreads):
    def getThreadPool() -> None: ...
    def suggestThreadPoolSize(size: Any) -> None: ...

class IReactorCore(Interface):
    running: Any = ...
    def resolve(name: Any, timeout: int = ...) -> None: ...
    def run() -> None: ...
    def stop() -> None: ...
    def crash() -> None: ...
    def iterate(delay: int = ...) -> None: ...
    def fireSystemEvent(eventType: Any) -> None: ...
    def addSystemEventTrigger(phase: Any, eventType: Any, callable: Any, *args: Any, **kw: Any) -> None: ...
    def removeSystemEventTrigger(triggerID: Any) -> None: ...
    def callWhenRunning(callable: Any, *args: Any, **kw: Any) -> None: ...

class IReactorPluggableResolver(Interface):
    def installResolver(resolver: Any) -> None: ...

class IReactorPluggableNameResolver(Interface):
    nameResolver: Any = ...
    def installNameResolver(resolver: Any) -> None: ...

class IReactorDaemonize(Interface):
    def beforeDaemonize() -> None: ...
    def afterDaemonize() -> None: ...

class IReactorFDSet(Interface):
    def addReader(reader: Any) -> None: ...
    def addWriter(writer: Any) -> None: ...
    def removeReader(reader: Any) -> None: ...
    def removeWriter(writer: Any) -> None: ...
    def removeAll() -> None: ...
    def getReaders() -> None: ...
    def getWriters() -> None: ...

class IListeningPort(Interface):
    def startListening() -> None: ...
    def stopListening() -> None: ...
    def getHost() -> None: ...

class ILoggingContext(Interface):
    def logPrefix() -> None: ...

class IFileDescriptor(ILoggingContext):
    def fileno() -> None: ...
    def connectionLost(reason: Any) -> None: ...

class IReadDescriptor(IFileDescriptor):
    def doRead() -> None: ...

class IWriteDescriptor(IFileDescriptor):
    def doWrite() -> None: ...

class IReadWriteDescriptor(IReadDescriptor, IWriteDescriptor): ...

class IHalfCloseableDescriptor(Interface):
    def writeConnectionLost(reason: Any) -> None: ...
    def readConnectionLost(reason: Any) -> None: ...

class ISystemHandle(Interface):
    def getHandle() -> None: ...

class IConsumer(Interface):
    def registerProducer(producer: Any, streaming: Any) -> None: ...
    def unregisterProducer() -> None: ...
    def write(data: Any) -> None: ...

class IProducer(Interface):
    def stopProducing() -> None: ...

class IPushProducer(IProducer):
    def pauseProducing() -> None: ...
    def resumeProducing() -> None: ...

class IPullProducer(IProducer):
    def resumeProducing() -> None: ...

class IProtocol(Interface):
    def dataReceived(data: Any) -> None: ...
    def connectionLost(reason: Any) -> None: ...
    def makeConnection(transport: Any) -> None: ...
    def connectionMade() -> None: ...

class IProcessProtocol(Interface):
    def makeConnection(process: Any) -> None: ...
    def childDataReceived(childFD: Any, data: Any) -> None: ...
    def childConnectionLost(childFD: Any) -> None: ...
    def processExited(reason: Any) -> None: ...
    def processEnded(reason: Any) -> None: ...

class IHalfCloseableProtocol(Interface):
    def readConnectionLost() -> None: ...
    def writeConnectionLost() -> None: ...

class IHandshakeListener(Interface):
    def handshakeCompleted() -> None: ...

class IFileDescriptorReceiver(Interface):
    def fileDescriptorReceived(descriptor: Any) -> None: ...

class IProtocolFactory(Interface):
    def buildProtocol(addr: Any) -> None: ...
    def doStart() -> None: ...
    def doStop() -> None: ...

class ITransport(Interface):
    def write(data: Any) -> None: ...
    def writeSequence(data: Any) -> None: ...
    def loseConnection() -> None: ...
    def getPeer() -> None: ...
    def getHost() -> None: ...

class ITCPTransport(ITransport):
    def loseWriteConnection() -> None: ...
    def abortConnection() -> None: ...
    def getTcpNoDelay() -> None: ...
    def setTcpNoDelay(enabled: Any) -> None: ...
    def getTcpKeepAlive() -> None: ...
    def setTcpKeepAlive(enabled: Any) -> None: ...
    def getHost() -> None: ...
    def getPeer() -> None: ...

class IUNIXTransport(ITransport):
    def sendFileDescriptor(descriptor: Any) -> None: ...

class IOpenSSLServerConnectionCreator(Interface):
    def serverConnectionForTLS(tlsProtocol: Any) -> None: ...

class IOpenSSLClientConnectionCreator(Interface):
    def clientConnectionForTLS(tlsProtocol: Any) -> None: ...

class IProtocolNegotiationFactory(Interface):
    def acceptableProtocols() -> None: ...

class IOpenSSLContextFactory(Interface):
    def getContext() -> None: ...

class ITLSTransport(ITCPTransport):
    def startTLS(contextFactory: Any) -> None: ...

class ISSLTransport(ITCPTransport):
    def getPeerCertificate() -> None: ...

class INegotiated(ISSLTransport):
    negotiatedProtocol: Any = ...

class ICipher(Interface):
    fullName: Any = ...

class IAcceptableCiphers(Interface):
    def selectCiphers(availableCiphers: Any) -> None: ...

class IProcessTransport(ITransport):
    pid: Any = ...
    def closeStdin() -> None: ...
    def closeStdout() -> None: ...
    def closeStderr() -> None: ...
    def closeChildFD(descriptor: Any) -> None: ...
    def writeToChild(childFD: Any, data: Any) -> None: ...
    def loseConnection() -> None: ...
    def signalProcess(signalID: Any) -> None: ...

class IServiceCollection(Interface):
    def getServiceNamed(serviceName: Any) -> None: ...
    def addService(service: Any) -> None: ...
    def removeService(service: Any) -> None: ...

class IUDPTransport(Interface):
    def write(packet: Any, addr: Optional[Any] = ...) -> None: ...
    def connect(host: Any, port: Any) -> None: ...
    def getHost() -> None: ...
    def stopListening() -> None: ...
    def setBroadcastAllowed(enabled: Any) -> None: ...
    def getBroadcastAllowed() -> None: ...

class IUNIXDatagramTransport(Interface):
    def write(packet: Any, address: Any) -> None: ...
    def getHost() -> None: ...

class IUNIXDatagramConnectedTransport(Interface):
    def write(packet: Any) -> None: ...
    def getHost() -> None: ...
    def getPeer() -> None: ...

class IMulticastTransport(Interface):
    def getOutgoingInterface() -> None: ...
    def setOutgoingInterface(addr: Any) -> None: ...
    def getLoopbackMode() -> None: ...
    def setLoopbackMode(mode: Any) -> None: ...
    def getTTL() -> None: ...
    def setTTL(ttl: Any) -> None: ...
    def joinGroup(addr: Any, interface: str = ...) -> None: ...
    def leaveGroup(addr: Any, interface: str = ...) -> None: ...

class IStreamClientEndpoint(Interface):
    def connect(protocolFactory: Any) -> None: ...

class IStreamServerEndpoint(Interface):
    def listen(protocolFactory: Any) -> None: ...

class IStreamServerEndpointStringParser(Interface):
    prefix: Any = ...
    def parseStreamServer(reactor: Any, *args: Any, **kwargs: Any) -> None: ...

class IStreamClientEndpointStringParserWithReactor(Interface):
    prefix: Any = ...
    def parseStreamClient(reactor: Any, *args: Any, **kwargs: Any) -> None: ...

class _ISupportsExitSignalCapturing(Interface): ...
