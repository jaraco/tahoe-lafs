from constantly import Names
from twisted.internet import interfaces
from twisted.internet.protocol import ClientFactory, ProcessProtocol, Protocol
from typing import Any, Optional

class _WrappingProtocol(Protocol):
    def __init__(self, connectedDeferred: Any, wrappedProtocol: Any) -> None: ...
    def logPrefix(self): ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any): ...
    def fileDescriptorReceived(self, descriptor: Any): ...
    def connectionLost(self, reason: Any): ...
    def readConnectionLost(self) -> None: ...
    def writeConnectionLost(self) -> None: ...
    def handshakeCompleted(self) -> None: ...

class _WrappingFactory(ClientFactory):
    protocol: Any = ...
    def __init__(self, wrappedFactory: Any) -> None: ...
    def startedConnecting(self, connector: Any) -> None: ...
    def doStart(self) -> None: ...
    def doStop(self) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class StandardIOEndpoint:
    def __init__(self, reactor: Any) -> None: ...
    def listen(self, stdioProtocolFactory: Any): ...

class _IProcessTransportWithConsumerAndProducer(interfaces.IProcessTransport, interfaces.IConsumer, interfaces.IPushProducer): ...
class _ProcessEndpointTransport: ...

class _WrapIProtocol(ProcessProtocol):
    protocol: Any = ...
    errFlag: Any = ...
    executable: Any = ...
    def __init__(self, proto: Any, executable: Any, errFlag: Any) -> None: ...
    transport: Any = ...
    def makeConnection(self, process: Any): ...
    def childDataReceived(self, childFD: Any, data: Any): ...
    def processEnded(self, reason: Any): ...

class StandardErrorBehavior(Names):
    LOG: Any = ...
    DROP: Any = ...

class ProcessEndpoint:
    def __init__(self, reactor: Any, executable: Any, args: Any = ..., env: Any = ..., path: Optional[Any] = ..., uid: Optional[Any] = ..., gid: Optional[Any] = ..., usePTY: int = ..., childFDs: Optional[Any] = ..., errFlag: Any = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class _TCPServerEndpoint:
    def __init__(self, reactor: Any, port: Any, backlog: Any, interface: Any) -> None: ...
    def listen(self, protocolFactory: Any): ...

class TCP4ServerEndpoint(_TCPServerEndpoint):
    def __init__(self, reactor: Any, port: Any, backlog: int = ..., interface: str = ...) -> None: ...

class TCP6ServerEndpoint(_TCPServerEndpoint):
    def __init__(self, reactor: Any, port: Any, backlog: int = ..., interface: str = ...) -> None: ...

class TCP4ClientEndpoint:
    def __init__(self, reactor: Any, host: Any, port: Any, timeout: int = ..., bindAddress: Optional[Any] = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class TCP6ClientEndpoint:
    def __init__(self, reactor: Any, host: Any, port: Any, timeout: int = ..., bindAddress: Optional[Any] = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class _SimpleHostnameResolver:
    def __init__(self, nameResolution: Any) -> None: ...
    def resolveHostName(self, resolutionReceiver: Any, hostName: Any, portNumber: int = ..., addressTypes: Optional[Any] = ..., transportSemantics: str = ...): ...

class HostnameEndpoint:
    def __init__(self, reactor: Any, host: Any, port: Any, timeout: int = ..., bindAddress: Optional[Any] = ..., attemptDelay: Optional[Any] = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class SSL4ServerEndpoint:
    def __init__(self, reactor: Any, port: Any, sslContextFactory: Any, backlog: int = ..., interface: str = ...) -> None: ...
    def listen(self, protocolFactory: Any): ...

class SSL4ClientEndpoint:
    def __init__(self, reactor: Any, host: Any, port: Any, sslContextFactory: Any, timeout: int = ..., bindAddress: Optional[Any] = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class UNIXServerEndpoint:
    def __init__(self, reactor: Any, address: Any, backlog: int = ..., mode: int = ..., wantPID: int = ...) -> None: ...
    def listen(self, protocolFactory: Any): ...

class UNIXClientEndpoint:
    def __init__(self, reactor: Any, path: Any, timeout: int = ..., checkPID: int = ...) -> None: ...
    def connect(self, protocolFactory: Any): ...

class AdoptedStreamServerEndpoint:
    reactor: Any = ...
    fileno: Any = ...
    addressFamily: Any = ...
    def __init__(self, reactor: Any, fileno: Any, addressFamily: Any) -> None: ...
    def listen(self, factory: Any): ...

class _StandardIOParser:
    prefix: str = ...
    def parseStreamServer(self, reactor: Any, *args: Any, **kwargs: Any): ...

class _SystemdParser:
    prefix: str = ...
    def parseStreamServer(self, reactor: Any, *args: Any, **kwargs: Any): ...

class _TCP6ServerParser:
    prefix: str = ...
    def parseStreamServer(self, reactor: Any, *args: Any, **kwargs: Any): ...

def serverFromString(reactor: Any, description: Any): ...
def clientFromString(reactor: Any, description: Any): ...
def connectProtocol(endpoint: Any, protocol: Any): ...

class _WrapperEndpoint:
    def __init__(self, wrappedEndpoint: Any, wrapperFactory: Any) -> None: ...
    def connect(self, protocolFactory: Any): ...

class _WrapperServerEndpoint:
    def __init__(self, wrappedEndpoint: Any, wrapperFactory: Any) -> None: ...
    def listen(self, protocolFactory: Any): ...

def wrapClientTLS(connectionCreator: Any, wrappedEndpoint: Any): ...

class _TLSClientEndpointParser:
    prefix: str = ...
    @staticmethod
    def parseStreamClient(reactor: Any, *args: Any, **kwargs: Any): ...
