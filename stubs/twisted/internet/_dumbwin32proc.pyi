from twisted.internet import _pollingfile, error as error
from twisted.internet._baseprocess import BaseProcess as BaseProcess
from twisted.internet.interfaces import IConsumer as IConsumer, IProcessTransport as IProcessTransport, IProducer as IProducer
from twisted.python.win32 import quoteArguments as quoteArguments
from typing import Any

PIPE_ATTRS_INHERITABLE: Any

def debug(msg: Any) -> None: ...

class _Reaper(_pollingfile._PollableResource):
    proc: Any = ...
    def __init__(self, proc: Any) -> None: ...
    def checkWork(self): ...

class Process(_pollingfile._PollingTimer, BaseProcess):
    closedNotifies: int = ...
    hStdoutR: Any = ...
    hStderrR: Any = ...
    hStdinW: Any = ...
    stdout: Any = ...
    stderr: Any = ...
    stdin: Any = ...
    def __init__(self, reactor: Any, protocol: Any, command: Any, args: Any, environment: Any, path: Any): ...
    def signalProcess(self, signalID: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def writeToChild(self, fd: Any, data: Any) -> None: ...
    def closeChildFD(self, fd: Any) -> None: ...
    def closeStdin(self) -> None: ...
    def closeStderr(self) -> None: ...
    def closeStdout(self) -> None: ...
    def loseConnection(self) -> None: ...
    def outConnectionLost(self) -> None: ...
    def errConnectionLost(self) -> None: ...
    def inConnectionLost(self) -> None: ...
    def connectionLostNotify(self) -> None: ...
    hProcess: Any = ...
    hThread: Any = ...
    def maybeCallProcessEnded(self) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def stopProducing(self) -> None: ...
    def getHost(self) -> None: ...
    def getPeer(self) -> None: ...
