from twisted.internet import protocol
from typing import Any, Optional

class _UnexpectedErrorOutput(IOError):
    processEnded: Any = ...
    def __init__(self, text: Any, processEnded: Any) -> None: ...

class _BackRelay(protocol.ProcessProtocol):
    deferred: Any = ...
    s: Any = ...
    errReceived: Any = ...
    def __init__(self, deferred: Any, errortoo: int = ...) -> None: ...
    onProcessEnded: Any = ...
    def errReceivedIsBad(self, text: Any) -> None: ...
    def errReceivedIsGood(self, text: Any) -> None: ...
    def outReceived(self, text: Any) -> None: ...
    def processEnded(self, reason: Any) -> None: ...

def getProcessOutput(executable: Any, args: Any = ..., env: Any = ..., path: Optional[Any] = ..., reactor: Optional[Any] = ..., errortoo: int = ...): ...

class _ValueGetter(protocol.ProcessProtocol):
    deferred: Any = ...
    def __init__(self, deferred: Any) -> None: ...
    def processEnded(self, reason: Any) -> None: ...

def getProcessValue(executable: Any, args: Any = ..., env: Any = ..., path: Optional[Any] = ..., reactor: Optional[Any] = ...): ...

class _EverythingGetter(protocol.ProcessProtocol):
    deferred: Any = ...
    outBuf: Any = ...
    errBuf: Any = ...
    outReceived: Any = ...
    errReceived: Any = ...
    stdinBytes: Any = ...
    def __init__(self, deferred: Any, stdinBytes: Optional[Any] = ...) -> None: ...
    def connectionMade(self) -> None: ...
    def processEnded(self, reason: Any) -> None: ...

def getProcessOutputAndValue(executable: Any, args: Any = ..., env: Any = ..., path: Optional[Any] = ..., reactor: Optional[Any] = ..., stdinBytes: Optional[Any] = ...): ...
def runWithWarningsSuppressed(suppressedWarnings: Any, f: Any, *a: Any, **kw: Any): ...
def suppressWarnings(f: Any, *suppressedWarnings: Any): ...
