from twisted.internet import _pollingfile, main as main
from twisted.internet.interfaces import IAddress as IAddress, IConsumer as IConsumer, IHalfCloseableProtocol as IHalfCloseableProtocol, IPushProducer as IPushProducer, ITransport as ITransport
from twisted.python.failure import Failure as Failure
from typing import Any, Optional

class Win32PipeAddress: ...

class StandardIO(_pollingfile._PollingTimer):
    disconnecting: bool = ...
    disconnected: bool = ...
    proto: Any = ...
    stdin: Any = ...
    stdout: Any = ...
    def __init__(self, proto: Any, reactor: Optional[Any] = ...) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def readConnectionLost(self) -> None: ...
    def writeConnectionLost(self) -> None: ...
    connsLost: int = ...
    def checkConnLost(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    def registerProducer(self, producer: Any, streaming: Any): ...
    def unregisterProducer(self): ...
    def stopProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
