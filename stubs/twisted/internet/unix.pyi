from twisted.internet import address as address, base as base, error as error, interfaces as interfaces, main as main, protocol as protocol, tcp as tcp, udp as udp
from twisted.python import failure as failure, lockfile as lockfile, log as log, reflect as reflect, sendmsg as sendmsg
from twisted.python.compat import lazyByteSlice as lazyByteSlice
from twisted.python.util import untilConcludes as untilConcludes
from typing import Any, Optional

class _SendmsgMixin:
    def __init__(self) -> None: ...
    def sendFileDescriptor(self, fileno: Any) -> None: ...
    def writeSomeData(self, data: Any): ...
    def doRead(self): ...

class _UnsupportedSendmsgMixin: ...

class Server(_SendmsgMixin, tcp.Server):
    def __init__(self, sock: Any, protocol: Any, client: Any, server: Any, sessionno: Any, reactor: Any) -> None: ...
    def getHost(self): ...
    def getPeer(self): ...

class _UNIXPort:
    def getHost(self): ...

class Port(_UNIXPort, tcp.Port):
    addressFamily: Any = ...
    socketType: Any = ...
    transport: Any = ...
    lockFile: Any = ...
    mode: Any = ...
    wantPID: Any = ...
    def __init__(self, fileName: Any, factory: Any, backlog: int = ..., mode: int = ..., reactor: Optional[Any] = ..., wantPID: int = ...) -> None: ...
    connected: bool = ...
    socket: Any = ...
    fileno: Any = ...
    numberAccepts: int = ...
    def startListening(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class Client(_SendmsgMixin, tcp.BaseClient):
    addressFamily: Any = ...
    socketType: Any = ...
    connector: Any = ...
    realAddress: Any = ...
    def __init__(self, filename: Any, connector: Any, reactor: Optional[Any] = ..., checkPID: int = ...) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...

class Connector(base.BaseConnector):
    address: Any = ...
    checkPID: Any = ...
    def __init__(self, address: Any, factory: Any, timeout: Any, reactor: Any, checkPID: Any) -> None: ...
    def getDestination(self): ...

class DatagramPort(_UNIXPort, udp.Port):
    addressFamily: Any = ...
    mode: Any = ...
    def __init__(self, addr: Any, proto: Any, maxPacketSize: int = ..., mode: int = ..., reactor: Optional[Any] = ...) -> None: ...
    def write(self, datagram: Any, address: Any): ...
    connected: int = ...
    def connectionLost(self, reason: Optional[Any] = ...) -> None: ...
    logstr: Any = ...
    def setLogStr(self) -> None: ...

class ConnectedDatagramPort(DatagramPort):
    remoteaddr: Any = ...
    def __init__(self, addr: Any, proto: Any, maxPacketSize: int = ..., mode: int = ..., bindAddress: Optional[Any] = ..., reactor: Optional[Any] = ...) -> None: ...
    def startListening(self) -> None: ...
    def connectionFailed(self, reason: Any) -> None: ...
    def doRead(self) -> None: ...
    def write(self, data: Any): ...
    def getPeer(self): ...
