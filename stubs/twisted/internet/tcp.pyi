from errno import WSAEWOULDBLOCK as EWOULDBLOCK
from twisted.internet import abstract as abstract, address as address, base as base, error as error, fdesc as fdesc, main as main
from twisted.internet._newtls import ClientMixin as _TLSClientMixin, ConnectionMixin as _TLSConnectionMixin, ServerMixin as _TLSServerMixin
from twisted.internet.error import CannotListenError as CannotListenError
from twisted.internet.interfaces import IHalfCloseableProtocol as IHalfCloseableProtocol, IListeningPort as IListeningPort, ISystemHandle as ISystemHandle, ITCPTransport as ITCPTransport, ITLSTransport as ITLSTransport
from twisted.internet.protocol import Protocol as Protocol
from twisted.internet.task import deferLater as deferLater
from twisted.logger import Logger as Logger
from twisted.python import deprecate as deprecate, failure as failure, log as log, reflect as reflect, versions as versions
from twisted.python.compat import lazyByteSlice as lazyByteSlice
from twisted.python.runtime import platformType as platformType
from twisted.python.util import untilConcludes as untilConcludes
from typing import Any, Optional
from zope.interface import Interface

ITLSTransport = Interface

class _TLSConnectionMixin:
    TLS: bool = ...

class _TLSClientMixin: ...
class _TLSServerMixin: ...

EPERM: Any
ENFILE: Any
ENOMEM: Any
EAGAIN = EWOULDBLOCK

class _SocketCloser: ...

class _AbortingMixin:
    doRead: Any = ...
    doWrite: Any = ...
    def abortConnection(self) -> None: ...

class Connection(_TLSConnectionMixin, abstract.FileDescriptor, _SocketCloser, _AbortingMixin):
    socket: Any = ...
    fileno: Any = ...
    protocol: Any = ...
    def __init__(self, skt: Any, protocol: Any, reactor: Optional[Any] = ...) -> None: ...
    def getHandle(self): ...
    def doRead(self): ...
    def writeSomeData(self, data: Any): ...
    def readConnectionLost(self, reason: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    logstr: str = ...
    def logPrefix(self): ...
    def getTcpNoDelay(self): ...
    def setTcpNoDelay(self, enabled: Any) -> None: ...
    def getTcpKeepAlive(self): ...
    def setTcpKeepAlive(self, enabled: Any) -> None: ...

class _BaseBaseClient:
    addressFamily: Any = ...
    socketType: Any = ...
    def resolveAddress(self): ...
    def failIfNotConnected(self, err: Any) -> None: ...
    def stopConnecting(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class BaseClient(_BaseBaseClient, _TLSClientMixin, Connection):
    def createInternetSocket(self): ...
    doWrite: Any = ...
    doRead: Any = ...
    def doConnect(self) -> None: ...

class _BaseTCPClient:
    connector: Any = ...
    addr: Any = ...
    addressFamily: Any = ...
    def __init__(self, host: Any, port: Any, bindAddress: Any, connector: Any, reactor: Optional[Any] = ...) -> None: ...
    def getHost(self): ...
    def getPeer(self): ...

class Client(_BaseTCPClient, BaseClient): ...

class Server(_TLSServerMixin, Connection):
    server: Any = ...
    client: Any = ...
    sessionno: Any = ...
    hostname: Any = ...
    logstr: Any = ...
    repstr: Any = ...
    connected: int = ...
    def __init__(self, sock: Any, protocol: Any, client: Any, server: Any, sessionno: Any, reactor: Any) -> None: ...
    def getHost(self): ...
    def getPeer(self): ...

class _IFileDescriptorReservation(Interface):
    def available() -> None: ...
    def reserve() -> None: ...
    def __enter__() -> None: ...
    def __exit__(excType: Any, excValue: Any, traceback: Any) -> None: ...

class _FileDescriptorReservation:
    def available(self): ...
    def reserve(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, excType: Any, excValue: Any, traceback: Any) -> None: ...
    def __init__(self, fileFactory: Any, fileDescriptor: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class _NullFileDescriptorReservation:
    def available(self): ...
    def reserve(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, excType: Any, excValue: Any, traceback: Any) -> None: ...

class _BuffersLogs:
    def __enter__(self): ...
    def __exit__(self, excValue: Any, excType: Any, traceback: Any) -> None: ...
    def __init__(self, namespace: Any, observer: Any, logs: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class Port(base.BasePort, _SocketCloser):
    socketType: Any = ...
    transport: Any = ...
    sessionno: int = ...
    interface: str = ...
    backlog: int = ...
    addressFamily: Any = ...
    port: Any = ...
    factory: Any = ...
    def __init__(self, port: Any, factory: Any, backlog: int = ..., interface: str = ..., reactor: Optional[Any] = ...) -> None: ...
    def createInternetSocket(self): ...
    connected: bool = ...
    socket: Any = ...
    fileno: Any = ...
    numberAccepts: int = ...
    def startListening(self) -> None: ...
    def doRead(self) -> None: ...
    disconnecting: bool = ...
    deferred: Any = ...
    def loseConnection(self, connDone: Any = ...): ...
    stopListening: Any = ...
    def connectionLost(self, reason: Any) -> None: ...
    def logPrefix(self): ...
    def getHost(self): ...

class Connector(base.BaseConnector):
    bindAddress: Any = ...
    def __init__(self, host: Any, port: Any, factory: Any, timeout: Any, bindAddress: Any, reactor: Optional[Any] = ...) -> None: ...
    def getDestination(self): ...
