from twisted.internet.abstract import FileDescriptor as FileDescriptor
from twisted.internet.interfaces import ISSLTransport as ISSLTransport
from twisted.protocols.tls import TLSMemoryBIOFactory as TLSMemoryBIOFactory, TLSMemoryBIOProtocol as TLSMemoryBIOProtocol
from typing import Any

class _BypassTLS:
    def __init__(self, base: Any, connection: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def write(self, data: Any): ...
    def writeSequence(self, iovec: Any): ...
    def loseConnection(self, *args: Any, **kwargs: Any): ...
    def registerProducer(self, producer: Any, streaming: Any): ...
    def unregisterProducer(self): ...

def startTLS(transport: Any, contextFactory: Any, normal: Any, bypass: Any) -> None: ...

class ConnectionMixin:
    TLS: bool = ...
    def startTLS(self, ctx: Any, normal: bool = ...) -> None: ...
    def write(self, bytes: Any) -> None: ...
    def writeSequence(self, iovec: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

class ClientMixin: ...
class ServerMixin: ...
