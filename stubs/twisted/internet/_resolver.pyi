from twisted.internet.address import IPv4Address as IPv4Address, IPv6Address as IPv6Address
from twisted.internet.defer import Deferred as Deferred
from twisted.internet.error import DNSLookupError as DNSLookupError
from twisted.internet.interfaces import IHostResolution as IHostResolution, IHostnameResolver as IHostnameResolver, IResolutionReceiver as IResolutionReceiver, IResolverSimple as IResolverSimple
from twisted.internet.threads import deferToThreadPool as deferToThreadPool
from twisted.logger import Logger as Logger
from twisted.python.compat import nativeString as nativeString
from typing import Any, Optional

__metaclass__ = type

class HostResolution:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...

class GAIResolver:
    def __init__(self, reactor: Any, getThreadPool: Optional[Any] = ..., getaddrinfo: Any = ...) -> None: ...
    def resolveHostName(self, resolutionReceiver: Any, hostName: Any, portNumber: int = ..., addressTypes: Optional[Any] = ..., transportSemantics: str = ...): ...

class SimpleResolverComplexifier:
    def __init__(self, simpleResolver: Any) -> None: ...
    def resolveHostName(self, resolutionReceiver: Any, hostName: Any, portNumber: int = ..., addressTypes: Optional[Any] = ..., transportSemantics: str = ...): ...

class FirstOneWins:
    def __init__(self, deferred: Any) -> None: ...
    def resolutionBegan(self, resolution: Any) -> None: ...
    def addressResolved(self, address: Any) -> None: ...
    def resolutionComplete(self) -> None: ...

class ComplexResolverSimplifier:
    def __init__(self, nameResolver: Any) -> None: ...
    def getHostByName(self, name: Any, timeouts: Any = ...): ...
