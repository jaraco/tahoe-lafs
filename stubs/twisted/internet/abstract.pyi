from twisted.internet import interfaces
from twisted.python import failure
from typing import Any, Iterable, Optional

class _ConsumerMixin:
    producer: Any = ...
    producerPaused: bool = ...
    streamingProducer: bool = ...
    def startWriting(self) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

class _LogOwner:
    def logPrefix(self): ...

class FileDescriptor(_ConsumerMixin, _LogOwner):
    connected: int = ...
    disconnected: int = ...
    disconnecting: int = ...
    dataBuffer: bytes = ...
    offset: int = ...
    SEND_LIMIT: Any = ...
    reactor: Any = ...
    def __init__(self, reactor: Optional[interfaces.IReactorFDSet]=...) -> None: ...
    producer: Any = ...
    def connectionLost(self, reason: Any) -> None: ...
    def writeSomeData(self, data: bytes) -> None: ...
    def doRead(self) -> None: ...
    producerPaused: bool = ...
    def doWrite(self): ...
    def writeConnectionLost(self, reason: Any) -> None: ...
    def readConnectionLost(self, reason: failure.Failure) -> None: ...
    def getHost(self) -> None: ...
    def getPeer(self) -> None: ...
    def write(self, data: bytes) -> None: ...
    def writeSequence(self, iovec: Iterable[bytes]) -> None: ...
    def loseConnection(self) -> None: ...
    def loseWriteConnection(self) -> None: ...
    def stopReading(self) -> None: ...
    def stopWriting(self) -> None: ...
    def startReading(self) -> None: ...
    def startWriting(self) -> None: ...
    bufferSize: Any = ...
    def stopConsuming(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def stopProducing(self) -> None: ...
    def fileno(self): ...

def isIPAddress(addr: str, family: int=...) -> bool: ...
def isIPv6Address(addr: str) -> bool: ...
