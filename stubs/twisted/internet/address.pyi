from twisted.internet.interfaces import IAddress as IAddress
from twisted.python.runtime import platform as platform
from typing import Any

class IPv4Address:
    type: Any = ...
    host: Any = ...
    port: Any = ...
    def __init__(self, type: Any, host: Any, port: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class IPv6Address:
    type: Any = ...
    host: Any = ...
    port: Any = ...
    flowInfo: Any = ...
    scopeID: Any = ...
    def __init__(self, type: Any, host: Any, port: Any, flowInfo: Any, scopeID: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class _ProcessAddress: ...

class HostnameAddress:
    hostname: Any = ...
    port: Any = ...
    def __init__(self, hostname: Any, port: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class UNIXAddress:
    name: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def __init__(self, name: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class _ServerFactoryIPv4Address(IPv4Address):
    def __eq__(self, other: Any) -> Any: ...
