from twisted.internet import tcp
from twisted.internet._sslverify import Certificate as Certificate, CertificateRequest as CertificateRequest, DN as DN, DistinguishedName as DistinguishedName, KeyPair as KeyPair, OpenSSLAcceptableCiphers as AcceptableCiphers, OpenSSLCertificateOptions as CertificateOptions, OpenSSLDefaultPaths as OpenSSLDefaultPaths, OpenSSLDiffieHellmanParameters as DiffieHellmanParameters, PrivateCertificate as PrivateCertificate, ProtocolNegotiationSupport as ProtocolNegotiationSupport, TLSVersion as TLSVersion, VerificationError as VerificationError, optionsForClientTLS as optionsForClientTLS, platformTrust as platformTrust, protocolNegotiationMechanisms as protocolNegotiationMechanisms, trustRootFromCertificates as trustRootFromCertificates
from typing import Any, Optional

class ContextFactory:
    isClient: int = ...
    def getContext(self) -> None: ...

class DefaultOpenSSLContextFactory(ContextFactory):
    privateKeyFileName: Any = ...
    certificateFileName: Any = ...
    sslmethod: Any = ...
    def __init__(self, privateKeyFileName: Any, certificateFileName: Any, sslmethod: Any = ..., _contextFactory: Any = ...) -> None: ...
    def cacheContext(self) -> None: ...
    def getContext(self): ...

class ClientContextFactory:
    isClient: int = ...
    method: Any = ...
    def getContext(self): ...

class Client(tcp.Client):
    ctxFactory: Any = ...
    def __init__(self, host: Any, port: Any, bindAddress: Any, ctxFactory: Any, connector: Any, reactor: Optional[Any] = ...) -> None: ...

class Server(tcp.Server):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def getPeerCertificate(self) -> None: ...

class Port(tcp.Port):
    transport: Any = ...
    ctxFactory: Any = ...
    def __init__(self, port: Any, factory: Any, ctxFactory: Any, backlog: int = ..., interface: str = ..., reactor: Optional[Any] = ...) -> None: ...

class Connector(tcp.Connector):
    contextFactory: Any = ...
    def __init__(self, host: Any, port: Any, factory: Any, contextFactory: Any, timeout: Any, bindAddress: Any, reactor: Optional[Any] = ...) -> None: ...
