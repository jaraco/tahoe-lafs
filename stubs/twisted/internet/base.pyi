from twisted.internet import abstract as abstract, defer as defer, error as error, fdesc as fdesc, main as main, threads as threads
from twisted.internet.defer import Deferred as Deferred, DeferredList as DeferredList
from twisted.internet.interfaces import IConnector as IConnector, IDelayedCall as IDelayedCall, IReactorCore as IReactorCore, IReactorPluggableNameResolver as IReactorPluggableNameResolver, IReactorPluggableResolver as IReactorPluggableResolver, IReactorThreads as IReactorThreads, IReactorTime as IReactorTime, IResolverSimple as IResolverSimple
from twisted.python import failure as failure, log as log, reflect as reflect, threadable as threadable
from twisted.python.compat import iteritems as iteritems, unicode as unicode
from twisted.python.runtime import platform as platform
from typing import Any

class DelayedCall:
    debug: bool = ...
    resetter: Any = ...
    canceller: Any = ...
    seconds: Any = ...
    cancelled: int = ...
    delayed_time: int = ...
    creator: Any = ...
    def __init__(self, time: Any, func: Any, args: Any, kw: Any, cancel: Any, reset: Any, seconds: Any = ...) -> None: ...
    def getTime(self): ...
    def cancel(self) -> None: ...
    time: Any = ...
    def reset(self, secondsFromNow: Any) -> None: ...
    def delay(self, secondsLater: Any) -> None: ...
    def activate_delay(self) -> None: ...
    def active(self): ...
    def __le__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...

class ThreadedResolver:
    reactor: Any = ...
    def __init__(self, reactor: Any) -> None: ...
    def getHostByName(self, name: Any, timeout: Any = ...): ...

class BlockingResolver:
    def getHostByName(self, name: Any, timeout: Any = ...): ...

class _ThreePhaseEvent:
    before: Any = ...
    during: Any = ...
    after: Any = ...
    state: str = ...
    def __init__(self) -> None: ...
    def addTrigger(self, phase: Any, callable: Any, *args: Any, **kwargs: Any): ...
    def removeTrigger(self, handle: Any): ...
    def removeTrigger_BASE(self, handle: Any) -> None: ...
    def removeTrigger_BEFORE(self, handle: Any): ...
    finishedBefore: Any = ...
    def fireEvent(self) -> None: ...

class PluggableResolverMixin:
    resolver: Any = ...
    def installResolver(self, resolver: Any): ...
    def installNameResolver(self, resolver: Any): ...
    @property
    def nameResolver(self): ...

class ReactorBase(PluggableResolverMixin):
    installed: bool = ...
    usingThreads: bool = ...
    __name__: str = ...
    threadCallQueue: Any = ...
    running: bool = ...
    waker: Any = ...
    def __init__(self) -> None: ...
    def installWaker(self) -> None: ...
    def wakeUp(self) -> None: ...
    def doIteration(self, delay: Any) -> None: ...
    def addReader(self, reader: Any) -> None: ...
    def addWriter(self, writer: Any) -> None: ...
    def removeReader(self, reader: Any) -> None: ...
    def removeWriter(self, writer: Any) -> None: ...
    def removeAll(self) -> None: ...
    def getReaders(self) -> None: ...
    def getWriters(self) -> None: ...
    def resolve(self, name: Any, timeout: Any = ...): ...
    def stop(self) -> None: ...
    def crash(self) -> None: ...
    def sigInt(self, *args: Any) -> None: ...
    def sigBreak(self, *args: Any) -> None: ...
    def sigTerm(self, *args: Any) -> None: ...
    def disconnectAll(self) -> None: ...
    def iterate(self, delay: int = ...) -> None: ...
    def fireSystemEvent(self, eventType: Any) -> None: ...
    def addSystemEventTrigger(self, _phase: Any, _eventType: Any, _f: Any, *args: Any, **kw: Any): ...
    def removeSystemEventTrigger(self, triggerID: Any) -> None: ...
    def callWhenRunning(self, _callable: Any, *args: Any, **kw: Any): ...
    def startRunning(self) -> None: ...
    seconds: Any = ...
    def callLater(self, _seconds: Any, _f: Any, *args: Any, **kw: Any): ...
    def getDelayedCalls(self): ...
    def timeout(self): ...
    def runUntilCurrent(self) -> None: ...
    threadpool: Any = ...
    threadpoolShutdownID: Any = ...
    def callFromThread(self, f: Any, *args: Any, **kw: Any) -> None: ...
    def getThreadPool(self): ...
    def callInThread(self, _callable: Any, *args: Any, **kwargs: Any) -> None: ...
    def suggestThreadPoolSize(self, size: Any) -> None: ...
    def callFromThread(self, f: Any, *args: Any, **kw: Any) -> None: ...

class BaseConnector:
    timeoutID: Any = ...
    factoryStarted: int = ...
    state: str = ...
    reactor: Any = ...
    factory: Any = ...
    timeout: Any = ...
    def __init__(self, factory: Any, timeout: Any, reactor: Any) -> None: ...
    def disconnect(self) -> None: ...
    transport: Any = ...
    def connect(self) -> None: ...
    def stopConnecting(self) -> None: ...
    def cancelTimeout(self) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def connectionFailed(self, reason: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def getDestination(self) -> None: ...

class BasePort(abstract.FileDescriptor):
    addressFamily: Any = ...
    socketType: Any = ...
    def createInternetSocket(self): ...
    def doWrite(self) -> None: ...

class _SignalReactorMixin:
    def startRunning(self, installSignalHandlers: bool = ...) -> None: ...
    def run(self, installSignalHandlers: bool = ...) -> None: ...
    def mainLoop(self) -> None: ...
