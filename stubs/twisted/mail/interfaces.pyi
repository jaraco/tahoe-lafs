from typing import Any, Optional
from zope.interface import Interface

class IChallengeResponse(Interface):
    def getChallenge() -> None: ...
    def setResponse(response: Any) -> None: ...
    def moreChallenges() -> None: ...

class IClientAuthentication(Interface):
    def getName() -> None: ...
    def challengeResponse(secret: Any, challenge: Any) -> None: ...

class IServerFactoryPOP3(Interface):
    def cap_IMPLEMENTATION() -> None: ...
    def cap_EXPIRE() -> None: ...
    def perUserExpiration() -> None: ...
    def cap_LOGIN_DELAY() -> None: ...
    def perUserLoginDelay() -> None: ...

class IMailboxPOP3(Interface):
    def listMessages(index: Optional[Any] = ...) -> None: ...
    def getMessage(index: Any) -> None: ...
    def getUidl(index: Any) -> None: ...
    def deleteMessage(index: Any) -> None: ...
    def undeleteMessages() -> None: ...
    def sync() -> None: ...

class IDomain(Interface):
    def exists(user: Any) -> None: ...
    def addUser(user: Any, password: Any) -> None: ...
    def getCredentialsCheckers() -> None: ...

class IAlias(Interface):
    def createMessageReceiver() -> None: ...

class IAliasableDomain(IDomain):
    def setAliasGroup(aliases: Any) -> None: ...
    def exists(user: Any, memo: Optional[Any] = ...) -> None: ...

class IMessageDelivery(Interface):
    def receivedHeader(helo: Any, origin: Any, recipients: Any) -> None: ...
    def validateTo(user: Any) -> None: ...
    def validateFrom(helo: Any, origin: Any) -> None: ...

class IMessageDeliveryFactory(Interface):
    def getMessageDelivery() -> None: ...

class IMessageSMTP(Interface):
    def lineReceived(line: Any) -> None: ...
    def eomReceived() -> None: ...
    def connectionLost() -> None: ...

class IMessageIMAPPart(Interface):
    def getHeaders(negate: Any, *names: Any) -> None: ...
    def getBodyFile() -> None: ...
    def getSize() -> None: ...
    def isMultipart() -> None: ...
    def getSubPart(part: Any) -> None: ...

class IMessageIMAP(IMessageIMAPPart):
    def getUID() -> None: ...
    def getFlags() -> None: ...
    def getInternalDate() -> None: ...

class IMessageIMAPFile(Interface):
    def open() -> None: ...

class ISearchableIMAPMailbox(Interface):
    def search(query: Any, uid: Any) -> None: ...

class IMailboxIMAPListener(Interface):
    def modeChanged(writeable: Any) -> None: ...
    def flagsChanged(newFlags: Any) -> None: ...
    def newMessages(exists: Any, recent: Any) -> None: ...

class IMessageIMAPCopier(Interface):
    def copy(messageObject: Any) -> None: ...

class IMailboxIMAPInfo(Interface):
    def getFlags() -> None: ...
    def getHierarchicalDelimiter() -> None: ...

class IMailboxIMAP(IMailboxIMAPInfo):
    def getUIDValidity() -> None: ...
    def getUIDNext() -> None: ...
    def getUID(message: Any) -> None: ...
    def getMessageCount() -> None: ...
    def getRecentCount() -> None: ...
    def getUnseenCount() -> None: ...
    def isWriteable() -> None: ...
    def destroy() -> None: ...
    def requestStatus(names: Any) -> None: ...
    def addListener(listener: Any) -> None: ...
    def removeListener(listener: Any) -> None: ...
    def addMessage(message: Any, flags: Any, date: Any) -> None: ...
    def expunge() -> None: ...
    def fetch(messages: Any, uid: Any) -> None: ...
    def store(messages: Any, flags: Any, mode: Any, uid: Any) -> None: ...

class ICloseableMailboxIMAP(Interface):
    def close() -> None: ...

class IAccountIMAP(Interface):
    def addMailbox(name: Any, mbox: Optional[Any] = ...) -> None: ...
    def create(pathspec: Any) -> None: ...
    def select(name: Any, rw: bool = ...) -> None: ...
    def delete(name: Any) -> None: ...
    def rename(oldname: Any, newname: Any) -> None: ...
    def isSubscribed(name: Any) -> None: ...
    def subscribe(name: Any) -> None: ...
    def unsubscribe(name: Any) -> None: ...
    def listMailboxes(ref: Any, wildcard: Any) -> None: ...

class INamespacePresenter(Interface):
    def getPersonalNamespaces() -> None: ...
    def getSharedNamespaces() -> None: ...
    def getUserNamespaces() -> None: ...
