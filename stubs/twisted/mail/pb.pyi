from twisted.spread import pb as pb
from typing import Any

class Maildir(pb.Referenceable):
    virtualDirectory: Any = ...
    rootDirectory: Any = ...
    directory: Any = ...
    def __init__(self, directory: Any, rootDirectory: Any) -> None: ...
    def getFolderMessage(self, folder: Any, name: Any): ...
    def deleteFolderMessage(self, folder: Any, name: Any) -> None: ...
    def deleteNewMessage(self, name: Any): ...
    remote_deleteNewMessage: Any = ...
    def deleteCurMessage(self, name: Any): ...
    remote_deleteCurMessage: Any = ...
    def getNewMessages(self): ...
    remote_getNewMessages: Any = ...
    def getCurMessages(self): ...
    remote_getCurMessages: Any = ...
    def getNewMessage(self, name: Any): ...
    remote_getNewMessage: Any = ...
    def getCurMessage(self, name: Any): ...
    remote_getCurMessage: Any = ...
    def getSubFolder(self, name: Any): ...
    remote_getSubFolder: Any = ...

class MaildirCollection(pb.Referenceable):
    root: Any = ...
    def __init__(self, root: Any) -> None: ...
    def getSubFolders(self): ...
    remote_getSubFolders: Any = ...
    def getSubFolder(self, name: Any): ...
    remote_getSubFolder: Any = ...

class MaildirBroker(pb.Broker):
    def proto_getCollection(self, requestID: Any, name: Any, domain: Any, password: Any) -> None: ...
    def getCollection(self, name: Any, domain: Any, password: Any): ...

class MaildirClient(pb.Broker):
    def getCollection(self, name: Any, domain: Any, password: Any, callback: Any, errback: Any) -> None: ...
