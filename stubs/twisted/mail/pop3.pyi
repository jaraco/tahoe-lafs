from twisted.mail._except import InsecureAuthenticationDisallowed as InsecureAuthenticationDisallowed, LineTooLong as LineTooLong, POP3ClientError as POP3ClientError, POP3Error as POP3Error, ServerErrorResponse as ServerErrorResponse, TLSError as TLSError, TLSNotSupportedError as TLSNotSupportedError
from twisted.mail.interfaces import IMailboxPOP3 as IMailbox, IServerFactoryPOP3 as IServerFactory
from twisted.mail.pop3client import POP3Client as AdvancedPOP3Client
from twisted.protocols import basic, policies
from typing import Any, Optional

class APOPCredentials:
    magic: Any = ...
    username: Any = ...
    digest: Any = ...
    def __init__(self, magic: Any, username: Any, digest: Any) -> None: ...
    def checkPassword(self, password: Any): ...

class _HeadersPlusNLines:
    linecount: int = ...
    headers: int = ...
    done: int = ...
    buf: bytes = ...
    def __init__(self, file: Any, extraLines: Any) -> None: ...
    def read(self, bytes: Any): ...

class _IteratorBuffer:
    bufSize: int = ...
    lines: Any = ...
    write: Any = ...
    iterator: Any = ...
    memoryBufferSize: Any = ...
    def __init__(self, write: Any, iterable: Any, memoryBufferSize: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> None: ...
    next: Any = ...

class POP3(basic.LineOnlyReceiver, policies.TimeoutMixin):
    magic: Optional[bytes] = ...
    AUTH_CMDS: Any = ...
    portal: Any = ...
    factory: Any = ...
    mbox: Any = ...
    timeOut: int = ...
    state: str = ...
    blocked: Any = ...
    schedule: Any = ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def generateMagic(self): ...
    def successResponse(self, message: str = ...) -> None: ...
    def failResponse(self, message: bytes = ...) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def state_COMMAND(self, line: Any): ...
    def processCommand(self, command: Any, *args: Any): ...
    def listCapabilities(self): ...
    def do_CAPA(self) -> None: ...
    def do_AUTH(self, args: Optional[Any] = ...) -> None: ...
    def state_AUTH(self, line: Any) -> None: ...
    def do_APOP(self, user: Any, digest: Any) -> None: ...
    def do_USER(self, user: Any) -> None: ...
    def do_PASS(self, password: Any, *words: Any) -> None: ...
    def do_STAT(self): ...
    def do_LIST(self, i: Optional[Any] = ...): ...
    def do_UIDL(self, i: Optional[Any] = ...): ...
    def do_TOP(self, i: Any, size: Any): ...
    def do_RETR(self, i: Any): ...
    def transformChunk(self, chunk: Any): ...
    def finishedFileTransfer(self, lastsent: Any) -> None: ...
    def do_DELE(self, i: Any) -> None: ...
    def do_NOOP(self) -> None: ...
    def do_RSET(self) -> None: ...
    def do_LAST(self) -> None: ...
    def do_RPOP(self, user: Any) -> None: ...
    def do_QUIT(self) -> None: ...
    def authenticateUserAPOP(self, user: Any, digest: Any): ...
    def authenticateUserPASS(self, user: Any, password: Any): ...
    def stopProducing(self) -> None: ...

class Mailbox:
    def listMessages(self, i: Optional[Any] = ...): ...
    def getMessage(self, i: Any) -> None: ...
    def getUidl(self, i: Any) -> None: ...
    def deleteMessage(self, i: Any) -> None: ...
    def undeleteMessages(self) -> None: ...
    def sync(self) -> None: ...

class POP3Client(basic.LineOnlyReceiver):
    mode: Any = ...
    command: bytes = ...
    welcomeRe: Any = ...
    def __init__(self) -> None: ...
    def sendShort(self, command: Any, params: Optional[Any] = ...) -> None: ...
    def sendLong(self, command: Any, params: Any) -> None: ...
    def handle_default(self, line: Any) -> None: ...
    welcomeCode: Any = ...
    def handle_WELCOME(self, line: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def apopAuthenticate(self, user: Any, password: Any, magic: Any) -> None: ...
    def apop(self, user: Any, digest: Any) -> None: ...
    def retr(self, i: Any) -> None: ...
    def dele(self, i: Any) -> None: ...
    def list(self, i: str = ...) -> None: ...
    def uidl(self, i: str = ...) -> None: ...
    def user(self, name: Any) -> None: ...
    def password(self, password: Any) -> None: ...
    pass_: Any = ...
    def quit(self) -> None: ...
