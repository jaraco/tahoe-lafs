from twisted.application import internet as internet
from twisted.internet import protocol as protocol
from twisted.internet.defer import Deferred as Deferred, DeferredList as DeferredList
from twisted.internet.error import DNSLookupError as DNSLookupError
from twisted.internet.protocol import connectionDone as connectionDone
from twisted.mail import bounce as bounce, relay as relay, smtp as smtp
from twisted.python import log as log
from twisted.python.failure import Failure as Failure
from typing import Any, Optional, Type

class ManagedRelayerMixin:
    manager: Any = ...
    def __init__(self, manager: Any) -> None: ...
    @property
    def factory(self): ...
    @factory.setter
    def factory(self, value: Any) -> None: ...
    def sentMail(self, code: Any, resp: Any, numOk: Any, addresses: Any, log: Any) -> None: ...
    def connectionLost(self, reason: Failure=...) -> Any: ...

class SMTPManagedRelayer(ManagedRelayerMixin, relay.SMTPRelayer):
    def __init__(self, messages: Any, manager: Any, *args: Any, **kw: Any) -> None: ...

class ESMTPManagedRelayer(ManagedRelayerMixin, relay.ESMTPRelayer):
    def __init__(self, messages: Any, manager: Any, *args: Any, **kw: Any) -> None: ...

class SMTPManagedRelayerFactory(protocol.ClientFactory):
    protocol: Type[protocol.Protocol] = ...
    messages: Any = ...
    manager: Any = ...
    pArgs: Any = ...
    pKwArgs: Any = ...
    def __init__(self, messages: Any, manager: Any, *args: Any, **kw: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class ESMTPManagedRelayerFactory(SMTPManagedRelayerFactory):
    protocol: Any = ...
    secret: Any = ...
    contextFactory: Any = ...
    def __init__(self, messages: Any, manager: Any, secret: Any, contextFactory: Any, *args: Any, **kw: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class Queue:
    noisy: bool = ...
    directory: Any = ...
    def __init__(self, directory: Any) -> None: ...
    def readDirectory(self) -> None: ...
    def getWaiting(self): ...
    def hasWaiting(self): ...
    def getRelayed(self): ...
    def setRelaying(self, message: Any) -> None: ...
    def setWaiting(self, message: Any) -> None: ...
    def addMessage(self, message: Any) -> None: ...
    def done(self, message: Any) -> None: ...
    def getPath(self, message: Any): ...
    def getEnvelope(self, message: Any): ...
    def getEnvelopeFile(self, message: Any): ...
    n: Any = ...
    def createNewMessage(self): ...

class _AttemptManager:
    manager: Any = ...
    noisy: Any = ...
    reactor: Any = ...
    def __init__(self, manager: Any, noisy: bool = ..., reactor: Optional[Any] = ...) -> None: ...
    def getCompletionDeferred(self): ...
    def notifySuccess(self, relay: Any, message: Any) -> None: ...
    def notifyFailure(self, relay: Any, message: Any) -> None: ...
    def notifyDone(self, relay: Any) -> None: ...
    def notifyNoConnection(self, relay: Any) -> None: ...

class SmartHostSMTPRelayingManager:
    factory: Type[protocol.ClientFactory] = ...
    PORT: int = ...
    mxcalc: Any = ...
    maxConnections: Any = ...
    maxMessagesPerConnection: Any = ...
    managed: Any = ...
    queue: Any = ...
    fArgs: Any = ...
    fKwArgs: Any = ...
    def __init__(self, queue: Any, maxConnections: int = ..., maxMessagesPerConnection: int = ...) -> None: ...
    def checkState(self): ...

class SmartHostESMTPRelayingManager(SmartHostSMTPRelayingManager):
    factory: Any = ...

def RelayStateHelper(manager: Any, delay: Any): ...

class CanonicalNameLoop(Exception): ...
class CanonicalNameChainTooLong(Exception): ...

class MXCalculator:
    timeOutBadMX: Any = ...
    fallbackToDomain: bool = ...
    badMXs: Any = ...
    resolver: Any = ...
    clock: Any = ...
    def __init__(self, resolver: Optional[Any] = ..., clock: Optional[Any] = ...) -> None: ...
    def markBad(self, mx: Any) -> None: ...
    def markGood(self, mx: Any) -> None: ...
    def getMX(self, domain: Any, maximumCanonicalChainLength: int = ...): ...
