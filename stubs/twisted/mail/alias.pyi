from twisted.internet import defer as defer, protocol as protocol, reactor as reactor
from twisted.mail import smtp as smtp
from twisted.mail.interfaces import IAlias as IAlias
from twisted.python import failure as failure, log as log
from typing import Any, Optional

def handle(result: Any, line: Any, filename: Any, lineNo: Any) -> None: ...
def loadAliasFile(domains: Any, filename: Optional[Any] = ..., fp: Optional[Any] = ...): ...

class AliasBase:
    domains: Any = ...
    original: Any = ...
    def __init__(self, domains: Any, original: Any) -> None: ...
    def domain(self): ...
    def resolve(self, aliasmap: Any, memo: Optional[Any] = ...): ...

class AddressAlias(AliasBase):
    alias: Any = ...
    def __init__(self, alias: Any, *args: Any) -> None: ...
    def createMessageReceiver(self): ...
    def resolve(self, aliasmap: Any, memo: Optional[Any] = ...): ...

class FileWrapper:
    fp: Any = ...
    finalname: Any = ...
    def __init__(self, filename: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def eomReceived(self): ...
    def connectionLost(self) -> None: ...

class FileAlias(AliasBase):
    filename: Any = ...
    def __init__(self, filename: Any, *args: Any) -> None: ...
    def createMessageReceiver(self): ...

class ProcessAliasTimeout(Exception): ...

class MessageWrapper:
    done: bool = ...
    completionTimeout: int = ...
    reactor: Any = ...
    processName: Any = ...
    protocol: Any = ...
    completion: Any = ...
    def __init__(self, protocol: Any, process: Optional[Any] = ..., reactor: Optional[Any] = ...) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def eomReceived(self): ...
    def connectionLost(self) -> None: ...

class ProcessAliasProtocol(protocol.ProcessProtocol):
    onEnd: Any = ...
    def processEnded(self, reason: Any) -> None: ...

class ProcessAlias(AliasBase):
    reactor: Any = ...
    path: Any = ...
    program: Any = ...
    def __init__(self, path: Any, *args: Any) -> None: ...
    def spawnProcess(self, proto: Any, program: Any, path: Any): ...
    def createMessageReceiver(self): ...

class MultiWrapper:
    objs: Any = ...
    def __init__(self, objs: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def eomReceived(self): ...
    def connectionLost(self) -> None: ...

class AliasGroup(AliasBase):
    processAliasFactory: Any = ...
    aliases: Any = ...
    def __init__(self, items: Any, *args: Any) -> None: ...
    def __len__(self): ...
    def createMessageReceiver(self): ...
    def resolve(self, aliasmap: Any, memo: Optional[Any] = ...): ...
