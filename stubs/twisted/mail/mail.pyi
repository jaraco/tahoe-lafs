from twisted.application import internet as internet, service as service
from twisted.cred.portal import Portal as Portal
from twisted.internet import defer as defer
from twisted.mail import protocols as protocols, smtp as smtp
from twisted.mail.interfaces import IAliasableDomain as IAliasableDomain, IDomain as IDomain
from twisted.python import log as log, util as util
from typing import Any, Optional

class DomainWithDefaultDict:
    domains: Any = ...
    default: Any = ...
    def __init__(self, domains: Any, default: Any) -> None: ...
    def setDefaultDomain(self, domain: Any) -> None: ...
    def has_key(self, name: Any): ...
    @classmethod
    def fromkeys(klass: Any, keys: Any, value: Optional[Any] = ...): ...
    def __contains__(self, name: Any): ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, name: Any, value: Any) -> None: ...
    def __delitem__(self, name: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def copy(self): ...
    def iteritems(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def popitem(self): ...
    def update(self, other: Any): ...
    def clear(self): ...
    def setdefault(self, key: Any, default: Any): ...

class BounceDomain:
    def exists(self, user: Any) -> None: ...
    def willRelay(self, user: Any, protocol: Any): ...
    def addUser(self, user: Any, password: Any) -> None: ...
    def getCredentialsCheckers(self): ...

class FileMessage:
    fp: Any = ...
    name: Any = ...
    finalName: Any = ...
    def __init__(self, fp: Any, name: Any, finalName: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def eomReceived(self): ...
    def connectionLost(self) -> None: ...

class MailService(service.MultiService):
    queue: Any = ...
    domains: Any = ...
    portals: Any = ...
    aliases: Any = ...
    smtpPortal: Any = ...
    monitor: Any = ...
    def __init__(self) -> None: ...
    def getPOP3Factory(self): ...
    def getSMTPFactory(self): ...
    def getESMTPFactory(self): ...
    def addDomain(self, name: Any, domain: Any) -> None: ...
    def setQueue(self, queue: Any) -> None: ...
    def requestAvatar(self, avatarId: Any, mind: Any, *interfaces: Any): ...
    def lookupPortal(self, name: Any): ...
    def defaultPortal(self): ...

class FileMonitoringService(internet.TimerService):
    files: Any = ...
    intervals: Any = ...
    def __init__(self) -> None: ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...
    def monitorFile(self, name: Any, callback: Any, interval: int = ...) -> None: ...
    def unmonitorFile(self, name: Any) -> None: ...
