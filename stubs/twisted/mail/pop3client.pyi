from twisted.internet import defer as defer, error as error, interfaces as interfaces
from twisted.mail._except import InsecureAuthenticationDisallowed as InsecureAuthenticationDisallowed, LineTooLong as LineTooLong, ServerErrorResponse as ServerErrorResponse, TLSError as TLSError, TLSNotSupportedError as TLSNotSupportedError
from twisted.protocols import basic as basic, policies as policies
from twisted.python import log as log
from typing import Any, Optional

OK: bytes
ERR: bytes

class _ListSetter:
    L: Any = ...
    def __init__(self, L: Any) -> None: ...
    def setitem(self, itemAndValue: Any) -> None: ...

class POP3Client(basic.LineOnlyReceiver, policies.TimeoutMixin):
    startedTLS: bool = ...
    allowInsecureLogin: bool = ...
    timeout: int = ...
    serverChallenge: Any = ...
    state: str = ...
    def sendShort(self, cmd: Any, args: Any): ...
    def sendLong(self, cmd: Any, args: Any, consumer: Any, xform: Any): ...
    def connectionMade(self) -> None: ...
    def timeoutConnection(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def lineLengthExceeded(self, buffer: Any) -> None: ...
    def state_WELCOME(self, line: Any): ...
    def state_WAITING(self, line: Any) -> None: ...
    def state_SHORT(self, line: Any): ...
    def state_LONG_INITIAL(self, line: Any): ...
    def state_LONG(self, line: Any): ...
    def serverGreeting(self, greeting: Any) -> None: ...
    def startTLS(self, contextFactory: Optional[Any] = ...): ...
    def login(self, username: Any, password: Any): ...
    def apop(self, username: Any, digest: Any): ...
    def user(self, username: Any): ...
    def password(self, password: Any): ...
    def delete(self, index: Any): ...
    def capabilities(self, useCache: bool = ...): ...
    def noop(self): ...
    def reset(self): ...
    def retrieve(self, index: Any, consumer: Optional[Any] = ..., lines: Optional[Any] = ...): ...
    def stat(self): ...
    def listSize(self, consumer: Optional[Any] = ...): ...
    def listUID(self, consumer: Optional[Any] = ...): ...
    def quit(self): ...
