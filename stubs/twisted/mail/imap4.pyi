import codecs
from twisted.mail._cred import CramMD5ClientAuthenticator as CramMD5ClientAuthenticator, LOGINAuthenticator as LOGINAuthenticator, LOGINCredentials as LOGINCredentials, PLAINAuthenticator as PLAINAuthenticator, PLAINCredentials as PLAINCredentials
from twisted.mail._except import IMAP4Exception as IMAP4Exception, IllegalClientResponse as IllegalClientResponse, IllegalIdentifierError as IllegalIdentifierError, IllegalMailboxEncoding as IllegalMailboxEncoding, IllegalOperation as IllegalOperation, IllegalQueryError as IllegalQueryError, IllegalServerResponse as IllegalServerResponse, MailboxCollision as MailboxCollision, MailboxException as MailboxException, MismatchedNesting as MismatchedNesting, MismatchedQuoting as MismatchedQuoting, NegativeResponse as NegativeResponse, NoSuchMailbox as NoSuchMailbox, NoSupportedAuthentication as NoSupportedAuthentication, ReadOnlyMailbox as ReadOnlyMailbox, UnhandledResponse as UnhandledResponse
from twisted.mail.interfaces import IAccountIMAP as IAccount, IClientAuthentication as IClientAuthentication, ICloseableMailboxIMAP as ICloseableMailbox, IMailboxIMAP as IMailbox, IMailboxIMAPInfo as IMailboxInfo, IMailboxIMAPListener as IMailboxListener, IMessageIMAP as IMessage, IMessageIMAPCopier as IMessageCopier, IMessageIMAPFile as IMessageFile, IMessageIMAPPart as IMessagePart, INamespacePresenter as INamespacePresenter, ISearchableIMAPMailbox as ISearchableMailbox
from twisted.protocols import basic, policies
from typing import Any, Optional

class MessageSet:
    ranges: Any = ...
    getnext: Any = ...
    def __init__(self, start: Any = ..., end: Any = ...): ...
    @property
    def last(self): ...
    @last.setter
    def last(self, value: Any) -> None: ...
    def add(self, start: Any, end: Any = ...) -> None: ...
    def __add__(self, other: Any): ...
    def extend(self, other: Any): ...
    def clean(self) -> None: ...
    def __contains__(self, value: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __eq__(self, other: object) -> bool: ...

class LiteralString:
    size: Any = ...
    data: Any = ...
    defer: Any = ...
    def __init__(self, size: Any, defered: Any) -> None: ...
    def write(self, data: Any): ...
    def callback(self, line: Any) -> None: ...

class LiteralFile:
    size: Any = ...
    defer: Any = ...
    data: Any = ...
    def __init__(self, size: Any, defered: Any) -> None: ...
    def write(self, data: Any): ...
    def callback(self, line: Any) -> None: ...

class WriteBuffer:
    bufferSize: Any = ...
    transport: Any = ...
    def __init__(self, transport: Any, size: int = ...) -> None: ...
    def write(self, s: Any) -> None: ...
    def flush(self) -> None: ...

class Command:
    defer: Any = ...
    command: Any = ...
    args: Any = ...
    wantResponse: Any = ...
    continuation: Any = ...
    lines: Any = ...
    def __init__(self, command: Any, args: Optional[Any] = ..., wantResponse: Any = ..., continuation: Optional[Any] = ..., *contArgs: Any, **contKw: Any): ...
    def format(self, tag: Any): ...
    def finish(self, lastLine: Any, unusedCallback: Any) -> None: ...

class IMAP4Server(basic.LineReceiver, policies.TimeoutMixin):
    IDENT: bytes = ...
    timeOut: int = ...
    POSTAUTH_TIMEOUT: Any = ...
    startedTLS: bool = ...
    canStartTLS: bool = ...
    tags: Any = ...
    portal: Any = ...
    account: Any = ...
    mbox: Any = ...
    challengers: Any = ...
    state: str = ...
    parseState: str = ...
    ctx: Any = ...
    def __init__(self, chal: Optional[Any] = ..., contextFactory: Optional[Any] = ..., scheduler: Optional[Any] = ...) -> None: ...
    def capabilities(self): ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def timeoutConnection(self) -> None: ...
    def rawDataReceived(self, data: Any) -> None: ...
    blocked: Any = ...
    def lineReceived(self, line: Any) -> None: ...
    def parse_command(self, line: Any): ...
    def parse_pending(self, line: Any) -> None: ...
    def dispatchCommand(self, tag: Any, cmd: Any, rest: Any, uid: Optional[Any] = ...) -> None: ...
    def lookupCommand(self, cmd: Any): ...
    def arg_finalastring(self, line: Any): ...
    def arg_astring(self, line: Any, final: bool = ...): ...
    atomre: Any = ...
    def arg_atom(self, line: Any): ...
    def arg_plist(self, line: Any): ...
    def arg_literal(self, line: Any): ...
    def arg_searchkeys(self, line: Any): ...
    def arg_seqset(self, line: Any): ...
    def arg_fetchatt(self, line: Any): ...
    def arg_flaglist(self, line: Any): ...
    def arg_line(self, line: Any): ...
    def opt_plist(self, line: Any): ...
    def opt_datetime(self, line: Any): ...
    def opt_charset(self, line: Any): ...
    def sendServerGreeting(self) -> None: ...
    def sendBadResponse(self, tag: Optional[Any] = ..., message: bytes = ...) -> None: ...
    def sendPositiveResponse(self, tag: Optional[Any] = ..., message: bytes = ...) -> None: ...
    def sendNegativeResponse(self, tag: Optional[Any] = ..., message: bytes = ...) -> None: ...
    def sendUntaggedResponse(self, message: Any, isAsync: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def sendContinuationRequest(self, msg: bytes = ...) -> None: ...
    def listCapabilities(self): ...
    def do_CAPABILITY(self, tag: Any) -> None: ...
    unauth_CAPABILITY: Any = ...
    auth_CAPABILITY: Any = ...
    select_CAPABILITY: Any = ...
    logout_CAPABILITY: Any = ...
    def do_LOGOUT(self, tag: Any) -> None: ...
    unauth_LOGOUT: Any = ...
    auth_LOGOUT: Any = ...
    select_LOGOUT: Any = ...
    logout_LOGOUT: Any = ...
    def do_NOOP(self, tag: Any) -> None: ...
    unauth_NOOP: Any = ...
    auth_NOOP: Any = ...
    select_NOOP: Any = ...
    logout_NOOP: Any = ...
    def do_AUTHENTICATE(self, tag: Any, args: Any) -> None: ...
    unauth_AUTHENTICATE: Any = ...
    def authenticate(self, chal: Any, tag: Any) -> None: ...
    def do_STARTTLS(self, tag: Any) -> None: ...
    unauth_STARTTLS: Any = ...
    def do_LOGIN(self, tag: Any, user: Any, passwd: Any) -> None: ...
    unauth_LOGIN: Any = ...
    def authenticateLogin(self, user: Any, passwd: Any): ...
    def do_NAMESPACE(self, tag: Any) -> None: ...
    auth_NAMESPACE: Any = ...
    select_NAMESPACE: Any = ...
    auth_SELECT: Any = ...
    select_SELECT: Any = ...
    auth_EXAMINE: Any = ...
    select_EXAMINE: Any = ...
    parseTag: Any = ...
    lastState: Any = ...
    def do_IDLE(self, tag: Any) -> None: ...
    def parse_idle(self, *args: Any) -> None: ...
    select_IDLE: Any = ...
    auth_IDLE: Any = ...
    def do_CREATE(self, tag: Any, name: Any) -> None: ...
    auth_CREATE: Any = ...
    select_CREATE: Any = ...
    def do_DELETE(self, tag: Any, name: Any) -> None: ...
    auth_DELETE: Any = ...
    select_DELETE: Any = ...
    def do_RENAME(self, tag: Any, oldname: Any, newname: Any) -> None: ...
    auth_RENAME: Any = ...
    select_RENAME: Any = ...
    def do_SUBSCRIBE(self, tag: Any, name: Any) -> None: ...
    auth_SUBSCRIBE: Any = ...
    select_SUBSCRIBE: Any = ...
    def do_UNSUBSCRIBE(self, tag: Any, name: Any) -> None: ...
    auth_UNSUBSCRIBE: Any = ...
    select_UNSUBSCRIBE: Any = ...
    auth_LIST: Any = ...
    select_LIST: Any = ...
    auth_LSUB: Any = ...
    select_LSUB: Any = ...
    def do_STATUS(self, tag: Any, mailbox: Any, names: Any) -> None: ...
    auth_STATUS: Any = ...
    select_STATUS: Any = ...
    def do_APPEND(self, tag: Any, mailbox: Any, flags: Any, date: Any, message: Any) -> None: ...
    auth_APPEND: Any = ...
    select_APPEND: Any = ...
    def do_CHECK(self, tag: Any) -> None: ...
    select_CHECK: Any = ...
    def checkpoint(self) -> None: ...
    def do_CLOSE(self, tag: Any): ...
    select_CLOSE: Any = ...
    def do_EXPUNGE(self, tag: Any) -> None: ...
    select_EXPUNGE: Any = ...
    def do_SEARCH(self, tag: Any, charset: Any, query: Any, uid: int = ...) -> None: ...
    select_SEARCH: Any = ...
    def search_ALL(self, query: Any, id: Any, msg: Any): ...
    def search_ANSWERED(self, query: Any, id: Any, msg: Any): ...
    def search_BCC(self, query: Any, id: Any, msg: Any): ...
    def search_BEFORE(self, query: Any, id: Any, msg: Any): ...
    def search_BODY(self, query: Any, id: Any, msg: Any): ...
    def search_CC(self, query: Any, id: Any, msg: Any): ...
    def search_DELETED(self, query: Any, id: Any, msg: Any): ...
    def search_DRAFT(self, query: Any, id: Any, msg: Any): ...
    def search_FLAGGED(self, query: Any, id: Any, msg: Any): ...
    def search_FROM(self, query: Any, id: Any, msg: Any): ...
    def search_HEADER(self, query: Any, id: Any, msg: Any): ...
    def search_KEYWORD(self, query: Any, id: Any, msg: Any): ...
    def search_LARGER(self, query: Any, id: Any, msg: Any): ...
    def search_NEW(self, query: Any, id: Any, msg: Any): ...
    def search_NOT(self, query: Any, id: Any, msg: Any, lastIDs: Any): ...
    def search_OLD(self, query: Any, id: Any, msg: Any): ...
    def search_ON(self, query: Any, id: Any, msg: Any): ...
    def search_OR(self, query: Any, id: Any, msg: Any, lastIDs: Any): ...
    def search_RECENT(self, query: Any, id: Any, msg: Any): ...
    def search_SEEN(self, query: Any, id: Any, msg: Any): ...
    def search_SENTBEFORE(self, query: Any, id: Any, msg: Any): ...
    def search_SENTON(self, query: Any, id: Any, msg: Any): ...
    def search_SENTSINCE(self, query: Any, id: Any, msg: Any): ...
    def search_SINCE(self, query: Any, id: Any, msg: Any): ...
    def search_SMALLER(self, query: Any, id: Any, msg: Any): ...
    def search_SUBJECT(self, query: Any, id: Any, msg: Any): ...
    def search_TEXT(self, query: Any, id: Any, msg: Any): ...
    def search_TO(self, query: Any, id: Any, msg: Any): ...
    def search_UID(self, query: Any, id: Any, msg: Any, lastIDs: Any): ...
    def search_UNANSWERED(self, query: Any, id: Any, msg: Any): ...
    def search_UNDELETED(self, query: Any, id: Any, msg: Any): ...
    def search_UNDRAFT(self, query: Any, id: Any, msg: Any): ...
    def search_UNFLAGGED(self, query: Any, id: Any, msg: Any): ...
    def search_UNKEYWORD(self, query: Any, id: Any, msg: Any): ...
    def search_UNSEEN(self, query: Any, id: Any, msg: Any): ...
    def do_FETCH(self, tag: Any, messages: Any, query: Any, uid: int = ...) -> None: ...
    select_FETCH: Any = ...
    def spew_envelope(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_flags(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_internaldate(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_rfc822header(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_rfc822text(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...): ...
    def spew_rfc822size(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_rfc822(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...): ...
    def spew_uid(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_bodystructure(self, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...) -> None: ...
    def spew_body(self, part: Any, id: Any, msg: Any, _w: Optional[Any] = ..., _f: Optional[Any] = ...): ...
    def spewMessage(self, id: Any, msg: Any, query: Any, uid: Any): ...
    def do_STORE(self, tag: Any, messages: Any, mode: Any, flags: Any, uid: int = ...) -> None: ...
    select_STORE: Any = ...
    def do_COPY(self, tag: Any, messages: Any, mailbox: Any, uid: int = ...) -> None: ...
    select_COPY: Any = ...
    def do_UID(self, tag: Any, command: Any, line: Any) -> None: ...
    select_UID: Any = ...
    def modeChanged(self, writeable: Any) -> None: ...
    def flagsChanged(self, newFlags: Any) -> None: ...
    def newMessages(self, exists: Any, recent: Any) -> None: ...

class IMAP4Client(basic.LineReceiver, policies.TimeoutMixin):
    tags: Any = ...
    waiting: Any = ...
    queued: Any = ...
    tagID: int = ...
    state: Any = ...
    startedTLS: bool = ...
    timeout: int = ...
    authenticators: Any = ...
    STATUS_CODES: Any = ...
    STATUS_TRANSFORMATIONS: Any = ...
    context: Any = ...
    def __init__(self, contextFactory: Optional[Any] = ...) -> None: ...
    def registerAuthenticator(self, auth: Any) -> None: ...
    def rawDataReceived(self, data: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def timeoutConnection(self) -> None: ...
    def messageFile(self, octets: Any): ...
    def makeTag(self): ...
    def dispatchCommand(self, tag: Any, rest: Any) -> None: ...
    def response_UNAUTH(self, tag: Any, rest: Any) -> None: ...
    def response_AUTH(self, tag: Any, rest: Any) -> None: ...
    def sendCommand(self, cmd: Any): ...
    def getCapabilities(self, useCache: int = ...): ...
    def logout(self): ...
    def noop(self): ...
    def startTLS(self, contextFactory: Optional[Any] = ...): ...
    def authenticate(self, secret: Any): ...
    def login(self, username: Any, password: Any): ...
    def serverGreeting(self, caps: Any) -> None: ...
    def namespace(self): ...
    def select(self, mailbox: Any): ...
    def examine(self, mailbox: Any): ...
    def create(self, name: Any): ...
    def delete(self, name: Any): ...
    def rename(self, oldname: Any, newname: Any): ...
    def subscribe(self, name: Any): ...
    def unsubscribe(self, name: Any): ...
    def list(self, reference: Any, wildcard: Any): ...
    def lsub(self, reference: Any, wildcard: Any): ...
    def status(self, mailbox: Any, *names: Any): ...
    def append(self, mailbox: Any, message: Any, flags: Any = ..., date: Optional[Any] = ...): ...
    def check(self): ...
    def close(self): ...
    def expunge(self): ...
    def search(self, *queries: Any, uid: bool = ...): ...
    def fetchUID(self, messages: Any, uid: int = ...): ...
    def fetchFlags(self, messages: Any, uid: int = ...): ...
    def fetchInternalDate(self, messages: Any, uid: int = ...): ...
    def fetchEnvelope(self, messages: Any, uid: int = ...): ...
    def fetchBodyStructure(self, messages: Any, uid: int = ...): ...
    def fetchSimplifiedBody(self, messages: Any, uid: int = ...): ...
    def fetchMessage(self, messages: Any, uid: int = ...): ...
    def fetchHeaders(self, messages: Any, uid: int = ...): ...
    def fetchBody(self, messages: Any, uid: int = ...): ...
    def fetchSize(self, messages: Any, uid: int = ...): ...
    def fetchFull(self, messages: Any, uid: int = ...): ...
    def fetchAll(self, messages: Any, uid: int = ...): ...
    def fetchFast(self, messages: Any, uid: int = ...): ...
    def fetchSpecific(self, messages: Any, uid: int = ..., headerType: Optional[Any] = ..., headerNumber: Optional[Any] = ..., headerArgs: Optional[Any] = ..., peek: Optional[Any] = ..., offset: Optional[Any] = ..., length: Optional[Any] = ...): ...
    def setFlags(self, messages: Any, flags: Any, silent: int = ..., uid: int = ...): ...
    def addFlags(self, messages: Any, flags: Any, silent: int = ..., uid: int = ...): ...
    def removeFlags(self, messages: Any, flags: Any, silent: int = ..., uid: int = ...): ...
    def copy(self, messages: Any, mailbox: Any, uid: Any): ...
    def modeChanged(self, writeable: Any) -> None: ...
    def flagsChanged(self, newFlags: Any) -> None: ...
    def newMessages(self, exists: Any, recent: Any) -> None: ...

def Query(sorted: int = ..., **kwarg: Any): ...
def Or(*args: Any): ...
def Not(query: Any): ...

class DontQuoteMe:
    value: Any = ...
    def __init__(self, value: Any) -> None: ...

class MemoryAccountWithoutNamespaces:
    mailboxes: Any = ...
    subscriptions: Any = ...
    top_id: int = ...
    name: Any = ...
    def __init__(self, name: Any) -> None: ...
    def allocateID(self): ...
    def addMailbox(self, name: Any, mbox: Optional[Any] = ...): ...
    def create(self, pathspec: Any): ...
    def select(self, name: Any, readwrite: int = ...): ...
    def delete(self, name: Any) -> None: ...
    def rename(self, oldname: Any, newname: Any) -> None: ...
    def isSubscribed(self, name: Any): ...
    def subscribe(self, name: Any) -> None: ...
    def unsubscribe(self, name: Any) -> None: ...
    def listMailboxes(self, ref: Any, wildcard: Any): ...

class MemoryAccount(MemoryAccountWithoutNamespaces):
    def getPersonalNamespaces(self): ...
    def getSharedNamespaces(self) -> None: ...
    def getOtherNamespaces(self) -> None: ...
    def getUserNamespaces(self) -> None: ...

def statusRequestHelper(mbox: Any, names: Any): ...

class _MessageStructure:
    message: Any = ...
    attrs: Any = ...
    def __init__(self, message: Any, attrs: Any) -> None: ...

class _SinglepartMessageStructure(_MessageStructure):
    main: Any = ...
    subtype: Any = ...
    attrs: Any = ...
    def __init__(self, message: Any, main: Any, subtype: Any, attrs: Any) -> None: ...
    def encode(self, extended: Any): ...

class _TextMessageStructure(_SinglepartMessageStructure):
    def encode(self, extended: Any): ...

class _RFC822MessageStructure(_SinglepartMessageStructure):
    def encode(self, extended: Any): ...

class _MultipartMessageStructure(_MessageStructure):
    subtype: Any = ...
    def __init__(self, message: Any, subtype: Any, attrs: Any) -> None: ...
    def encode(self, extended: Any): ...

class MessageProducer:
    CHUNK_SIZE: Any = ...
    msg: Any = ...
    buffer: Any = ...
    scheduler: Any = ...
    write: Any = ...
    def __init__(self, msg: Any, buffer: Optional[Any] = ..., scheduler: Optional[Any] = ...) -> None: ...
    consumer: Any = ...
    def beginProducing(self, consumer: Any): ...

class _FetchParser:
    class Envelope:
        type: str = ...
    class Flags:
        type: str = ...
    class InternalDate:
        type: str = ...
    class RFC822Header:
        type: str = ...
    class RFC822Text:
        type: str = ...
    class RFC822Size:
        type: str = ...
    class RFC822:
        type: str = ...
    class UID:
        type: str = ...
    class Body:
        type: str = ...
        peek: bool = ...
        header: Any = ...
        mime: Any = ...
        text: Any = ...
        part: Any = ...
        empty: bool = ...
        partialBegin: Any = ...
        partialLength: Any = ...
        def __bytes__(self) -> bytes: ...
    class BodyStructure:
        type: str = ...
    class Header:
        negate: bool = ...
        fields: Any = ...
        part: Any = ...
        def __bytes__(self) -> bytes: ...
    class Text: ...
    class MIME: ...
    parts: Any = ...
    state: Any = ...
    result: Any = ...
    remaining: bytes = ...
    def __init__(self) -> None: ...
    def parseString(self, s: Any) -> None: ...
    def state_initial(self, s: Any): ...
    def state_close_paren(self, s: Any): ...
    def state_whitespace(self, s: Any): ...
    def state_maybe_fetch_att(self, s: Any): ...
    pending_body: Any = ...
    def state_fetch_att(self, s: Any): ...
    def state_got_body(self, s: Any): ...
    def state_maybe_section(self, s: Any): ...
    def state_part_number(self, s: Any): ...
    def state_section(self, s: Any): ...
    def state_finish_section(self, s: Any): ...
    def state_header_list(self, s: Any): ...
    def state_maybe_partial(self, s: Any): ...

class FileProducer:
    CHUNK_SIZE: Any = ...
    firstWrite: bool = ...
    f: Any = ...
    def __init__(self, f: Any) -> None: ...
    consumer: Any = ...
    produce: Any = ...
    def beginProducing(self, consumer: Any): ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def stopProducing(self) -> None: ...

class StreamReader(codecs.StreamReader):
    def decode(self, s: Any, errors: str = ...): ...

class StreamWriter(codecs.StreamWriter):
    def encode(self, s: Any, errors: str = ...): ...
