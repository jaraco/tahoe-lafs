from twisted.copyright import longversion as longversion
from twisted.cred.credentials import CramMD5Credentials as CramMD5Credentials, UsernamePassword as UsernamePassword
from twisted.cred.error import UnauthorizedLogin as UnauthorizedLogin
from twisted.internet import defer as defer, protocol as protocol
from twisted.mail import pop3 as pop3, relay as relay, smtp as smtp
from twisted.python import log as log
from typing import Any, Optional

class DomainDeliveryBase:
    service: Any = ...
    protocolName: Any = ...
    user: Any = ...
    host: Any = ...
    def __init__(self, service: Any, user: Any, host: Any = ...) -> None: ...
    def receivedHeader(self, helo: Any, origin: Any, recipients: Any): ...
    def validateTo(self, user: Any): ...
    def validateFrom(self, helo: Any, origin: Any): ...

class SMTPDomainDelivery(DomainDeliveryBase):
    protocolName: bytes = ...

class ESMTPDomainDelivery(DomainDeliveryBase):
    protocolName: bytes = ...

class SMTPFactory(smtp.SMTPFactory):
    protocol: Any = ...
    portal: Any = ...
    service: Any = ...
    def __init__(self, service: Any, portal: Optional[Any] = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...

class ESMTPFactory(SMTPFactory):
    protocol: Any = ...
    context: Any = ...
    challengers: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class VirtualPOP3(pop3.POP3):
    service: Any = ...
    domainSpecifier: bytes = ...
    def authenticateUserAPOP(self, user: Any, digest: Any): ...
    def authenticateUserPASS(self, user: Any, password: Any): ...
    def lookupDomain(self, user: Any): ...

class POP3Factory(protocol.ServerFactory):
    protocol: Any = ...
    service: Any = ...
    def __init__(self, service: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
