from typing import Any, Optional

class IMAP4Exception(Exception): ...
class IllegalClientResponse(IMAP4Exception): ...
class IllegalOperation(IMAP4Exception): ...
class IllegalMailboxEncoding(IMAP4Exception): ...
class MailboxException(IMAP4Exception): ...
class MailboxCollision(MailboxException): ...
class NoSuchMailbox(MailboxException): ...
class ReadOnlyMailbox(MailboxException): ...
class UnhandledResponse(IMAP4Exception): ...
class NegativeResponse(IMAP4Exception): ...

class NoSupportedAuthentication(IMAP4Exception):
    serverSupports: Any = ...
    clientSupports: Any = ...
    def __init__(self, serverSupports: Any, clientSupports: Any) -> None: ...

class IllegalServerResponse(IMAP4Exception): ...
class IllegalIdentifierError(IMAP4Exception): ...
class IllegalQueryError(IMAP4Exception): ...
class MismatchedNesting(IMAP4Exception): ...
class MismatchedQuoting(IMAP4Exception): ...
class SMTPError(Exception): ...

class SMTPClientError(SMTPError):
    code: Any = ...
    resp: Any = ...
    log: Any = ...
    addresses: Any = ...
    isFatal: Any = ...
    retry: Any = ...
    def __init__(self, code: int, resp: bytes, log: Optional[bytes]=..., addresses: Optional[object]=..., isFatal: bool=..., retry: bool=...) -> None: ...
    def __bytes__(self) -> bytes: ...

class ESMTPClientError(SMTPClientError): ...
class EHLORequiredError(ESMTPClientError): ...
class AUTHRequiredError(ESMTPClientError): ...
class TLSRequiredError(ESMTPClientError): ...
class AUTHDeclinedError(ESMTPClientError): ...
class AuthenticationError(ESMTPClientError): ...
class SMTPTLSError(ESMTPClientError): ...

class SMTPConnectError(SMTPClientError):
    def __init__(self, code: Any, resp: Any, log: Optional[Any] = ..., addresses: Optional[Any] = ..., isFatal: bool = ..., retry: bool = ...) -> None: ...

class SMTPTimeoutError(SMTPClientError):
    def __init__(self, code: Any, resp: Any, log: Optional[Any] = ..., addresses: Optional[Any] = ..., isFatal: bool = ..., retry: bool = ...) -> None: ...

class SMTPProtocolError(SMTPClientError):
    def __init__(self, code: Any, resp: Any, log: Optional[Any] = ..., addresses: Optional[Any] = ..., isFatal: bool = ..., retry: bool = ...) -> None: ...

class SMTPDeliveryError(SMTPClientError): ...

class SMTPServerError(SMTPError):
    code: Any = ...
    resp: Any = ...
    def __init__(self, code: Any, resp: Any) -> None: ...

class SMTPAddressError(SMTPServerError):
    addr: Any = ...
    def __init__(self, addr: Any, code: Any, resp: Any) -> None: ...

class SMTPBadRcpt(SMTPAddressError):
    def __init__(self, addr: Any, code: int = ..., resp: str = ...) -> None: ...

class SMTPBadSender(SMTPAddressError):
    def __init__(self, addr: Any, code: int = ..., resp: str = ...) -> None: ...

class AddressError(SMTPError): ...
class POP3Error(Exception): ...
class _POP3MessageDeleted(Exception): ...
class POP3ClientError(Exception): ...
class InsecureAuthenticationDisallowed(POP3ClientError): ...
class TLSError(POP3ClientError): ...
class TLSNotSupportedError(POP3ClientError): ...

class ServerErrorResponse(POP3ClientError):
    consumer: Any = ...
    def __init__(self, reason: Any, consumer: Optional[Any] = ...) -> None: ...

class LineTooLong(POP3ClientError): ...
