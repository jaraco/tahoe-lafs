from twisted.cred import checkers as checkers, credentials as credentials, portal as portal
from twisted.cred.error import UnauthorizedLogin as UnauthorizedLogin
from twisted.internet import defer as defer, interfaces as interfaces, reactor as reactor
from twisted.mail import mail as mail, pop3 as pop3, smtp as smtp
from twisted.persisted import dirdbm as dirdbm
from twisted.protocols import basic as basic
from twisted.python import failure as failure, log as log
from typing import Any, IO, Optional

INTERNAL_ERROR: str

class _MaildirNameGenerator:
    n: int = ...
    p: Any = ...
    s: Any = ...
    def __init__(self, clock: Any) -> None: ...
    def generate(self): ...

def initializeMaildir(dir: Any) -> None: ...

class MaildirMessage(mail.FileMessage):
    size: Any = ...
    def __init__(self, address: Any, fp: Any, *a: Any, **kw: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    finalName: Any = ...
    def eomReceived(self): ...

class AbstractMaildirDomain:
    alias: Any = ...
    root: Any = ...
    def __init__(self, service: Any, root: Any) -> None: ...
    def userDirectory(self, user: Any) -> None: ...
    def setAliasGroup(self, alias: Any) -> None: ...
    def exists(self, user: Any, memo: Optional[Any] = ...): ...
    def startMessage(self, user: Any): ...
    def willRelay(self, user: Any, protocol: Any): ...
    def addUser(self, user: Any, password: Any) -> None: ...
    def getCredentialsCheckers(self) -> None: ...

class _MaildirMailboxAppendMessageTask:
    osopen: Any = ...
    oswrite: Any = ...
    osclose: Any = ...
    osrename: Any = ...
    mbox: Any = ...
    defer: Any = ...
    openCall: Any = ...
    msg: Any = ...
    def __init__(self, mbox: Any, msg: Any) -> None: ...
    filesender: Any = ...
    def startUp(self) -> None: ...
    myproducer: Any = ...
    streaming: Any = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def prodProducer(self) -> None: ...
    def unregisterProducer(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def fail(self, err: Optional[Any] = ...) -> None: ...
    def moveFileToNew(self) -> None: ...
    fh: int = ...
    tmpname: Any = ...
    def createTempFile(self) -> None: ...

class MaildirMailbox(pop3.Mailbox):
    AppendFactory: Any = ...
    path: Any = ...
    list: Any = ...
    deleted: Any = ...
    def __init__(self, path: Any) -> None: ...
    def listMessages(self, i: Optional[Any] = ...): ...
    def getMessage(self, i: Any): ...
    def getUidl(self, i: Any): ...
    def deleteMessage(self, i: Any) -> None: ...
    def undeleteMessages(self) -> None: ...
    def appendMessage(self, txt: Any): ...

class StringListMailbox:
    msgs: Any = ...
    def __init__(self, msgs: Any) -> None: ...
    def listMessages(self, i: Optional[Any] = ...): ...
    def getMessage(self, i: int) -> IO[bytes]: ...
    def getUidl(self, i: Any): ...
    def deleteMessage(self, i: Any) -> None: ...
    def undeleteMessages(self) -> None: ...
    def sync(self) -> None: ...

class MaildirDirdbmDomain(AbstractMaildirDomain):
    portal: Any = ...
    dbm: Any = ...
    postmaster: Any = ...
    def __init__(self, service: Any, root: Any, postmaster: int = ...) -> None: ...
    def userDirectory(self, name: Any): ...
    def addUser(self, user: Any, password: Any) -> None: ...
    def getCredentialsCheckers(self): ...
    def requestAvatar(self, avatarId: Any, mind: Any, *interfaces: Any): ...

class DirdbmDatabase:
    credentialInterfaces: Any = ...
    dirdbm: Any = ...
    def __init__(self, dbm: Any) -> None: ...
    def requestAvatarId(self, c: Any): ...
