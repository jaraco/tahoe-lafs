from twisted.internet import protocol as protocol
from twisted.python import log as log
from typing import Any

class Proxy(protocol.Protocol):
    noisy: bool = ...
    peer: Any = ...
    def setPeer(self, peer: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...

class ProxyClient(Proxy):
    def connectionMade(self) -> None: ...

class ProxyClientFactory(protocol.ClientFactory):
    protocol: Any = ...
    server: Any = ...
    def setServer(self, server: Any) -> None: ...
    def buildProtocol(self, *args: Any, **kw: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class ProxyServer(Proxy):
    clientProtocolFactory: Any = ...
    reactor: Any = ...
    def connectionMade(self) -> None: ...

class ProxyFactory(protocol.Factory):
    protocol: Any = ...
    host: Any = ...
    port: Any = ...
    def __init__(self, host: Any, port: Any) -> None: ...
