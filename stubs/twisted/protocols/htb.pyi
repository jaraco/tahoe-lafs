from twisted.protocols import pcp as pcp
from typing import Any, Optional
from zope.interface import Interface

class Bucket:
    maxburst: Optional[int] = ...
    rate: Optional[int] = ...
    content: int = ...
    parentBucket: Any = ...
    lastDrip: Any = ...
    def __init__(self, parentBucket: Optional[Any] = ...) -> None: ...
    def add(self, amount: Any): ...
    def drip(self): ...

class IBucketFilter(Interface):
    def getBucketFor(*somethings: Any, **some_kw: Any) -> None: ...

class HierarchicalBucketFilter:
    bucketFactory: Any = ...
    sweepInterval: Optional[int] = ...
    buckets: Any = ...
    parentFilter: Any = ...
    lastSweep: Any = ...
    def __init__(self, parentFilter: Optional[Any] = ...) -> None: ...
    def getBucketFor(self, *a: Any, **kw: Any): ...
    def getBucketKey(self, *a: Any, **kw: Any) -> None: ...
    def sweep(self) -> None: ...

class FilterByHost(HierarchicalBucketFilter):
    sweepInterval: Any = ...
    def getBucketKey(self, transport: Any): ...

class FilterByServer(HierarchicalBucketFilter):
    sweepInterval: Any = ...
    def getBucketKey(self, transport: Any): ...

class ShapedConsumer(pcp.ProducerConsumerProxy):
    iAmStreaming: bool = ...
    bucket: Any = ...
    def __init__(self, consumer: Any, bucket: Any) -> None: ...
    def stopProducing(self) -> None: ...

class ShapedTransport(ShapedConsumer):
    iAmStreaming: bool = ...
    def __getattr__(self, name: Any): ...

class ShapedProtocolFactory:
    protocol: Any = ...
    bucketFilter: Any = ...
    def __init__(self, protoClass: Any, bucketFilter: Any) -> None: ...
    def __call__(self, *a: Any, **kw: Any): ...
