from twisted.internet import defer as defer, protocol as protocol
from twisted.protocols import basic as basic
from twisted.python import log as log
from typing import Any

def parseParam(line: Any): ...
def makeAtom(line: Any): ...
def makeWord(s: Any): ...
def parseText(line: Any): ...

class Definition:
    name: Any = ...
    db: Any = ...
    dbdesc: Any = ...
    text: Any = ...
    def __init__(self, name: Any, db: Any, dbdesc: Any, text: Any) -> None: ...

class DictClient(basic.LineReceiver):
    data: Any = ...
    MAX_LENGTH: int = ...
    state: Any = ...
    mode: Any = ...
    result: Any = ...
    factory: Any = ...
    def __init__(self) -> None: ...
    def connectionMade(self) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def dictCode_default(self, line: Any) -> None: ...
    def dictCode_221_ready(self, line: Any) -> None: ...
    def dictCode_220_conn(self, line: Any) -> None: ...
    def dictCode_530_conn(self) -> None: ...
    def dictCode_420_conn(self) -> None: ...
    def dictCode_421_conn(self) -> None: ...
    def sendDefine(self, database: Any, word: Any) -> None: ...
    def sendMatch(self, database: Any, strategy: Any, word: Any) -> None: ...
    def dictCode_550_define(self, line: Any) -> None: ...
    def dictCode_550_match(self, line: Any) -> None: ...
    def dictCode_551_match(self, line: Any) -> None: ...
    def dictCode_552_define(self, line: Any) -> None: ...
    def dictCode_552_match(self, line: Any) -> None: ...
    def dictCode_150_define(self, line: Any) -> None: ...
    def dictCode_151_define(self, line: Any) -> None: ...
    def dictCode_152_match(self, line: Any) -> None: ...
    def dictCode_text_define(self, line: Any) -> None: ...
    def dictCode_text_match(self, line: Any): ...
    def dictCode_250_define(self, line: Any) -> None: ...
    def dictCode_250_match(self, line: Any) -> None: ...
    def protocolError(self, reason: Any) -> None: ...
    def dictConnected(self) -> None: ...
    def defineFailed(self, reason: Any) -> None: ...
    def defineDone(self, result: Any) -> None: ...
    def matchFailed(self, reason: Any) -> None: ...
    def matchDone(self, result: Any) -> None: ...

class InvalidResponse(Exception): ...

class DictLookup(DictClient):
    def protocolError(self, reason: Any) -> None: ...
    def dictConnected(self) -> None: ...
    def defineFailed(self, reason: Any) -> None: ...
    def defineDone(self, result: Any) -> None: ...
    def matchFailed(self, reason: Any) -> None: ...
    def matchDone(self, result: Any) -> None: ...

class DictLookupFactory(protocol.ClientFactory):
    protocol: Any = ...
    done: Any = ...
    queryType: Any = ...
    param: Any = ...
    d: Any = ...
    def __init__(self, queryType: Any, param: Any, d: Any) -> None: ...
    def clientDone(self) -> None: ...
    def clientConnectionFailed(self, connector: Any, error: Any) -> None: ...
    def clientConnectionLost(self, connector: Any, error: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

def define(host: Any, port: Any, database: Any, word: Any): ...
def match(host: Any, port: Any, database: Any, strategy: Any, word: Any): ...
