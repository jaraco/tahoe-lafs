from twisted.internet import defer as defer, protocol as protocol, reactor as reactor
from twisted.python import log as log
from typing import Any, Optional

class SOCKSv4Outgoing(protocol.Protocol):
    socks: Any = ...
    def __init__(self, socks: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def write(self, data: Any) -> None: ...

class SOCKSv4Incoming(protocol.Protocol):
    socks: Any = ...
    def __init__(self, socks: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def write(self, data: Any) -> None: ...

class SOCKSv4(protocol.Protocol):
    logging: Any = ...
    reactor: Any = ...
    def __init__(self, logging: Optional[Any] = ..., reactor: Any = ...) -> None: ...
    buf: bytes = ...
    otherConn: Any = ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any): ...
    def connectionLost(self, reason: Any) -> None: ...
    def authorize(self, code: Any, server: Any, port: Any, user: Any): ...
    def connectClass(self, host: Any, port: Any, klass: Any, *args: Any): ...
    def listenClass(self, port: Any, klass: Any, *args: Any): ...
    def makeReply(self, reply: Any, version: int = ..., port: int = ..., ip: str = ...) -> None: ...
    def write(self, data: Any) -> None: ...
    def log(self, proto: Any, data: Any): ...

class SOCKSv4Factory(protocol.Factory):
    logging: Any = ...
    def __init__(self, log: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class SOCKSv4IncomingFactory(protocol.Factory):
    socks: Any = ...
    ip: Any = ...
    def __init__(self, socks: Any, ip: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
