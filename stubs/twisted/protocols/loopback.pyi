from twisted.internet import defer as defer, interfaces as interfaces, main as main, protocol as protocol
from twisted.internet.interfaces import IAddress as IAddress
from twisted.internet.task import deferLater as deferLater
from twisted.protocols import policies as policies
from twisted.python import failure as failure
from typing import Any, Optional

class _LoopbackQueue:
    disconnect: bool = ...
    def __init__(self) -> None: ...
    def put(self, v: Any) -> None: ...
    def __nonzero__(self): ...
    __bool__: Any = ...
    def get(self): ...

class _LoopbackAddress: ...

class _LoopbackTransport:
    disconnecting: bool = ...
    producer: Any = ...
    q: Any = ...
    def __init__(self, q: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, iovec: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def abortConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    streamingProducer: Any = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

def identityPumpPolicy(queue: Any, target: Any) -> None: ...
def collapsingPumpPolicy(queue: Any, target: Any) -> None: ...
def loopbackAsync(server: Any, client: Any, pumpPolicy: Any = ...): ...

class LoopbackRelay:
    buffer: bytes = ...
    shouldLose: int = ...
    disconnecting: int = ...
    producer: Any = ...
    target: Any = ...
    logFile: Any = ...
    def __init__(self, target: Any, logFile: Optional[Any] = ...) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, iovec: Any) -> None: ...
    def clearBuffer(self) -> None: ...
    def loseConnection(self) -> None: ...
    def getHost(self): ...
    def getPeer(self): ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def logPrefix(self): ...

class LoopbackClientFactory(protocol.ClientFactory):
    disconnected: int = ...
    deferred: Any = ...
    protocol: Any = ...
    def __init__(self, protocol: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionLost(self, connector: Any, reason: Any) -> None: ...

class _FireOnClose(policies.ProtocolWrapper):
    deferred: Any = ...
    def __init__(self, protocol: Any, factory: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

def loopbackTCP(server: Any, client: Any, port: int = ..., noisy: bool = ...): ...
def loopbackUNIX(server: Any, client: Any, noisy: bool = ...): ...
