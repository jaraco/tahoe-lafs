from twisted.protocols.basic import Int16StringReceiver, StatefulStringProtocol
from twisted.python._tzhelper import UTC as utc
from typing import Any, Optional
from zope.interface import Interface

__metaclass__ = type
ASK: bytes
ANSWER: bytes
COMMAND: bytes
ERROR: bytes
ERROR_CODE: bytes
ERROR_DESCRIPTION: bytes
UNKNOWN_ERROR_CODE: bytes
UNHANDLED_ERROR_CODE: bytes
MAX_KEY_LENGTH: int
MAX_VALUE_LENGTH: int

class IArgumentType(Interface):
    def fromBox(name: Any, strings: Any, objects: Any, proto: Any) -> None: ...
    def toBox(name: Any, strings: Any, objects: Any, proto: Any) -> None: ...

class IBoxSender(Interface):
    def sendBox(box: Any) -> None: ...
    def unhandledError(failure: Any) -> None: ...

class IBoxReceiver(Interface):
    def startReceivingBoxes(boxSender: Any) -> None: ...
    def ampBoxReceived(box: Any) -> None: ...
    def stopReceivingBoxes(reason: Any) -> None: ...

class IResponderLocator(Interface):
    def locateResponder(name: Any) -> None: ...

class AmpError(Exception): ...
class ProtocolSwitched(Exception): ...
class OnlyOneTLS(AmpError): ...
class NoEmptyBoxes(AmpError): ...
class InvalidSignature(AmpError): ...

class TooLong(AmpError):
    isKey: Any = ...
    isLocal: Any = ...
    value: Any = ...
    keyName: Any = ...
    def __init__(self, isKey: Any, isLocal: Any, value: Any, keyName: Optional[Any] = ...) -> None: ...

class BadLocalReturn(AmpError):
    message: Any = ...
    enclosed: Any = ...
    def __init__(self, message: Any, enclosed: Any) -> None: ...

class RemoteAmpError(AmpError):
    local: Any = ...
    errorCode: Any = ...
    description: Any = ...
    fatal: Any = ...
    def __init__(self, errorCode: Any, description: Any, fatal: bool = ..., local: Optional[Any] = ...) -> None: ...

class UnknownRemoteError(RemoteAmpError):
    def __init__(self, description: Any) -> None: ...

class MalformedAmpBox(AmpError): ...
class UnhandledCommand(AmpError): ...
class IncompatibleVersions(AmpError): ...

PROTOCOL_ERRORS: Any

class AmpBox(dict):
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def copy(self): ...
    def serialize(self): ...
Box = AmpBox

class QuitBox(AmpBox): ...

class _SwitchBox(AmpBox):
    innerProto: Any = ...
    def __init__(self, innerProto: Any, **kw: Any) -> None: ...

class BoxDispatcher:
    boxSender: Any = ...
    locator: Any = ...
    def __init__(self, locator: Any) -> None: ...
    def startReceivingBoxes(self, boxSender: Any) -> None: ...
    def stopReceivingBoxes(self, reason: Any) -> None: ...
    def failAllOutgoing(self, reason: Any) -> None: ...
    def callRemoteString(self, command: Any, requiresAnswer: bool = ..., **kw: Any): ...
    def callRemote(self, commandType: Any, *a: Any, **kw: Any): ...
    def unhandledError(self, failure: Any): ...
    def ampBoxReceived(self, box: Any) -> None: ...
    def dispatchCommand(self, box: Any): ...

class CommandLocator:
    class __metaclass__(type):
        def __new__(cls, name: Any, bases: Any, attrs: Any): ...
    def lookupFunction(self, name: Any): ...
    def locateResponder(self, name: Any): ...

class SimpleStringLocator:
    baseDispatchPrefix: bytes = ...
    def locateResponder(self, name: Any): ...

PYTHON_KEYWORDS: Any

class Argument:
    optional: bool = ...
    def __init__(self, optional: bool = ...) -> None: ...
    def retrieve(self, d: Any, name: Any, proto: Any): ...
    def fromBox(self, name: Any, strings: Any, objects: Any, proto: Any) -> None: ...
    def toBox(self, name: Any, strings: Any, objects: Any, proto: Any) -> None: ...
    def fromStringProto(self, inString: Any, proto: Any): ...
    def toStringProto(self, inObject: Any, proto: Any): ...
    def fromString(self, inString: Any) -> None: ...
    def toString(self, inObject: Any) -> None: ...

class Integer(Argument):
    fromString: Any = ...
    def toString(self, inObject: Any): ...

class String(Argument):
    def toString(self, inObject: Any): ...
    def fromString(self, inString: Any): ...

class Float(Argument):
    fromString: Any = ...
    def toString(self, inString: Any): ...

class Boolean(Argument):
    def fromString(self, inString: Any): ...
    def toString(self, inObject: Any): ...

class Unicode(String):
    def toString(self, inObject: Any): ...
    def fromString(self, inString: Any): ...

class Path(Unicode):
    def fromString(self, inString: Any): ...
    def toString(self, inObject: Any): ...

class ListOf(Argument):
    elementType: Any = ...
    def __init__(self, elementType: Any, optional: bool = ...) -> None: ...
    def fromString(self, inString: Any): ...
    def toString(self, inObject: Any): ...

class AmpList(Argument):
    subargs: Any = ...
    def __init__(self, subargs: Any, optional: bool = ...) -> None: ...
    def fromStringProto(self, inString: Any, proto: Any): ...
    def toStringProto(self, inObject: Any, proto: Any): ...

class Descriptor(Integer):
    def fromStringProto(self, inString: Any, proto: Any): ...
    def toStringProto(self, inObject: Any, proto: Any): ...

class Command:
    class __metaclass__(type):
        def __new__(cls, name: Any, bases: Any, attrs: Any): ...
    arguments: Any = ...
    response: Any = ...
    extra: Any = ...
    errors: Any = ...
    fatalErrors: Any = ...
    commandType: Any = ...
    responseType: Any = ...
    requiresAnswer: bool = ...
    structured: Any = ...
    def __init__(self, **kw: Any) -> None: ...
    def makeResponse(cls, objects: Any, proto: Any): ...
    makeResponse: Any = ...
    def makeArguments(cls, objects: Any, proto: Any): ...
    makeArguments: Any = ...
    def parseResponse(cls, box: Any, protocol: Any): ...
    parseResponse: Any = ...
    def parseArguments(cls, box: Any, protocol: Any): ...
    parseArguments: Any = ...
    def responder(cls, methodfunc: Any): ...
    responder: Any = ...

class _NoCertificate:
    client: Any = ...
    def __init__(self, client: Any) -> None: ...
    def options(self, *authorities: Any): ...

class _TLSBox(AmpBox):
    def __init__(self) -> None: ...
    certificate: Any = ...
    verify: Any = ...

class _LocalArgument(String):
    def fromBox(self, name: Any, strings: Any, objects: Any, proto: Any) -> None: ...

class StartTLS(Command):
    arguments: Any = ...
    response: Any = ...
    responseType: Any = ...
    certificate: Any = ...
    authorities: Any = ...
    def __init__(self, **kw: Any) -> None: ...

class ProtocolSwitchCommand(Command):
    protoToSwitchToFactory: Any = ...
    def __init__(self, _protoToSwitchToFactory: Any, **kw: Any) -> None: ...
    def makeResponse(cls, innerProto: Any, proto: Any): ...
    makeResponse: Any = ...

class _DescriptorExchanger:
    def __init__(self) -> None: ...
    def fileDescriptorReceived(self, descriptor: Any) -> None: ...

class BinaryBoxProtocol(StatefulStringProtocol, Int16StringReceiver, _DescriptorExchanger):
    hostCertificate: Any = ...
    noPeerCertificate: bool = ...
    innerProtocol: Any = ...
    innerProtocolClientFactory: Any = ...
    boxReceiver: Any = ...
    def __init__(self, boxReceiver: Any) -> None: ...
    def sendBox(self, box: Any) -> None: ...
    transport: Any = ...
    def makeConnection(self, transport: Any) -> None: ...
    def dataReceived(self, data: Any): ...
    def connectionLost(self, reason: Any) -> None: ...
    MAX_LENGTH: Any = ...
    def proto_init(self, string: Any): ...
    def proto_key(self, string: Any): ...
    def proto_value(self, string: Any): ...
    def lengthLimitExceeded(self, length: Any) -> None: ...
    peerCertificate: Any = ...
    def unhandledError(self, failure: Any) -> None: ...

class AMP(BinaryBoxProtocol, BoxDispatcher, CommandLocator, SimpleStringLocator):
    def __init__(self, boxReceiver: Optional[Any] = ..., locator: Optional[Any] = ...) -> None: ...
    def locateResponder(self, name: Any): ...
    def makeConnection(self, transport: Any) -> None: ...
    transport: Any = ...
    def connectionLost(self, reason: Any) -> None: ...

class _ParserHelper:
    boxes: Any = ...
    def __init__(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    disconnecting: bool = ...
    def startReceivingBoxes(self, sender: Any) -> None: ...
    def ampBoxReceived(self, box: Any) -> None: ...
    def parse(cls, fileObj: Any): ...
    parse: Any = ...
    def parseString(cls, data: Any): ...
    parseString: Any = ...

parse: Any
parseString: Any

class Decimal(Argument):
    def fromString(self, inString: Any): ...
    def toString(self, inObject: Any): ...

class DateTime(Argument):
    def fromString(self, s: Any): ...
    def toString(self, i: Any): ...
