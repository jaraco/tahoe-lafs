from twisted.protocols.basic import LineReceiver
from twisted.protocols.policies import TimeoutMixin
from typing import Any, Optional

DEFAULT_PORT: int

class NoSuchCommand(Exception): ...
class ClientError(Exception): ...
class ServerError(Exception): ...

class Command:
    command: Any = ...
    def __init__(self, command: Any, **kwargs: Any) -> None: ...
    def success(self, value: Any) -> None: ...
    def fail(self, error: Any) -> None: ...

class MemCacheProtocol(LineReceiver, TimeoutMixin):
    MAX_KEY_LENGTH: int = ...
    persistentTimeOut: Any = ...
    def __init__(self, timeOut: int = ...) -> None: ...
    def timeoutConnection(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    def rawDataReceived(self, data: Any) -> None: ...
    def cmd_STORED(self) -> None: ...
    def cmd_NOT_STORED(self) -> None: ...
    def cmd_END(self) -> None: ...
    def cmd_NOT_FOUND(self) -> None: ...
    def cmd_VALUE(self, line: Any) -> None: ...
    def cmd_STAT(self, line: Any) -> None: ...
    def cmd_VERSION(self, versionData: Any) -> None: ...
    def cmd_ERROR(self) -> None: ...
    def cmd_CLIENT_ERROR(self, errText: Any) -> None: ...
    def cmd_SERVER_ERROR(self, errText: Any) -> None: ...
    def cmd_DELETED(self) -> None: ...
    def cmd_OK(self) -> None: ...
    def cmd_EXISTS(self) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def increment(self, key: Any, val: int = ...): ...
    def decrement(self, key: Any, val: int = ...): ...
    def replace(self, key: Any, val: Any, flags: int = ..., expireTime: int = ...): ...
    def add(self, key: Any, val: Any, flags: int = ..., expireTime: int = ...): ...
    def set(self, key: Any, val: Any, flags: int = ..., expireTime: int = ...): ...
    def checkAndSet(self, key: Any, val: Any, cas: Any, flags: int = ..., expireTime: int = ...): ...
    def append(self, key: Any, val: Any): ...
    def prepend(self, key: Any, val: Any): ...
    def get(self, key: Any, withIdentifier: bool = ...): ...
    def getMultiple(self, keys: Any, withIdentifier: bool = ...): ...
    def stats(self, arg: Optional[Any] = ...): ...
    def version(self): ...
    def delete(self, key: Any): ...
    def flushAll(self): ...
