from twisted.protocols import basic
from typing import Any

class IdentError(Exception):
    identDescription: str = ...

class NoUser(IdentError):
    identDescription: str = ...

class InvalidPort(IdentError):
    identDescription: str = ...

class HiddenUser(IdentError):
    identDescription: str = ...

class IdentServer(basic.LineOnlyReceiver):
    def lineReceived(self, line: Any) -> None: ...
    def invalidQuery(self) -> None: ...
    def validQuery(self, portOnServer: Any, portOnClient: Any) -> None: ...
    def lookup(self, serverAddress: Any, clientAddress: Any) -> None: ...

class ProcServerMixin:
    SYSTEM_NAME: str = ...
    def getUsername(self, uid: Any, getpwuid: Any = ...): ...
    def getUsername(self, uid: Any) -> None: ...
    def entries(self) -> None: ...
    def dottedQuadFromHexString(self, hexstr: Any): ...
    def unpackAddress(self, packed: Any): ...
    def parseLine(self, line: Any): ...
    def lookup(self, serverAddress: Any, clientAddress: Any): ...

class IdentClient(basic.LineOnlyReceiver):
    errorTypes: Any = ...
    queries: Any = ...
    def __init__(self) -> None: ...
    def lookup(self, portOnServer: Any, portOnClient: Any): ...
    def lineReceived(self, line: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def parseResponse(self, deferred: Any, line: Any) -> None: ...
