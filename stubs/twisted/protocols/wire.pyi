from twisted.internet import protocol
from typing import Any

class Echo(protocol.Protocol):
    def dataReceived(self, data: Any) -> None: ...

class Discard(protocol.Protocol):
    def dataReceived(self, data: Any) -> None: ...

class Chargen(protocol.Protocol):
    noise: bytes = ...
    def connectionMade(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def stopProducing(self) -> None: ...

class QOTD(protocol.Protocol):
    def connectionMade(self) -> None: ...
    def getQuote(self): ...

class Who(protocol.Protocol):
    def connectionMade(self) -> None: ...
    def getUsers(self): ...

class Daytime(protocol.Protocol):
    def connectionMade(self) -> None: ...

class Time(protocol.Protocol):
    def connectionMade(self) -> None: ...
