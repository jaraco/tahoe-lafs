from twisted import copyright as copyright
from twisted.cred import checkers as checkers, credentials as credentials, portal as portal
from twisted.internet import defer as defer, error as error, interfaces as interfaces, protocol as protocol, reactor as reactor
from twisted.protocols import basic as basic, policies as policies
from twisted.python import failure as failure, filepath as filepath, log as log
from typing import Any, Optional
from zope.interface import Interface

RESTART_MARKER_REPLY: str
SERVICE_READY_IN_N_MINUTES: str
DATA_CNX_ALREADY_OPEN_START_XFR: str
FILE_STATUS_OK_OPEN_DATA_CNX: str
CMD_OK: str
TYPE_SET_OK: str
ENTERING_PORT_MODE: str
CMD_NOT_IMPLMNTD_SUPERFLUOUS: str
SYS_STATUS_OR_HELP_REPLY: str
FEAT_OK: str
DIR_STATUS: str
FILE_STATUS: str
HELP_MSG: str
NAME_SYS_TYPE: str
SVC_READY_FOR_NEW_USER: str
WELCOME_MSG: str
SVC_CLOSING_CTRL_CNX: str
GOODBYE_MSG: str
DATA_CNX_OPEN_NO_XFR_IN_PROGRESS: str
CLOSING_DATA_CNX: str
TXFR_COMPLETE_OK: str
ENTERING_PASV_MODE: str
ENTERING_EPSV_MODE: str
USR_LOGGED_IN_PROCEED: str
GUEST_LOGGED_IN_PROCEED: str
REQ_FILE_ACTN_COMPLETED_OK: str
PWD_REPLY: str
MKD_REPLY: str
USR_NAME_OK_NEED_PASS: str
GUEST_NAME_OK_NEED_EMAIL: str
NEED_ACCT_FOR_LOGIN: str
REQ_FILE_ACTN_PENDING_FURTHER_INFO: str
SVC_NOT_AVAIL_CLOSING_CTRL_CNX: str
TOO_MANY_CONNECTIONS: str
CANT_OPEN_DATA_CNX: str
CNX_CLOSED_TXFR_ABORTED: str
REQ_ACTN_ABRTD_FILE_UNAVAIL: str
REQ_ACTN_ABRTD_LOCAL_ERR: str
REQ_ACTN_ABRTD_INSUFF_STORAGE: str
SYNTAX_ERR: str
SYNTAX_ERR_IN_ARGS: str
CMD_NOT_IMPLMNTD: str
OPTS_NOT_IMPLEMENTED: str
BAD_CMD_SEQ: str
CMD_NOT_IMPLMNTD_FOR_PARAM: str
NOT_LOGGED_IN: str
AUTH_FAILURE: str
NEED_ACCT_FOR_STOR: str
FILE_NOT_FOUND: str
PERMISSION_DENIED: str
ANON_USER_DENIED: str
IS_NOT_A_DIR: str
REQ_ACTN_NOT_TAKEN: str
FILE_EXISTS: str
IS_A_DIR: str
PAGE_TYPE_UNK: str
EXCEEDED_STORAGE_ALLOC: str
FILENAME_NOT_ALLOWED: str
RESPONSE: Any

class InvalidPath(Exception): ...

def toSegments(cwd: Any, path: Any): ...
def errnoToFailure(e: Any, path: Any): ...

class FTPCmdError(Exception):
    errorMessage: Any = ...
    def __init__(self, *msg: Any) -> None: ...
    def response(self): ...

class FileNotFoundError(FTPCmdError):
    errorCode: Any = ...

class AnonUserDeniedError(FTPCmdError):
    errorCode: Any = ...

class PermissionDeniedError(FTPCmdError):
    errorCode: Any = ...

class IsNotADirectoryError(FTPCmdError):
    errorCode: Any = ...

class FileExistsError(FTPCmdError):
    errorCode: Any = ...

class IsADirectoryError(FTPCmdError):
    errorCode: Any = ...

class CmdSyntaxError(FTPCmdError):
    errorCode: Any = ...

class CmdArgSyntaxError(FTPCmdError):
    errorCode: Any = ...

class CmdNotImplementedError(FTPCmdError):
    errorCode: Any = ...

class CmdNotImplementedForArgError(FTPCmdError):
    errorCode: Any = ...

class FTPError(Exception): ...
class PortConnectionError(Exception): ...

class BadCmdSequenceError(FTPCmdError):
    errorCode: Any = ...

class AuthorizationError(FTPCmdError):
    errorCode: Any = ...

def debugDeferred(self, *_: Any) -> None: ...

class DTP(protocol.Protocol):
    isConnected: bool = ...
    def connectionMade(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    def sendListResponse(self, name: Any, response: Any) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any): ...
    def unregisterProducer(self) -> None: ...
    def write(self, data: Any): ...
    def dataReceived(self, bytes: Any) -> None: ...
    def registerConsumer(self, cons: Any): ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def stopProducing(self) -> None: ...

class DTPFactory(protocol.ClientFactory):
    peerCheck: bool = ...
    pi: Any = ...
    peerHost: Any = ...
    deferred: Any = ...
    delayedCall: Any = ...
    def __init__(self, pi: Any, peerHost: Optional[Any] = ..., reactor: Optional[Any] = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def stopFactory(self) -> None: ...
    def timeoutFactory(self) -> None: ...
    def cancelTimeout(self) -> None: ...
    def setTimeout(self, seconds: Any) -> None: ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class ASCIIConsumerWrapper:
    cons: Any = ...
    registerProducer: Any = ...
    unregisterProducer: Any = ...
    def __init__(self, cons: Any) -> None: ...
    def write(self, bytes: Any): ...

class FileConsumer:
    fObj: Any = ...
    def __init__(self, fObj: Any) -> None: ...
    producer: Any = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def write(self, bytes: Any) -> None: ...

class FTPOverflowProtocol(basic.LineReceiver):
    def connectionMade(self) -> None: ...

class FTP(basic.LineReceiver, policies.TimeoutMixin):
    disconnected: bool = ...
    UNAUTH: Any = ...
    INAUTH: Any = ...
    AUTHED: Any = ...
    RENAMING: Any = ...
    dtpTimeout: int = ...
    portal: Any = ...
    shell: Any = ...
    dtpFactory: Any = ...
    dtpPort: Any = ...
    dtpInstance: Any = ...
    binary: bool = ...
    PUBLIC_COMMANDS: Any = ...
    FEATURES: Any = ...
    passivePortRange: Any = ...
    listenFactory: Any = ...
    def reply(self, key: Any, *args: Any) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    state: Any = ...
    def connectionMade(self) -> None: ...
    transport: Any = ...
    def connectionLost(self, reason: Any) -> None: ...
    def timeoutConnection(self) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def processCommand(self, cmd: Any, *params: Any): ...
    def getDTPPort(self, factory: Any): ...
    def ftp_USER(self, username: Any): ...
    logout: Any = ...
    workingDirectory: Any = ...
    def ftp_PASS(self, password: Any): ...
    def ftp_PASV(self): ...
    def ftp_PORT(self, address: Any): ...
    def ftp_LIST(self, path: str = ...): ...
    def ftp_NLST(self, path: Any): ...
    def ftp_CWD(self, path: Any): ...
    def ftp_CDUP(self): ...
    def ftp_PWD(self): ...
    def ftp_RETR(self, path: Any): ...
    def ftp_STOR(self, path: Any): ...
    def ftp_SIZE(self, path: Any): ...
    def ftp_MDTM(self, path: Any): ...
    def ftp_TYPE(self, type: Any): ...
    def type_A(self, code: Any): ...
    def type_I(self, code: Any): ...
    def type_UNKNOWN(self, code: Any): ...
    def ftp_SYST(self): ...
    def ftp_STRU(self, structure: Any): ...
    def ftp_MODE(self, mode: Any): ...
    def ftp_MKD(self, path: Any): ...
    def ftp_RMD(self, path: Any): ...
    def ftp_DELE(self, path: Any): ...
    def ftp_NOOP(self): ...
    def ftp_RNFR(self, fromName: Any): ...
    def ftp_RNTO(self, toName: Any): ...
    def ftp_FEAT(self) -> None: ...
    def ftp_OPTS(self, option: Any): ...
    def ftp_QUIT(self) -> None: ...
    def cleanupDTP(self) -> None: ...

class FTPFactory(policies.LimitTotalConnectionsFactory):
    protocol: Any = ...
    overflowProtocol: Any = ...
    allowAnonymous: bool = ...
    userAnonymous: str = ...
    timeOut: int = ...
    welcomeMessage: Any = ...
    passivePortRange: Any = ...
    portal: Any = ...
    instances: Any = ...
    def __init__(self, portal: Optional[Any] = ..., userAnonymous: str = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def stopFactory(self) -> None: ...

class IFTPShell(Interface):
    def makeDirectory(path: Any) -> None: ...
    def removeDirectory(path: Any) -> None: ...
    def removeFile(path: Any) -> None: ...
    def rename(fromPath: Any, toPath: Any) -> None: ...
    def access(path: Any) -> None: ...
    def stat(path: Any, keys: Any = ...) -> None: ...
    def list(path: Any, keys: Any = ...) -> None: ...
    def openForReading(path: Any) -> None: ...
    def openForWriting(path: Any) -> None: ...

class IReadFile(Interface):
    def send(consumer: Any) -> None: ...

class IWriteFile(Interface):
    def receive() -> None: ...
    def close() -> None: ...

class FTPAnonymousShell:
    filesystemRoot: Any = ...
    def __init__(self, filesystemRoot: Any) -> None: ...
    def makeDirectory(self, path: Any): ...
    def removeDirectory(self, path: Any): ...
    def removeFile(self, path: Any): ...
    def rename(self, fromPath: Any, toPath: Any): ...
    def receive(self, path: Any): ...
    def openForReading(self, path: Any): ...
    def openForWriting(self, path: Any): ...
    def access(self, path: Any): ...
    def stat(self, path: Any, keys: Any = ...): ...
    def list(self, path: Any, keys: Any = ...): ...

class _FileReader:
    fObj: Any = ...
    def __init__(self, fObj: Any) -> None: ...
    def send(self, consumer: Any): ...

class FTPShell(FTPAnonymousShell):
    def makeDirectory(self, path: Any): ...
    def removeDirectory(self, path: Any): ...
    def removeFile(self, path: Any): ...
    def rename(self, fromPath: Any, toPath: Any): ...
    def openForWriting(self, path: Any): ...

class _FileWriter:
    fObj: Any = ...
    def __init__(self, fObj: Any) -> None: ...
    def receive(self): ...
    def close(self): ...

class BaseFTPRealm:
    anonymousRoot: Any = ...
    def __init__(self, anonymousRoot: Any) -> None: ...
    def getHomeDirectory(self, avatarId: Any) -> None: ...
    def requestAvatar(self, avatarId: Any, mind: Any, *interfaces: Any): ...

class FTPRealm(BaseFTPRealm):
    userHome: Any = ...
    def __init__(self, anonymousRoot: Any, userHome: str = ...) -> None: ...
    def getHomeDirectory(self, avatarId: Any): ...

class SystemFTPRealm(BaseFTPRealm):
    def getHomeDirectory(self, avatarId: Any): ...

class ConnectionLost(FTPError): ...
class CommandFailed(FTPError): ...
class BadResponse(FTPError): ...
class UnexpectedResponse(FTPError): ...
class UnexpectedData(FTPError): ...

class FTPCommand:
    text: Any = ...
    deferred: Any = ...
    ready: int = ...
    public: Any = ...
    transferDeferred: Any = ...
    def __init__(self, text: Optional[Any] = ..., public: int = ...) -> None: ...
    def fail(self, failure: Any) -> None: ...

class ProtocolWrapper(protocol.Protocol):
    original: Any = ...
    deferred: Any = ...
    def __init__(self, original: Any, deferred: Any) -> None: ...
    def makeConnection(self, transport: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class IFinishableConsumer(interfaces.IConsumer):
    def finish() -> None: ...

class SenderProtocol(protocol.Protocol):
    connectedDeferred: Any = ...
    deferred: Any = ...
    def __init__(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def makeConnection(self, transport: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def finish(self) -> None: ...

def decodeHostPort(line: Any): ...
def encodeHostPort(host: Any, port: Any): ...

class FTPDataPortFactory(protocol.ServerFactory):
    noisy: bool = ...
    def buildProtocol(self, addr: Any): ...

class FTPClientBasic(basic.LineReceiver):
    debug: bool = ...
    actionQueue: Any = ...
    greeting: Any = ...
    nextDeferred: Any = ...
    response: Any = ...
    def __init__(self) -> None: ...
    def fail(self, error: Any) -> None: ...
    def sendLine(self, line: Any) -> None: ...
    def sendNextCommand(self) -> None: ...
    def queueCommand(self, ftpCommand: Any) -> None: ...
    def queueStringCommand(self, command: Any, public: int = ...): ...
    def popCommandQueue(self): ...
    def queueLogin(self, username: Any, password: Any): ...
    def lineReceived(self, line: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class _PassiveConnectionFactory(protocol.ClientFactory):
    noisy: bool = ...
    protoInstance: Any = ...
    def __init__(self, protoInstance: Any) -> None: ...
    def buildProtocol(self, ignored: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class FTPClient(FTPClientBasic):
    connectFactory: Any = ...
    passive: Any = ...
    def __init__(self, username: str = ..., password: str = ..., passive: int = ...) -> None: ...
    def fail(self, error: Any) -> None: ...
    def receiveFromConnection(self, commands: Any, protocol: Any): ...
    def queueLogin(self, username: Any, password: Any) -> None: ...
    def sendToConnection(self, commands: Any): ...
    def generatePortCommand(self, portCmd: Any): ...
    def escapePath(self, path: Any): ...
    def retrieveFile(self, path: Any, protocol: Any, offset: int = ...): ...
    retr: Any = ...
    def storeFile(self, path: Any, offset: int = ...): ...
    stor: Any = ...
    def rename(self, pathFrom: Any, pathTo: Any): ...
    def list(self, path: Any, protocol: Any): ...
    def nlst(self, path: Any, protocol: Any): ...
    def cwd(self, path: Any): ...
    def makeDirectory(self, path: Any): ...
    def removeFile(self, path: Any): ...
    def removeDirectory(self, path: Any): ...
    def cdup(self): ...
    def pwd(self): ...
    def getDirectory(self): ...
    def quit(self): ...

class FTPFileListProtocol(basic.LineReceiver):
    fileLinePattern: Any = ...
    delimiter: bytes = ...
    files: Any = ...
    def __init__(self) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def parseDirectoryLine(self, line: Any): ...
    def addFile(self, info: Any) -> None: ...
    def unknownLine(self, line: Any) -> None: ...

def parsePWDResponse(response: Any): ...
