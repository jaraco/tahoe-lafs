from twisted.internet.interfaces import IHandshakeListener as IHandshakeListener, ILoggingContext as ILoggingContext, INegotiated as INegotiated, IOpenSSLClientConnectionCreator as IOpenSSLClientConnectionCreator, IOpenSSLServerConnectionCreator as IOpenSSLServerConnectionCreator, IProtocolNegotiationFactory as IProtocolNegotiationFactory, IPushProducer as IPushProducer, ISystemHandle as ISystemHandle
from twisted.internet.main import CONNECTION_LOST as CONNECTION_LOST
from twisted.internet.protocol import Protocol as Protocol
from twisted.protocols.policies import ProtocolWrapper as ProtocolWrapper, WrappingFactory as WrappingFactory
from twisted.python.failure import Failure as Failure
from typing import Any

class _ProducerMembrane:
    def __init__(self, producer: Any) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def stopProducing(self) -> None: ...

class TLSMemoryBIOProtocol(ProtocolWrapper):
    def __init__(self, factory: Any, wrappedProtocol: Any, _connectWrapped: bool = ...) -> None: ...
    def getHandle(self): ...
    def makeConnection(self, transport: Any) -> None: ...
    def dataReceived(self, bytes: Any) -> None: ...
    connected: bool = ...
    def connectionLost(self, reason: Any) -> None: ...
    disconnecting: bool = ...
    def loseConnection(self) -> None: ...
    def abortConnection(self) -> None: ...
    def failVerification(self, reason: Any) -> None: ...
    def write(self, bytes: Any) -> None: ...
    def writeSequence(self, iovec: Any) -> None: ...
    def getPeerCertificate(self): ...
    @property
    def negotiatedProtocol(self): ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

class _ContextFactoryToConnectionFactory:
    def __init__(self, oldStyleContextFactory: Any) -> None: ...
    def serverConnectionForTLS(self, protocol: Any): ...
    def clientConnectionForTLS(self, protocol: Any): ...

class TLSMemoryBIOFactory(WrappingFactory):
    protocol: Any = ...
    noisy: bool = ...
    def __init__(self, contextFactory: Any, isClient: Any, wrappedFactory: Any) -> None: ...
    def logPrefix(self): ...
