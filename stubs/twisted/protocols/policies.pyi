from twisted.internet import error as error
from twisted.internet.interfaces import ILoggingContext as ILoggingContext
from twisted.internet.protocol import ClientFactory as ClientFactory, Protocol as Protocol, ServerFactory as ServerFactory
from twisted.python import log as log
from typing import Any, Optional, Type

class ProtocolWrapper(Protocol):
    disconnecting: int = ...
    wrappedProtocol: Any = ...
    factory: Any = ...
    def __init__(self, factory: Any, wrappedProtocol: Any) -> None: ...
    def logPrefix(self): ...
    def makeConnection(self, transport: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, data: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def stopConsuming(self) -> None: ...
    def __getattr__(self, name: Any): ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class WrappingFactory(ClientFactory):
    protocol: Type[Protocol] = ...
    wrappedFactory: Any = ...
    protocols: Any = ...
    def __init__(self, wrappedFactory: Any) -> None: ...
    def logPrefix(self): ...
    def doStart(self) -> None: ...
    def doStop(self) -> None: ...
    def startedConnecting(self, connector: Any) -> None: ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...
    def clientConnectionLost(self, connector: Any, reason: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def registerProtocol(self, p: Any) -> None: ...
    def unregisterProtocol(self, p: Any) -> None: ...

class ThrottlingProtocol(ProtocolWrapper):
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    producer: Any = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def throttleReads(self) -> None: ...
    def unthrottleReads(self) -> None: ...
    def throttleWrites(self) -> None: ...
    def unthrottleWrites(self) -> None: ...

class ThrottlingFactory(WrappingFactory):
    protocol: Any = ...
    connectionCount: int = ...
    maxConnectionCount: Any = ...
    readLimit: Any = ...
    writeLimit: Any = ...
    readThisSecond: int = ...
    writtenThisSecond: int = ...
    unthrottleReadsID: Any = ...
    checkReadBandwidthID: Any = ...
    unthrottleWritesID: Any = ...
    checkWriteBandwidthID: Any = ...
    def __init__(self, wrappedFactory: Any, maxConnectionCount: Any = ..., readLimit: Optional[Any] = ..., writeLimit: Optional[Any] = ...) -> None: ...
    def callLater(self, period: Any, func: Any): ...
    def registerWritten(self, length: Any) -> None: ...
    def registerRead(self, length: Any) -> None: ...
    def checkReadBandwidth(self) -> None: ...
    def checkWriteBandwidth(self) -> None: ...
    def throttleReads(self) -> None: ...
    def unthrottleReads(self) -> None: ...
    def throttleWrites(self) -> None: ...
    def unthrottleWrites(self) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def unregisterProtocol(self, p: Any) -> None: ...

class SpewingProtocol(ProtocolWrapper):
    def dataReceived(self, data: Any) -> None: ...
    def write(self, data: Any) -> None: ...

class SpewingFactory(WrappingFactory):
    protocol: Any = ...

class LimitConnectionsByPeer(WrappingFactory):
    maxConnectionsPerPeer: int = ...
    peerConnections: Any = ...
    def startFactory(self) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def unregisterProtocol(self, p: Any) -> None: ...

class LimitTotalConnectionsFactory(ServerFactory):
    connectionCount: int = ...
    connectionLimit: Any = ...
    overflowProtocol: Optional[Type[Protocol]] = ...
    def buildProtocol(self, addr: Any): ...
    def registerProtocol(self, p: Any) -> None: ...
    def unregisterProtocol(self, p: Any) -> None: ...

class TimeoutProtocol(ProtocolWrapper):
    timeoutCall: Any = ...
    timeoutPeriod: Any = ...
    def __init__(self, factory: Any, wrappedProtocol: Any, timeoutPeriod: Any) -> None: ...
    def setTimeout(self, timeoutPeriod: Optional[Any] = ...) -> None: ...
    def cancelTimeout(self) -> None: ...
    def resetTimeout(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, seq: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def timeoutFunc(self) -> None: ...

class TimeoutFactory(WrappingFactory):
    protocol: Any = ...
    timeoutPeriod: Any = ...
    def __init__(self, wrappedFactory: Any, timeoutPeriod: Any = ...) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def callLater(self, period: Any, func: Any): ...

class TrafficLoggingProtocol(ProtocolWrapper):
    logfile: Any = ...
    lengthLimit: Any = ...
    def __init__(self, factory: Any, wrappedProtocol: Any, logfile: Any, lengthLimit: Optional[Any] = ..., number: int = ...) -> None: ...
    def connectionMade(self): ...
    def dataReceived(self, data: Any): ...
    def connectionLost(self, reason: Any): ...
    def write(self, data: Any): ...
    def writeSequence(self, iovec: Any): ...
    def loseConnection(self): ...

class TrafficLoggingFactory(WrappingFactory):
    protocol: Any = ...
    logfilePrefix: Any = ...
    lengthLimit: Any = ...
    def __init__(self, wrappedFactory: Any, logfilePrefix: Any, lengthLimit: Optional[Any] = ...) -> None: ...
    def open(self, name: Any): ...
    def buildProtocol(self, addr: Any): ...
    def resetCounter(self) -> None: ...

class TimeoutMixin:
    timeOut: Optional[int] = ...
    def callLater(self, period: Any, func: Any): ...
    def resetTimeout(self) -> None: ...
    def setTimeout(self, period: Any): ...
    def timeoutConnection(self) -> None: ...
