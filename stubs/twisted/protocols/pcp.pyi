from twisted.internet import interfaces as interfaces
from typing import Any

class BasicProducerConsumerProxy:
    consumer: Any = ...
    producer: Any = ...
    producerIsStreaming: Any = ...
    iAmStreaming: bool = ...
    outstandingPull: bool = ...
    paused: bool = ...
    stopped: bool = ...
    def __init__(self, consumer: Any) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def stopProducing(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def finish(self) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

class ProducerConsumerProxy(BasicProducerConsumerProxy):
    bufferSize: Any = ...
    producerPaused: bool = ...
    unregistered: bool = ...
    paused: bool = ...
    def pauseProducing(self) -> None: ...
    outstandingPull: Any = ...
    def resumeProducing(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
