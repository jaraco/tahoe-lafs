from ._exit import ExitStatus as ExitStatus, exit as exit
from ._pidfile import AlreadyRunningError as AlreadyRunningError, InvalidPIDFileError as InvalidPIDFileError, nonePIDFile as nonePIDFile
from twisted.logger import FilteringLogObserver as FilteringLogObserver, LogLevel as LogLevel, LogLevelFilterPredicate as LogLevelFilterPredicate, Logger as Logger, globalLogBeginner as globalLogBeginner, textFileLogObserver as textFileLogObserver
from typing import Any

class Runner:
    def run(self) -> None: ...
    def killIfRequested(self) -> None: ...
    def startLogging(self) -> None: ...
    def startReactor(self) -> None: ...
    def whenRunning(self) -> None: ...
    def reactorExited(self) -> None: ...
    def __init__(self, reactor: Any, pidFile: Any, kill: Any, defaultLogLevel: Any, logFile: Any, fileLogObserverFactory: Any, whenRunning: Any, whenRunningArguments: Any, reactorExited: Any, reactorExitedArguments: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
