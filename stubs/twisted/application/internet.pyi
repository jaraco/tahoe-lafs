from twisted.application import service
from typing import Any, Optional

class _VolatileDataService(service.Service):
    volatile: Any = ...

class _AbstractServer(_VolatileDataService):
    volatile: Any = ...
    method: Any = ...
    reactor: Any = ...
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def privilegedStartService(self) -> None: ...
    def startService(self) -> None: ...
    def stopService(self): ...

class _AbstractClient(_VolatileDataService):
    volatile: Any = ...
    method: Any = ...
    reactor: Any = ...
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...

class TimerService(_VolatileDataService):
    volatile: Any = ...
    step: Any = ...
    call: Any = ...
    clock: Any = ...
    def __init__(self, step: Any, callable: Any, *args: Any, **kwargs: Any) -> None: ...
    def startService(self) -> None: ...
    def stopService(self): ...

class CooperatorService(service.Service):
    coop: Any = ...
    def __init__(self) -> None: ...
    def coiterate(self, iterator: Any): ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...

class StreamServerEndpointService(service.Service):
    endpoint: Any = ...
    factory: Any = ...
    def __init__(self, endpoint: Any, factory: Any) -> None: ...
    def privilegedStartService(self) -> None: ...
    def startService(self) -> None: ...
    running: bool = ...
    def stopService(self): ...

class _ReconnectingProtocolProxy:
    def __init__(self, protocol: Any, lostNotification: Any) -> None: ...
    def connectionLost(self, reason: Any): ...
    def __getattr__(self, item: Any): ...

class _DisconnectFactory:
    def __init__(self, protocolFactory: Any, protocolDisconnected: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def __getattr__(self, item: Any): ...

class _ClientMachine:
    def __init__(self, endpoint: Any, factory: Any, retryPolicy: Any, clock: Any, prepareConnection: Any, log: Any) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def whenConnected(self, failAfterFailures: Optional[Any] = ...) -> None: ...

class ClientService(service.Service):
    def __init__(self, endpoint: Any, factory: Any, retryPolicy: Optional[Any] = ..., clock: Optional[Any] = ..., prepareConnection: Optional[Any] = ...) -> None: ...
    def whenConnected(self, failAfterFailures: Optional[Any] = ...): ...
    def startService(self) -> None: ...
    def stopService(self): ...

# Names in __all__ with no definition:
#   MulticastServer
#   SSLClient
#   SSLServer
#   TCPClient
#   TCPServer
#   UDPServer
#   UNIXClient
#   UNIXDatagramClient
#   UNIXDatagramServer
#   UNIXServer
