from twisted import copyright as copyright, logger as logger, plugin as plugin
from twisted.application import reactors as reactors, service as service
from twisted.application.reactors import NoSuchReactor as NoSuchReactor, installReactor as installReactor
from twisted.internet import defer as defer
from twisted.persisted import sob as sob
from twisted.python import failure as failure, log as log, logfile as logfile, runtime as runtime, usage as usage, util as util
from twisted.python.reflect import namedAny as namedAny, namedModule as namedModule, qual as qual
from typing import Any, Optional

class _BasicProfiler:
    profileOutput: Any = ...
    saveStats: Any = ...
    def __init__(self, profileOutput: Any, saveStats: Any) -> None: ...

class ProfileRunner(_BasicProfiler):
    def run(self, reactor: Any) -> None: ...

class CProfileRunner(_BasicProfiler):
    def run(self, reactor: Any) -> None: ...

class AppProfiler:
    profilers: Any = ...
    profiler: Any = ...
    run: Any = ...
    def __init__(self, options: Any) -> None: ...

class AppLogger:
    def __init__(self, options: Any) -> None: ...
    def start(self, application: Any) -> None: ...
    def stop(self) -> None: ...

def fixPdb(): ...
def runReactorWithLogging(config: Any, oldstdout: Any, oldstderr: Any, profiler: Optional[Any] = ..., reactor: Optional[Any] = ...): ...
def getPassphrase(needed: Any): ...
def getSavePassphrase(needed: Any): ...

class ApplicationRunner:
    profilerFactory: Any = ...
    loggerFactory: Any = ...
    config: Any = ...
    profiler: Any = ...
    logger: Any = ...
    def __init__(self, config: Any) -> None: ...
    application: Any = ...
    def run(self) -> None: ...
    def startReactor(self, reactor: Any, oldstdout: Any, oldstderr: Any) -> None: ...
    def preApplication(self) -> None: ...
    def postApplication(self) -> None: ...
    def createOrGetApplication(self): ...

def getApplication(config: Any, passphrase: Any): ...

class ReactorSelectionMixin:
    compData: Any = ...
    messageOutput: Any = ...
    def opt_help_reactors(self) -> None: ...
    def opt_reactor(self, shortName: Any) -> None: ...
    opt_r: Any = ...

class ServerOptions(usage.Options, ReactorSelectionMixin):
    longdesc: str = ...
    optFlags: Any = ...
    optParameters: Any = ...
    compData: Any = ...
    stdout: Any = ...
    def __init__(self, *a: Any, **kw: Any) -> None: ...
    def opt_debug(self) -> None: ...
    opt_b: Any = ...
    def opt_spew(self) -> None: ...
    def parseOptions(self, options: Optional[Any] = ...) -> None: ...
    def postOptions(self) -> None: ...
    loadedPlugins: Any = ...
    def subCommands(self): ...
    subCommands: Any = ...

def run(runApp: Any, ServerOptions: Any) -> None: ...
def convertStyle(filein: Any, typein: Any, passphrase: Any, fileout: Any, typeout: Any, encrypt: Any) -> None: ...
def startApplication(application: Any, save: Any) -> None: ...
