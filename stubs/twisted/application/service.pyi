from typing import Any, Optional
from zope.interface import Interface

class IServiceMaker(Interface):
    tapname: Any = ...
    description: Any = ...
    options: Any = ...
    def makeService(options: Any) -> None: ...

class ServiceMaker:
    name: Any = ...
    module: Any = ...
    description: Any = ...
    tapname: Any = ...
    def __init__(self, name: Any, module: Any, description: Any, tapname: Any) -> None: ...
    def options(): ...
    options: Any = ...
    def makeService(): ...
    makeService: Any = ...

class IService(Interface):
    name: Any = ...
    running: Any = ...
    parent: Any = ...
    def setName(name: Any) -> None: ...
    def setServiceParent(parent: Any) -> None: ...
    def disownServiceParent() -> None: ...
    def startService() -> None: ...
    def stopService() -> None: ...
    def privilegedStartService() -> None: ...

class Service:
    running: int = ...
    name: Any = ...
    parent: Any = ...
    def setName(self, name: Any) -> None: ...
    def setServiceParent(self, parent: Any) -> None: ...
    def disownServiceParent(self): ...
    def privilegedStartService(self) -> None: ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...

class IServiceCollection(Interface):
    def getServiceNamed(name: Any) -> None: ...
    def __iter__() -> Any: ...
    def addService(service: Any) -> None: ...
    def removeService(service: Any) -> None: ...

class MultiService(Service):
    services: Any = ...
    namedServices: Any = ...
    parent: Any = ...
    def __init__(self) -> None: ...
    def privilegedStartService(self) -> None: ...
    def startService(self) -> None: ...
    def stopService(self): ...
    def getServiceNamed(self, name: Any): ...
    def __iter__(self) -> Any: ...
    def addService(self, service: Any) -> None: ...
    def removeService(self, service: Any): ...

class IProcess(Interface):
    processName: Any = ...
    uid: Any = ...
    gid: Any = ...

class Process:
    processName: Any = ...
    uid: Any = ...
    gid: Any = ...
    def __init__(self, uid: Optional[Any] = ..., gid: Optional[Any] = ...) -> None: ...

def Application(name: Any, uid: Optional[Any] = ..., gid: Optional[Any] = ...): ...
def loadApplication(filename: Any, kind: Any, passphrase: Optional[Any] = ...): ...
