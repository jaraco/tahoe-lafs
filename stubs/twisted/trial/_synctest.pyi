import unittest as pyunit
from twisted.internet.defer import ensureDeferred as ensureDeferred
from twisted.python import failure as failure, log as log, monkey as monkey
from twisted.python.deprecate import getDeprecationWarningString as getDeprecationWarningString, warnAboutFunction as warnAboutFunction
from twisted.python.reflect import fullyQualifiedName as fullyQualifiedName
from twisted.python.util import runWithWarningsSuppressed as runWithWarningsSuppressed
from twisted.trial import itrial as itrial, util as util
from typing import Any, Optional

SkipTest = pyunit.SkipTest

class FailTest(AssertionError): ...

class Todo:
    reason: Any = ...
    errors: Any = ...
    def __init__(self, reason: Any, errors: Optional[Any] = ...) -> None: ...
    def expected(self, failure: Any): ...

def makeTodo(value: Any): ...

class _Warning:
    message: Any = ...
    category: Any = ...
    filename: Any = ...
    lineno: Any = ...
    def __init__(self, message: Any, category: Any, filename: Any, lineno: Any) -> None: ...

class UnsupportedTrialFeature(Exception): ...

class PyUnitResultAdapter:
    original: Any = ...
    def __init__(self, original: Any) -> None: ...
    def startTest(self, method: Any) -> None: ...
    def stopTest(self, method: Any) -> None: ...
    def addFailure(self, test: Any, fail: Any) -> None: ...
    def addError(self, test: Any, error: Any) -> None: ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any, todo: Optional[Any] = ...) -> None: ...
    def addExpectedFailure(self, test: Any, error: Any) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def upDownError(self, method: Any, error: Any, warn: Any, printStatus: Any) -> None: ...

class _AssertRaisesContext:
    def __init__(self, testCase: Any, expected: Any) -> None: ...
    def __enter__(self): ...
    exception: Any = ...
    def __exit__(self, exceptionType: Any, exceptionValue: Any, traceback: Any): ...

class _Assertions(pyunit.TestCase):
    def fail(self, msg: Optional[Any] = ...) -> None: ...
    def assertFalse(self, condition: Any, msg: Optional[Any] = ...): ...
    assertNot: Any = ...
    failUnlessFalse: Any = ...
    failIf: Any = ...
    def assertTrue(self, condition: Any, msg: Optional[Any] = ...): ...
    assert_: Any = ...
    failUnlessTrue: Any = ...
    failUnless: Any = ...
    def assertRaises(self, exception: Any, f: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    failUnlessRaises: Any = ...
    def assertEqual(self, first: Any, second: Any, msg: Optional[Any] = ...): ...
    failUnlessEqual: Any = ...
    failUnlessEquals: Any = ...
    assertEquals: Any = ...
    def assertIs(self, first: Any, second: Any, msg: Optional[Any] = ...): ...
    failUnlessIdentical: Any = ...
    assertIdentical: Any = ...
    def assertIsNot(self, first: Any, second: Any, msg: Optional[Any] = ...): ...
    failIfIdentical: Any = ...
    assertNotIdentical: Any = ...
    def assertNotEqual(self, first: Any, second: Any, msg: Optional[Any] = ...): ...
    assertNotEquals: Any = ...
    failIfEquals: Any = ...
    failIfEqual: Any = ...
    def assertIn(self, containee: Any, container: Any, msg: Optional[Any] = ...): ...
    failUnlessIn: Any = ...
    def assertNotIn(self, containee: Any, container: Any, msg: Optional[Any] = ...): ...
    failIfIn: Any = ...
    def assertNotAlmostEqual(self, first: Any, second: Any, places: int = ..., msg: Optional[Any] = ...): ...
    assertNotAlmostEquals: Any = ...
    failIfAlmostEqual: Any = ...
    failIfAlmostEquals: Any = ...
    def assertAlmostEqual(self, first: Any, second: Any, places: int = ..., msg: Optional[Any] = ...): ...
    assertAlmostEquals: Any = ...
    failUnlessAlmostEqual: Any = ...
    failUnlessAlmostEquals: Any = ...
    def assertApproximates(self, first: Any, second: Any, tolerance: Any, msg: Optional[Any] = ...): ...
    failUnlessApproximates: Any = ...
    def assertSubstring(self, substring: Any, astring: Any, msg: Optional[Any] = ...): ...
    failUnlessSubstring: Any = ...
    def assertNotSubstring(self, substring: Any, astring: Any, msg: Optional[Any] = ...): ...
    failIfSubstring: Any = ...
    def assertWarns(self, category: Any, message: Any, filename: Any, f: Any, *args: Any, **kwargs: Any): ...
    failUnlessWarns: Any = ...
    def assertIsInstance(self, instance: Any, classOrTuple: Any, message: Optional[Any] = ...) -> None: ...
    failUnlessIsInstance: Any = ...
    def assertNotIsInstance(self, instance: Any, classOrTuple: Any) -> None: ...
    failIfIsInstance: Any = ...
    def successResultOf(self, deferred: Any): ...
    def failureResultOf(self, deferred: Any, *expectedExceptionTypes: Any): ...
    def assertNoResult(self, deferred: Any): ...
    def assertRegex(self, text: Any, regex: Any, msg: Optional[Any] = ...) -> None: ...

class _LogObserver:
    def __init__(self) -> None: ...
    def flushErrors(self, *errorTypes: Any): ...
    def getErrors(self): ...
    def gotEvent(self, event: Any) -> None: ...

class SynchronousTestCase(_Assertions):
    failureException: Any = ...
    def __init__(self, methodName: str = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    def shortDescription(self): ...
    def getSkip(self): ...
    def getTodo(self): ...
    def runTest(self) -> None: ...
    def run(self, result: Any) -> None: ...
    def addCleanup(self, f: Any, *args: Any, **kwargs: Any) -> None: ...
    def patch(self, obj: Any, attribute: Any, value: Any): ...
    def flushLoggedErrors(self, *errorTypes: Any): ...
    def flushWarnings(self, offendingFunctions: Optional[Any] = ...): ...
    def callDeprecated(self, version: Any, f: Any, *args: Any, **kwargs: Any): ...
    def mktemp(self): ...
