from twisted.trial.unittest import TestSuite as TestSuite
from typing import Any, Optional

def isPackage(module: Any): ...
def isPackageDirectory(dirname: Any): ...
def samefile(filename1: Any, filename2: Any): ...
def filenameToModule(fn: Any): ...

class DestructiveTestSuite(TestSuite):
    def run(self, result: Any): ...

NOT_IN_TEST: str

class LoggedSuite(TestSuite):
    def run(self, result: Any) -> None: ...

class TrialSuite(TestSuite):
    def __init__(self, tests: Any = ..., forceGarbageCollection: bool = ...) -> None: ...
    def run(self, result: Any) -> None: ...

def name(thing: Any): ...
def isTestCase(obj: Any): ...

class TestHolder:
    failureException: Any = ...
    description: Any = ...
    def __init__(self, description: Any) -> None: ...
    def __call__(self, result: Any): ...
    def id(self): ...
    def countTestCases(self): ...
    def run(self, result: Any) -> None: ...
    def shortDescription(self): ...

class ErrorHolder(TestHolder):
    error: Any = ...
    def __init__(self, description: Any, error: Any) -> None: ...
    def run(self, result: Any) -> None: ...

class TestLoader:
    methodPrefix: str = ...
    modulePrefix: str = ...
    suiteFactory: Any = ...
    sorter: Any = ...
    def __init__(self) -> None: ...
    def sort(self, xs: Any): ...
    def findTestClasses(self, module: Any): ...
    def findByName(self, _name: Any, recurse: bool = ...): ...
    def loadModule(self, module: Any): ...
    loadTestsFromModule: Any = ...
    def loadClass(self, klass: Any): ...
    loadTestsFromTestCase: Any = ...
    def getTestCaseNames(self, klass: Any): ...
    def loadMethod(self, method: Any) -> None: ...
    def loadPackage(self, package: Any, recurse: bool = ...): ...
    def loadDoctests(self, module: Any): ...
    def loadAnything(self, obj: Any, recurse: bool = ..., parent: Optional[Any] = ..., qualName: Optional[Any] = ...): ...
    def loadByName(self, name: Any, recurse: bool = ...): ...
    loadTestsFromName: Any = ...
    def loadByNames(self, names: Any, recurse: bool = ...): ...
    def loadFile(self, fileName: Any, recurse: bool = ...): ...

class TrialRunner:
    DEBUG: str = ...
    DRY_RUN: str = ...
    reporterFactory: Any = ...
    logfile: Any = ...
    mode: Any = ...
    stream: Any = ...
    tbformat: Any = ...
    rterrors: Any = ...
    uncleanWarnings: Any = ...
    workingDirectory: Any = ...
    debugger: Any = ...
    def __init__(self, reporterFactory: Any, mode: Optional[Any] = ..., logfile: str = ..., stream: Any = ..., profile: bool = ..., tracebackFormat: str = ..., realTimeErrors: bool = ..., uncleanWarnings: bool = ..., workingDirectory: Optional[Any] = ..., forceGarbageCollection: bool = ..., debugger: Optional[Any] = ..., exitFirst: bool = ...) -> None: ...
    def run(self, test: Any): ...
    def runUntilFailure(self, test: Any): ...
