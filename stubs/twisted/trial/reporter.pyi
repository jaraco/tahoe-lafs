import unittest as pyunit
from twisted.python import log as log, reflect as reflect
from twisted.python.compat import items as items
from twisted.python.components import proxyForInterface as proxyForInterface
from twisted.python.failure import Failure as Failure
from twisted.python.util import untilConcludes as untilConcludes
from twisted.trial import itrial as itrial, util as util
from typing import Any, Optional

class BrokenTestCaseWarning(Warning): ...

class SafeStream:
    original: Any = ...
    def __init__(self, original: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def write(self, *a: Any, **kw: Any): ...

class TestResult(pyunit.TestResult):
    skips: Any = ...
    expectedFailures: Any = ...
    unexpectedSuccesses: Any = ...
    successes: int = ...
    def __init__(self) -> None: ...
    def startTest(self, test: Any) -> None: ...
    def stopTest(self, test: Any) -> None: ...
    def addFailure(self, test: Any, fail: Any) -> None: ...
    def addError(self, test: Any, error: Any) -> None: ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any, todo: Optional[Any] = ...) -> None: ...
    def addExpectedFailure(self, test: Any, error: Any, todo: Optional[Any] = ...) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def wasSuccessful(self): ...
    def done(self) -> None: ...

class TestResultDecorator: ...

class UncleanWarningsReporterWrapper(TestResultDecorator):
    def addError(self, test: Any, error: Any) -> None: ...

class _ExitWrapper(TestResultDecorator):
    shouldStop: bool = ...
    def addError(self, *args: Any, **kwargs: Any): ...
    def addFailure(self, *args: Any, **kwargs: Any): ...

class _AdaptedReporter(TestResultDecorator):
    testAdapter: Any = ...
    def __init__(self, original: Any, testAdapter: Any) -> None: ...
    def addError(self, test: Any, error: Any): ...
    def addExpectedFailure(self, test: Any, failure: Any, todo: Optional[Any] = ...): ...
    def addFailure(self, test: Any, failure: Any): ...
    def addSkip(self, test: Any, skip: Any): ...
    def addUnexpectedSuccess(self, test: Any, todo: Optional[Any] = ...): ...
    def startTest(self, test: Any): ...
    def stopTest(self, test: Any): ...

class Reporter(TestResult):
    tbformat: Any = ...
    realtime: Any = ...
    def __init__(self, stream: Any = ..., tbformat: str = ..., realtime: bool = ..., publisher: Optional[Any] = ...) -> None: ...
    def startTest(self, test: Any) -> None: ...
    def addFailure(self, test: Any, fail: Any) -> None: ...
    def addError(self, test: Any, error: Any) -> None: ...
    def upDownError(self, method: Any, error: Any, warn: Any, printStatus: Any) -> None: ...
    def cleanupErrors(self, errs: Any) -> None: ...
    def done(self) -> None: ...

class MinimalReporter(Reporter): ...

class TextReporter(Reporter):
    def addSuccess(self, test: Any) -> None: ...
    def addError(self, *args: Any) -> None: ...
    def addFailure(self, *args: Any) -> None: ...
    def addSkip(self, *args: Any) -> None: ...
    def addExpectedFailure(self, *args: Any) -> None: ...
    def addUnexpectedSuccess(self, *args: Any) -> None: ...

class VerboseTextReporter(Reporter):
    def startTest(self, tm: Any) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def addError(self, *args: Any) -> None: ...
    def addFailure(self, *args: Any) -> None: ...
    def addSkip(self, *args: Any) -> None: ...
    def addExpectedFailure(self, *args: Any) -> None: ...
    def addUnexpectedSuccess(self, *args: Any) -> None: ...
    def stopTest(self, test: Any) -> None: ...

class TimingTextReporter(VerboseTextReporter):
    def stopTest(self, method: Any) -> None: ...

class _AnsiColorizer:
    stream: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def supported(cls, stream: Any = ...): ...
    supported: Any = ...
    def write(self, text: Any, color: Any) -> None: ...

class _Win32Colorizer:
    stream: Any = ...
    screenBuffer: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def supported(cls, stream: Any = ...): ...
    supported: Any = ...
    def write(self, text: Any, color: Any) -> None: ...

class _NullColorizer:
    stream: Any = ...
    def __init__(self, stream: Any) -> None: ...
    def supported(cls, stream: Any = ...): ...
    supported: Any = ...
    def write(self, text: Any, color: Any) -> None: ...

class SubunitReporter:
    def __init__(self, stream: Any = ..., tbformat: str = ..., realtime: bool = ..., publisher: Optional[Any] = ...) -> None: ...
    def done(self) -> None: ...
    def shouldStop(self): ...
    shouldStop: Any = ...
    def stop(self): ...
    def wasSuccessful(self): ...
    def startTest(self, test: Any): ...
    def stopTest(self, test: Any): ...
    def addSuccess(self, test: Any): ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addError(self, test: Any, err: Any): ...
    def addFailure(self, test: Any, err: Any): ...
    def addExpectedFailure(self, test: Any, failure: Any, todo: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any, todo: Optional[Any] = ...) -> None: ...

class TreeReporter(Reporter):
    currentLine: str = ...
    indent: str = ...
    columns: int = ...
    FAILURE: str = ...
    ERROR: str = ...
    TODO: str = ...
    SKIP: str = ...
    TODONE: str = ...
    SUCCESS: str = ...
    def __init__(self, stream: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def getDescription(self, test: Any): ...
    def addSuccess(self, test: Any) -> None: ...
    def addError(self, *args: Any) -> None: ...
    def addFailure(self, *args: Any) -> None: ...
    def addSkip(self, *args: Any) -> None: ...
    def addExpectedFailure(self, *args: Any) -> None: ...
    def addUnexpectedSuccess(self, *args: Any) -> None: ...
    def cleanupErrors(self, errs: Any) -> None: ...
    def upDownError(self, method: Any, error: Any, warn: Any, printStatus: Any) -> None: ...
    def startTest(self, test: Any) -> None: ...
    def endLine(self, message: Any, color: Any) -> None: ...
