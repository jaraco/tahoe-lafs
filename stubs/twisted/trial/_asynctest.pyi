from twisted.internet import defer as defer, utils as utils
from twisted.python import failure as failure
from twisted.trial import itrial as itrial, util as util
from twisted.trial._synctest import FailTest as FailTest, SkipTest as SkipTest, SynchronousTestCase as SynchronousTestCase
from typing import Any

class TestCase(SynchronousTestCase):
    def __init__(self, methodName: str = ...) -> None: ...
    def assertFailure(self, deferred: Any, *expectedFailures: Any): ...
    failUnlessFailure: Any = ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def deferSetUp(self, ignored: Any, result: Any): ...
    def deferTestMethod(self, ignored: Any, result: Any): ...
    def deferTearDown(self, ignored: Any, result: Any): ...
    def deferRunCleanups(self, ignored: Any, result: Any): ...
    def addCleanup(self, f: Any, *args: Any, **kwargs: Any): ...
    def getSuppress(self): ...
    def getTimeout(self): ...
