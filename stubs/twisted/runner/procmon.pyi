from twisted.application import service as service
from twisted.internet import error as error, protocol as protocol
from twisted.logger import Logger as Logger
from twisted.protocols import basic as basic
from twisted.python import deprecate as deprecate
from typing import Any, Optional

class _Process:
    args: Any = ...
    uid: Any = ...
    gid: Any = ...
    env: Any = ...
    cwd: Any = ...
    def toTuple(self): ...
    def __init__(self, args: Any, uid: Any, gid: Any, env: Any, cwd: Any) -> None: ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class DummyTransport:
    disconnecting: int = ...

transport: Any

class LineLogger(basic.LineReceiver):
    tag: Any = ...
    stream: Any = ...
    delimiter: bytes = ...
    service: Any = ...
    def lineReceived(self, line: Any) -> None: ...

class LoggingProtocol(protocol.ProcessProtocol):
    service: Any = ...
    name: Any = ...
    def connectionMade(self) -> None: ...
    def outReceived(self, data: Any) -> None: ...
    def errReceived(self, data: Any) -> None: ...
    def processEnded(self, reason: Any) -> None: ...
    @property
    def output(self): ...
    @property
    def empty(self): ...

class ProcessMonitor(service.Service):
    threshold: int = ...
    killTime: int = ...
    minRestartDelay: int = ...
    maxRestartDelay: int = ...
    log: Any = ...
    protocols: Any = ...
    delay: Any = ...
    timeStarted: Any = ...
    murder: Any = ...
    restart: Any = ...
    def __init__(self, reactor: Any = ...) -> None: ...
    def processes(self): ...
    def addProcess(self, name: Any, args: Any, uid: Optional[Any] = ..., gid: Optional[Any] = ..., env: Any = ..., cwd: Optional[Any] = ...) -> None: ...
    def removeProcess(self, name: Any) -> None: ...
    def startService(self) -> None: ...
    def stopService(self) -> None: ...
    def connectionLost(self, name: Any) -> None: ...
    def startProcess(self, name: Any) -> None: ...
    def stopProcess(self, name: Any) -> None: ...
    def restartAll(self) -> None: ...
