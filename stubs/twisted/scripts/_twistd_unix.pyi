from twisted import copyright as copyright, logger as logger
from twisted.application import app as app, service as service
from twisted.internet.interfaces import IReactorDaemonize as IReactorDaemonize
from twisted.python import log as log, logfile as logfile, usage as usage
from twisted.python.runtime import platformType as platformType
from twisted.python.util import gidFromString as gidFromString, switchUID as switchUID, uidFromString as uidFromString, untilConcludes as untilConcludes
from typing import Any

class ServerOptions(app.ServerOptions):
    synopsis: str = ...
    optFlags: Any = ...
    optParameters: Any = ...
    compData: Any = ...
    def opt_version(self) -> None: ...
    def postOptions(self) -> None: ...

def checkPID(pidfile: Any) -> None: ...

class UnixAppLogger(app.AppLogger):
    def __init__(self, options: Any) -> None: ...

def launchWithName(name: Any) -> None: ...

class UnixApplicationRunner(app.ApplicationRunner):
    loggerFactory: Any = ...
    oldstdout: Any = ...
    oldstderr: Any = ...
    def preApplication(self) -> None: ...
    def postApplication(self) -> None: ...
    def removePID(self, pidfile: Any) -> None: ...
    def setupEnvironment(self, chroot: Any, rundir: Any, nodaemon: Any, umask: Any, pidfile: Any) -> None: ...
    def daemonize(self, reactor: Any): ...
    def shedPrivileges(self, euid: Any, uid: Any, gid: Any) -> None: ...
    def startApplication(self, application: Any) -> None: ...
