from twisted import plugin as plugin
from twisted.application import app as app
from twisted.internet import defer as defer
from twisted.python import failure as failure, reflect as reflect, usage as usage
from twisted.python.compat import long as long
from twisted.python.filepath import FilePath as FilePath
from twisted.python.reflect import namedModule as namedModule
from twisted.trial import itrial as itrial, reporter as reporter, runner as runner
from typing import Any

TBFORMAT_MAP: Any

def loadLocalVariables(filename: Any): ...
def getTestModules(filename: Any): ...
def isTestFile(filename: Any): ...

class _BasicOptions:
    longdesc: str = ...
    optFlags: Any = ...
    optParameters: Any = ...
    compData: Any = ...
    fallbackReporter: Any = ...
    tracer: Any = ...
    def __init__(self) -> None: ...
    def getSynopsis(self): ...
    def coverdir(self): ...
    def opt_coverage(self) -> None: ...
    def opt_testmodule(self, filename: Any) -> None: ...
    def opt_spew(self) -> None: ...
    def opt_help_orders(self) -> None: ...
    def opt_help_reporters(self) -> None: ...
    def opt_disablegc(self) -> None: ...
    def opt_tbformat(self, opt: Any) -> None: ...
    def opt_recursionlimit(self, arg: Any) -> None: ...
    def opt_random(self, option: Any) -> None: ...
    def opt_without_module(self, option: Any) -> None: ...
    def parseArgs(self, *args: Any) -> None: ...
    def postOptions(self) -> None: ...

class Options(_BasicOptions, usage.Options, app.ReactorSelectionMixin):
    optFlags: Any = ...
    optParameters: Any = ...
    compData: Any = ...
    fallbackReporter: Any = ...
    extra: Any = ...
    tracer: Any = ...
    def opt_jobs(self, number: Any) -> None: ...
    def postOptions(self) -> None: ...

class _DebuggerNotFound(Exception): ...

def run() -> None: ...
