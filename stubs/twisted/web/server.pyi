from twisted.python import components
from twisted.spread.pb import Copyable
from twisted.web import http
from typing import Any, List, Optional

NOT_DONE_YET: int
date_time_string = http.datetimeToString
string_date_time = http.stringToDatetime
supportedMethods: Any

class Request(Copyable, http.Request, components.Componentized):
    defaultContentType: bytes = ...
    site: Any = ...
    appRootURL: Any = ...
    prepath: Optional[List[bytes]] = ...
    postpath: Optional[bytes] = ...
    __pychecker__: str = ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def getStateToCopyFor(self, issuer: Any): ...
    def sibLink(self, name: Any): ...
    def childLink(self, name: Any): ...
    content: Any = ...
    def gotLength(self, length: Any) -> None: ...
    def process(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def finish(self): ...
    method: bytes = ...
    def render(self, resrc: Any) -> None: ...
    def processingFailed(self, reason: Any): ...
    def view_write(self, issuer: Any, data: Any) -> None: ...
    def view_finish(self, issuer: Any) -> None: ...
    def view_addCookie(self, issuer: Any, k: Any, v: Any, **kwargs: Any) -> None: ...
    def view_setHeader(self, issuer: Any, k: Any, v: Any) -> None: ...
    def view_setLastModified(self, issuer: Any, when: Any) -> None: ...
    def view_setETag(self, issuer: Any, tag: Any) -> None: ...
    def view_setResponseCode(self, issuer: Any, code: Any, message: Optional[Any] = ...) -> None: ...
    def view_registerProducer(self, issuer: Any, producer: Any, streaming: Any) -> None: ...
    def view_unregisterProducer(self, issuer: Any) -> None: ...
    @property
    def session(self): ...
    def getSession(self, sessionInterface: Optional[Any] = ..., forceNotSecure: bool = ...): ...
    def prePathURL(self): ...
    def URLPath(self): ...
    def rememberRootURL(self) -> None: ...
    def getRootURL(self): ...

class GzipEncoderFactory:
    compressLevel: int = ...
    def encoderForRequest(self, request: Any): ...

class _GzipEncoder:
    def __init__(self, compressLevel: Any, request: Any) -> None: ...
    def encode(self, data: Any): ...
    def finish(self): ...

class _RemoteProducerWrapper:
    resumeProducing: Any = ...
    pauseProducing: Any = ...
    stopProducing: Any = ...
    def __init__(self, remote: Any) -> None: ...

class Session(components.Componentized):
    sessionTimeout: int = ...
    site: Any = ...
    uid: Any = ...
    expireCallbacks: Any = ...
    sessionNamespaces: Any = ...
    def __init__(self, site: Any, uid: Any, reactor: Optional[Any] = ...) -> None: ...
    def startCheckingExpiration(self) -> None: ...
    def notifyOnExpire(self, callback: Any) -> None: ...
    def expire(self) -> None: ...
    lastModified: Any = ...
    def touch(self) -> None: ...

version: Any

class Site(http.HTTPFactory):
    counter: int = ...
    requestFactory: Any = ...
    displayTracebacks: bool = ...
    sessionFactory: Any = ...
    sessionCheckTime: int = ...
    sessions: Any = ...
    resource: Any = ...
    def __init__(self, resource: Any, requestFactory: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def makeSession(self): ...
    def getSession(self, uid: Any): ...
    def buildProtocol(self, addr: Any): ...
    isLeaf: int = ...
    def render(self, request: Any) -> None: ...
    def getChildWithDefault(self, pathEl: Any, request: Any): ...
    def getResourceFor(self, request: Any): ...
    def acceptableProtocols(self): ...
