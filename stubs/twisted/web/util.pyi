from twisted.web import resource
from twisted.web.template import Element
from typing import Any, Optional

def redirectTo(URL: bytes, request: Any) -> bytes: ...

class Redirect(resource.Resource):
    isLeaf: bool = ...
    url: Any = ...
    def __init__(self, url: bytes) -> None: ...
    def render(self, request: Any): ...
    def getChild(self, name: Any, request: Any): ...

class ChildRedirector(Redirect):
    isLeaf: bool = ...
    def __init__(self, url: Any) -> None: ...
    def getChild(self, name: Any, request: Any): ...

class ParentRedirect(resource.Resource):
    isLeaf: int = ...
    def render(self, request: Any) -> bytes: ...

class DeferredResource(resource.Resource):
    isLeaf: int = ...
    d: Any = ...
    def __init__(self, d: Any) -> None: ...
    def getChild(self, name: Any, request: Any): ...
    def render(self, request: Any): ...

class _SourceLineElement(Element):
    number: Any = ...
    source: Any = ...
    def __init__(self, loader: Any, number: Any, source: Any) -> None: ...
    def sourceLine(self, request: Any, tag: Any): ...
    def lineNumber(self, request: Any, tag: Any): ...

class _SourceFragmentElement(Element):
    frame: Any = ...
    def __init__(self, loader: Any, frame: Any) -> None: ...
    def sourceLines(self, request: Any, tag: Any) -> None: ...

class _FrameElement(Element):
    frame: Any = ...
    def __init__(self, loader: Any, frame: Any) -> None: ...
    def filename(self, request: Any, tag: Any): ...
    def lineNumber(self, request: Any, tag: Any): ...
    def function(self, request: Any, tag: Any): ...
    def source(self, request: Any, tag: Any): ...

class _StackElement(Element):
    stackFrames: Any = ...
    def __init__(self, loader: Any, stackFrames: Any) -> None: ...
    def frames(self, request: Any, tag: Any): ...

class FailureElement(Element):
    loader: Any = ...
    failure: Any = ...
    def __init__(self, failure: Any, loader: Optional[Any] = ...) -> None: ...
    def type(self, request: Any, tag: Any): ...
    def value(self, request: Any, tag: Any): ...
    def traceback(self, request: Any, tag: Any): ...

def formatFailure(myFailure: Any): ...
