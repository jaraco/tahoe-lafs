from twisted.internet import reactor as reactor
from twisted.internet.protocol import ClientFactory as ClientFactory
from twisted.web.http import HTTPChannel as HTTPChannel, HTTPClient as HTTPClient, Request as Request
from twisted.web.resource import Resource as Resource
from twisted.web.server import NOT_DONE_YET as NOT_DONE_YET
from typing import Any

class ProxyClient(HTTPClient):
    father: Any = ...
    command: Any = ...
    rest: Any = ...
    headers: Any = ...
    data: Any = ...
    def __init__(self, command: Any, rest: Any, version: Any, headers: Any, data: Any, father: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def handleStatus(self, version: Any, code: Any, message: Any) -> None: ...
    def handleHeader(self, key: Any, value: Any) -> None: ...
    def handleResponsePart(self, buffer: Any) -> None: ...
    def handleResponseEnd(self) -> None: ...

class ProxyClientFactory(ClientFactory):
    protocol: Any = ...
    father: Any = ...
    command: Any = ...
    rest: Any = ...
    headers: Any = ...
    data: Any = ...
    version: Any = ...
    def __init__(self, command: Any, rest: Any, version: Any, headers: Any, data: Any, father: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def clientConnectionFailed(self, connector: Any, reason: Any) -> None: ...

class ProxyRequest(Request):
    protocols: Any = ...
    ports: Any = ...
    reactor: Any = ...
    def __init__(self, channel: Any, queued: Any = ..., reactor: Any = ...) -> None: ...
    def process(self) -> None: ...

class Proxy(HTTPChannel):
    requestFactory: Any = ...

class ReverseProxyRequest(Request):
    proxyClientFactoryClass: Any = ...
    reactor: Any = ...
    def __init__(self, channel: Any, queued: Any = ..., reactor: Any = ...) -> None: ...
    def process(self) -> None: ...

class ReverseProxy(HTTPChannel):
    requestFactory: Any = ...

class ReverseProxyResource(Resource):
    proxyClientFactoryClass: Any = ...
    host: Any = ...
    port: Any = ...
    path: Any = ...
    reactor: Any = ...
    def __init__(self, host: Any, port: Any, path: Any, reactor: Any = ...) -> None: ...
    def getChild(self, path: Any, request: Any): ...
    def render(self, request: Any): ...
