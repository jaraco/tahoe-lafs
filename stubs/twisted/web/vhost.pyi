from twisted.python import roots as roots
from twisted.web import resource as resource
from typing import Any

class VirtualHostCollection(roots.Homogenous):
    entityType: Any = ...
    nvh: Any = ...
    def __init__(self, nvh: Any) -> None: ...
    def listStaticEntities(self): ...
    def getStaticEntity(self, name: Any): ...
    def reallyPutEntity(self, name: Any, entity: Any) -> None: ...
    def delEntity(self, name: Any) -> None: ...

class NameVirtualHost(resource.Resource):
    default: Any = ...
    hosts: Any = ...
    def __init__(self) -> None: ...
    def listStaticEntities(self): ...
    def getStaticEntity(self, name: Any): ...
    def addHost(self, name: Any, resrc: Any) -> None: ...
    def removeHost(self, name: Any) -> None: ...
    def render(self, request: Any): ...
    def getChild(self, path: Any, request: Any): ...

class _HostResource(resource.Resource):
    def getChild(self, path: Any, request: Any): ...

class VHostMonsterResource(resource.Resource):
    def getChild(self, path: Any, request: Any): ...
