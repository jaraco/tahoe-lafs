from twisted import copyright as copyright
from twisted.python.compat import NativeStringIO as NativeStringIO, execfile as execfile, networkString as networkString
from twisted.web import http as http, resource as resource, server as server, static as static, util as util
from typing import Any, Optional

rpyNoResource: str

class AlreadyCached(Exception): ...

class CacheScanner:
    path: Any = ...
    registry: Any = ...
    doCache: int = ...
    def __init__(self, path: Any, registry: Any) -> None: ...
    def cache(self) -> None: ...
    def recache(self) -> None: ...

noRsrc: Any

def ResourceScript(path: Any, registry: Any): ...
def ResourceTemplate(path: Any, registry: Any): ...

class ResourceScriptWrapper(resource.Resource):
    path: Any = ...
    registry: Any = ...
    def __init__(self, path: Any, registry: Optional[Any] = ...) -> None: ...
    def render(self, request: Any): ...
    def getChildWithDefault(self, path: Any, request: Any): ...

class ResourceScriptDirectory(resource.Resource):
    path: Any = ...
    registry: Any = ...
    def __init__(self, pathname: Any, registry: Optional[Any] = ...) -> None: ...
    def getChild(self, path: Any, request: Any): ...
    def render(self, request: Any): ...

class PythonScript(resource.Resource):
    isLeaf: bool = ...
    filename: Any = ...
    registry: Any = ...
    def __init__(self, filename: Any, registry: Any) -> None: ...
    def render(self, request: Any): ...
