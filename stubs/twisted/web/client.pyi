from twisted.internet import protocol
from twisted.web import error, http
from twisted.web._newclient import RequestGenerationFailed as RequestGenerationFailed, RequestTransmissionFailed as RequestTransmissionFailed, Response as Response, ResponseDone as ResponseDone, ResponseFailed as ResponseFailed, ResponseNeverReceived as ResponseNeverReceived
from typing import Any, Optional

class PartialDownloadError(error.Error): ...

class HTTPPageGetter(http.HTTPClient):
    quietLoss: int = ...
    followRedirect: bool = ...
    failed: int = ...
    headers: Any = ...
    def connectionMade(self) -> None: ...
    def handleHeader(self, key: Any, value: Any) -> None: ...
    def handleStatus(self, version: Any, status: Any, message: Any) -> None: ...
    def handleEndHeaders(self) -> None: ...
    def handleStatus_200(self) -> None: ...
    handleStatus_201: Any = ...
    handleStatus_202: Any = ...
    def handleStatusDefault(self) -> None: ...
    def handleStatus_301(self) -> None: ...
    def handleStatus_302(self) -> None: ...
    def handleStatus_303(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def handleResponse(self, response: Any) -> None: ...
    def timeout(self) -> None: ...

class HTTPPageDownloader(HTTPPageGetter):
    transmittingPage: int = ...
    def handleStatus_200(self, partialContent: int = ...) -> None: ...
    def handleStatus_206(self) -> None: ...
    def handleResponsePart(self, data: Any) -> None: ...
    def handleResponseEnd(self) -> None: ...

class HTTPClientFactory(protocol.ClientFactory):
    protocol: Any = ...
    url: Any = ...
    scheme: Any = ...
    host: bytes = ...
    port: Any = ...
    path: Any = ...
    followRedirect: Any = ...
    redirectLimit: Any = ...
    timeout: Any = ...
    agent: Any = ...
    afterFoundGet: Any = ...
    cookies: Any = ...
    headers: Any = ...
    postdata: Any = ...
    method: Any = ...
    waiting: int = ...
    deferred: Any = ...
    response_headers: Any = ...
    def __init__(self, url: Any, method: bytes = ..., postdata: Optional[Any] = ..., headers: Optional[Any] = ..., agent: bytes = ..., timeout: int = ..., cookies: Optional[Any] = ..., followRedirect: bool = ..., redirectLimit: int = ..., afterFoundGet: bool = ...) -> None: ...
    def setURL(self, url: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...
    def gotHeaders(self, headers: Any) -> None: ...
    def gotStatus(self, version: Any, status: Any, message: Any) -> None: ...
    def page(self, page: Any) -> None: ...
    def noPage(self, reason: Any) -> None: ...
    def clientConnectionFailed(self, _: Any, reason: Any) -> None: ...

class HTTPDownloader(HTTPClientFactory):
    protocol: Any = ...
    value: Any = ...
    requestedPartial: int = ...
    fileName: Any = ...
    file: Any = ...
    def __init__(self, url: Any, fileOrName: Any, method: bytes = ..., postdata: Optional[Any] = ..., headers: Optional[Any] = ..., agent: bytes = ..., supportPartial: bool = ..., timeout: int = ..., cookies: Optional[Any] = ..., followRedirect: bool = ..., redirectLimit: int = ..., afterFoundGet: bool = ...) -> None: ...
    def gotHeaders(self, headers: Any) -> None: ...
    def openFile(self, partialContent: Any): ...
    def pageStart(self, partialContent: Any) -> None: ...
    def pagePart(self, data: Any) -> None: ...
    waiting: int = ...
    def noPage(self, reason: Any) -> None: ...
    def pageEnd(self) -> None: ...

class URI:
    scheme: Any = ...
    netloc: Any = ...
    host: Any = ...
    port: Any = ...
    path: Any = ...
    params: Any = ...
    query: Any = ...
    fragment: Any = ...
    def __init__(self, scheme: Any, netloc: Any, host: Any, port: Any, path: Any, params: Any, query: Any, fragment: Any) -> None: ...
    @classmethod
    def fromBytes(cls, uri: Any, defaultPort: Optional[Any] = ...): ...
    def toBytes(self): ...
    @property
    def originForm(self): ...

def getPage(url: Any, contextFactory: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
def downloadPage(url: Any, file: Any, contextFactory: Optional[Any] = ..., *args: Any, **kwargs: Any): ...

class WebClientContextFactory:
    def getContext(self, hostname: Any, port: Any): ...

class BrowserLikePolicyForHTTPS:
    def __init__(self, trustRoot: Optional[Any] = ...) -> None: ...
    def creatorForNetloc(self, hostname: Any, port: Any): ...

class HostnameCachingHTTPSPolicy:
    def __init__(self, policyforHTTPS: Any, cacheSize: int = ...) -> None: ...
    def creatorForNetloc(self, hostname: Any, port: Any): ...

class _ContextFactoryWithContext:
    def __init__(self, context: Any) -> None: ...
    def getContext(self): ...

class _DeprecatedToCurrentPolicyForHTTPS:
    def __init__(self, webContextFactory: Any) -> None: ...
    def creatorForNetloc(self, hostname: Any, port: Any): ...

class FileBodyProducer:
    length: Any = ...
    def __init__(self, inputFile: Any, cooperator: Any = ..., readSize: Any = ...) -> None: ...
    def stopProducing(self) -> None: ...
    def startProducing(self, consumer: Any): ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...

class _HTTP11ClientFactory(protocol.Factory):
    def __init__(self, quiescentCallback: Any, metadata: Any) -> None: ...
    def buildProtocol(self, addr: Any): ...

class _RetryingHTTP11ClientProtocol:
    def __init__(self, clientProtocol: Any, newConnection: Any) -> None: ...
    def request(self, request: Any): ...

class HTTPConnectionPool:
    maxPersistentPerHost: int = ...
    cachedConnectionTimeout: int = ...
    retryAutomatically: bool = ...
    persistent: Any = ...
    def __init__(self, reactor: Any, persistent: bool = ...) -> None: ...
    def getConnection(self, key: Any, endpoint: Any): ...
    def closeCachedConnections(self): ...

class _AgentBase:
    def __init__(self, reactor: Any, pool: Any) -> None: ...

class _StandardEndpointFactory:
    def __init__(self, reactor: Any, contextFactory: Any, connectTimeout: Any, bindAddress: Any) -> None: ...
    def endpointForURI(self, uri: Any): ...

class Agent(_AgentBase):
    def __init__(self, reactor: Any, contextFactory: Any = ..., connectTimeout: Optional[Any] = ..., bindAddress: Optional[Any] = ..., pool: Optional[Any] = ...) -> None: ...
    @classmethod
    def usingEndpointFactory(cls, reactor: Any, endpointFactory: Any, pool: Optional[Any] = ...): ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...

class ProxyAgent(_AgentBase):
    def __init__(self, endpoint: Any, reactor: Optional[Any] = ..., pool: Optional[Any] = ...) -> None: ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...

class _FakeUrllib2Request:
    uri: Any = ...
    headers: Any = ...
    type: Any = ...
    host: Any = ...
    origin_req_host: Any = ...
    unverifiable: Any = ...
    def __init__(self, uri: Any): ...
    def has_header(self, header: Any): ...
    def add_unredirected_header(self, name: Any, value: Any) -> None: ...
    def get_full_url(self): ...
    def get_header(self, name: Any, default: Optional[Any] = ...): ...
    def get_host(self): ...
    def get_type(self): ...
    def is_unverifiable(self): ...

class _FakeUrllib2Response:
    response: Any = ...
    def __init__(self, response: Any) -> None: ...
    def info(self): ...

class CookieAgent:
    cookieJar: Any = ...
    def __init__(self, agent: Any, cookieJar: Any) -> None: ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...

class GzipDecoder:
    original: Any = ...
    length: Any = ...
    def __init__(self, response: Any) -> None: ...
    def deliverBody(self, protocol: Any) -> None: ...

class _GzipProtocol:
    original: Any = ...
    def __init__(self, protocol: Any, response: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

class ContentDecoderAgent:
    def __init__(self, agent: Any, decoders: Any) -> None: ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...

class RedirectAgent:
    def __init__(self, agent: Any, redirectLimit: int = ...) -> None: ...
    def request(self, method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...): ...

class BrowserLikeRedirectAgent(RedirectAgent): ...

class _ReadBodyProtocol(protocol.Protocol):
    deferred: Any = ...
    status: Any = ...
    message: Any = ...
    dataBuffer: Any = ...
    def __init__(self, status: Any, message: Any, deferred: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

def readBody(response: Any): ...
