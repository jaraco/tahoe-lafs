from twisted.internet.defer import CancelledError as CancelledError, Deferred as Deferred, fail as fail, maybeDeferred as maybeDeferred, succeed as succeed
from twisted.internet.error import ConnectionDone as ConnectionDone
from twisted.internet.interfaces import IConsumer as IConsumer, IPushProducer as IPushProducer
from twisted.internet.protocol import Protocol as Protocol
from twisted.logger import Logger as Logger
from twisted.protocols.basic import LineReceiver as LineReceiver
from twisted.python.compat import networkString as networkString
from twisted.python.components import proxyForInterface as proxyForInterface
from twisted.python.failure import Failure as Failure
from twisted.python.reflect import fullyQualifiedName as fullyQualifiedName
from twisted.web.http import NOT_MODIFIED as NOT_MODIFIED, NO_CONTENT as NO_CONTENT, PotentialDataLoss as PotentialDataLoss
from twisted.web.http_headers import Headers as Headers
from twisted.web.iweb import IClientRequest as IClientRequest, IResponse as IResponse, UNKNOWN_LENGTH as UNKNOWN_LENGTH
from typing import Any, Optional

__metaclass__ = type
STATUS: str
HEADER: str
BODY: str
DONE: str

class BadHeaders(Exception): ...
class ExcessWrite(Exception): ...

class ParseError(Exception):
    data: Any = ...
    def __init__(self, reason: Any, data: Any) -> None: ...

class BadResponseVersion(ParseError): ...

class _WrapperException(Exception):
    reasons: Any = ...
    def __init__(self, reasons: Any) -> None: ...

class RequestGenerationFailed(_WrapperException): ...
class RequestTransmissionFailed(_WrapperException): ...
class ConnectionAborted(Exception): ...
class WrongBodyLength(Exception): ...
class ResponseDone(Exception): ...

class ResponseFailed(_WrapperException):
    response: Any = ...
    def __init__(self, reasons: Any, response: Optional[Any] = ...) -> None: ...

class ResponseNeverReceived(ResponseFailed): ...
class RequestNotSent(Exception): ...

class HTTPParser(LineReceiver):
    delimiter: bytes = ...
    CONNECTION_CONTROL_HEADERS: Any = ...
    headers: Any = ...
    connHeaders: Any = ...
    state: Any = ...
    def connectionMade(self) -> None: ...
    bodyDecoder: Any = ...
    def switchToBodyMode(self, decoder: Any) -> None: ...
    def lineReceived(self, line: Any) -> None: ...
    def rawDataReceived(self, data: Any) -> None: ...
    def isConnectionControlHeader(self, name: Any): ...
    def statusReceived(self, status: Any) -> None: ...
    def headerReceived(self, name: Any, value: Any) -> None: ...
    def allHeadersReceived(self) -> None: ...

class HTTPClientParser(HTTPParser):
    NO_BODY_CODES: Any = ...
    bodyDecoder: Any = ...
    request: Any = ...
    finisher: Any = ...
    def __init__(self, request: Any, finisher: Any) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def parseVersion(self, strversion: Any): ...
    response: Any = ...
    def statusReceived(self, status: Any) -> None: ...
    def isConnectionControlHeader(self, name: Any): ...
    def allHeadersReceived(self): ...
    def connectionLost(self, reason: Any) -> None: ...

class Request:
    method: Any = ...
    uri: Any = ...
    headers: Any = ...
    bodyProducer: Any = ...
    persistent: Any = ...
    def __init__(self, method: Any, uri: Any, headers: Any, bodyProducer: Any, persistent: bool = ...) -> None: ...
    @property
    def absoluteURI(self): ...
    def writeTo(self, transport: Any): ...
    def stopWriting(self) -> None: ...

class LengthEnforcingConsumer:
    def __init__(self, producer: Any, consumer: Any, finished: Any) -> None: ...
    def write(self, bytes: Any) -> None: ...

def makeStatefulDispatcher(name: Any, template: Any): ...

class Response:
    length: Any = ...
    version: Any = ...
    code: Any = ...
    phrase: Any = ...
    headers: Any = ...
    request: Any = ...
    previousResponse: Any = ...
    def __init__(self, version: Any, code: Any, phrase: Any, headers: Any, _transport: Any) -> None: ...
    def setPreviousResponse(self, previousResponse: Any) -> None: ...
    def deliverBody(self, protocol: Any) -> None: ...
    deliverBody: Any = ...

class ChunkedEncoder:
    transport: Any = ...
    def __init__(self, transport: Any) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def unregisterProducer(self) -> None: ...

class TransportProxyProducer:
    disconnecting: bool = ...
    def __init__(self, producer: Any) -> None: ...
    def stopProxying(self) -> None: ...
    def stopProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def loseConnection(self) -> None: ...

class HTTP11ClientProtocol(Protocol):
    def __init__(self, quiescentCallback: Any = ...) -> None: ...
    @property
    def state(self): ...
    def request(self, request: Any): ...
    def dataReceived(self, bytes: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    connectionLost: Any = ...
    def abort(self): ...
