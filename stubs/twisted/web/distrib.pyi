from twisted.internet import address as address, reactor as reactor
from twisted.logger import Logger as Logger
from twisted.persisted import styles as styles
from twisted.spread import pb as pb
from twisted.spread.banana import SIZE_LIMIT as SIZE_LIMIT
from twisted.web import http as http, resource as resource, server as server, static as static, util as util
from twisted.web.http_headers import Headers as Headers
from typing import Any, Optional

class _ReferenceableProducerWrapper(pb.Referenceable):
    producer: Any = ...
    def __init__(self, producer: Any) -> None: ...
    def remote_resumeProducing(self) -> None: ...
    def remote_pauseProducing(self) -> None: ...
    def remote_stopProducing(self) -> None: ...

class Request(pb.RemoteCopy, server.Request):
    content: Any = ...
    finish: Any = ...
    setHeader: Any = ...
    addCookie: Any = ...
    setETag: Any = ...
    setResponseCode: Any = ...
    setLastModified: Any = ...
    def setCopyableState(self, state: Any): ...
    def write(self, bytes: Any) -> None: ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def fail(self, failure: Any) -> None: ...

class Issue:
    request: Any = ...
    def __init__(self, request: Any) -> None: ...
    def finished(self, result: Any) -> None: ...
    def failed(self, failure: Any) -> None: ...

class ResourceSubscription(resource.Resource):
    isLeaf: int = ...
    waiting: int = ...
    host: Any = ...
    port: Any = ...
    pending: Any = ...
    publisher: Any = ...
    def __init__(self, host: Any, port: Any) -> None: ...
    def connected(self, publisher: Any) -> None: ...
    def notConnected(self, msg: Any) -> None: ...
    def booted(self) -> None: ...
    def render(self, request: Any): ...

class ResourcePublisher(pb.Root, styles.Versioned):
    site: Any = ...
    def __init__(self, site: Any) -> None: ...
    persistenceVersion: int = ...
    def upgradeToVersion2(self) -> None: ...
    def getPerspectiveNamed(self, name: Any): ...
    def remote_request(self, request: Any): ...

class UserDirectory(resource.Resource):
    userDirName: str = ...
    userSocketName: str = ...
    template: str = ...
    def __init__(self, userDatabase: Optional[Any] = ...) -> None: ...
    def render_GET(self, request: Any): ...
    def getChild(self, name: Any, request: Any): ...
