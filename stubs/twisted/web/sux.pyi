from twisted.internet.protocol import Protocol as Protocol
from twisted.python.reflect import prefixedMethodNames as prefixedMethodNames
from typing import Any

BEGIN_HANDLER: int
DO_HANDLER: int
END_HANDLER: int
identChars: str
lenientIdentChars: Any

def nop(*args: Any, **kw: Any) -> None: ...
def unionlist(*args: Any): ...
def zipfndict(*args: Any, **kw: Any): ...
def prefixedMethodClassDict(clazz: Any, prefix: Any): ...
def prefixedMethodObjDict(obj: Any, prefix: Any): ...

class ParseError(Exception):
    filename: Any = ...
    line: Any = ...
    col: Any = ...
    message: Any = ...
    def __init__(self, filename: Any, line: Any, col: Any, message: Any) -> None: ...

class XMLParser(Protocol):
    state: Any = ...
    encodings: Any = ...
    filename: str = ...
    beExtremelyLenient: int = ...
    lineno: int = ...
    colno: int = ...
    def connectionMade(self) -> None: ...
    def saveMark(self): ...
    def maybeBodyData(self): ...
    def dataReceived(self, data: Any): ...
    def connectionLost(self, reason: Any) -> None: ...
    def do_begin(self, byte: Any): ...
    commentbuf: str = ...
    def begin_comment(self, byte: Any) -> None: ...
    def do_comment(self, byte: Any): ...
    tagName: str = ...
    tagAttributes: Any = ...
    termtag: int = ...
    endtag: int = ...
    def begin_tagstart(self, byte: Any) -> None: ...
    bodydata: str = ...
    def do_tagstart(self, byte: Any): ...
    def begin_unentity(self, byte: Any) -> None: ...
    def do_unentity(self, byte: Any): ...
    def end_unentity(self) -> None: ...
    cdatabuf: Any = ...
    def begin_expectcdata(self, byte: Any) -> None: ...
    def do_expectcdata(self, byte: Any): ...
    def do_cdata(self, byte: Any): ...
    def end_cdata(self) -> None: ...
    def do_attrs(self, byte: Any): ...
    doctype: Any = ...
    def begin_doctype(self, byte: Any) -> None: ...
    def do_doctype(self, byte: Any): ...
    def end_doctype(self) -> None: ...
    def do_waitforgt(self, byte: Any): ...
    attrname: Any = ...
    def begin_attrname(self, byte: Any) -> None: ...
    attrval: str = ...
    def do_attrname(self, byte: Any): ...
    def do_beforeattrval(self, byte: Any): ...
    def begin_beforeeq(self, byte: Any) -> None: ...
    def do_beforeeq(self, byte: Any): ...
    quotetype: Any = ...
    def begin_attrval(self, byte: Any) -> None: ...
    def do_attrval(self, byte: Any): ...
    def end_attrval(self) -> None: ...
    def begin_messyattr(self, byte: Any) -> None: ...
    def do_messyattr(self, byte: Any): ...
    def end_messyattr(self) -> None: ...
    def begin_afterslash(self, byte: Any) -> None: ...
    def do_afterslash(self, byte: Any): ...
    def begin_bodydata(self, byte: Any) -> None: ...
    def do_bodydata(self, byte: Any): ...
    def end_bodydata(self) -> None: ...
    def do_waitforendscript(self, byte: Any): ...
    temptagdata: str = ...
    def begin_waitscriptendtag(self, byte: Any) -> None: ...
    def do_waitscriptendtag(self, byte: Any): ...
    erefbuf: str = ...
    erefextra: str = ...
    def begin_entityref(self, byte: Any) -> None: ...
    def do_entityref(self, byte: Any): ...
    def end_entityref(self) -> None: ...
    def begin_spacebodydata(self, byte: Any) -> None: ...
    do_spacebodydata: Any = ...
    end_spacebodydata: Any = ...
    def gotTagStart(self, name: Any, attributes: Any) -> None: ...
    def gotText(self, data: Any) -> None: ...
    def gotEntityReference(self, entityRef: Any) -> None: ...
    def gotComment(self, comment: Any) -> None: ...
    def gotCData(self, cdata: Any) -> None: ...
    def gotDoctype(self, doctype: Any) -> None: ...
    def gotTagEnd(self, name: Any) -> None: ...
