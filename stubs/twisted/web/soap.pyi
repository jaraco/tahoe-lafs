from twisted.internet import defer as defer
from twisted.web import client as client, resource as resource, server as server
from typing import Any, Optional

class SOAPPublisher(resource.Resource):
    isLeaf: int = ...
    encoding: str = ...
    def lookupFunction(self, functionName: Any): ...
    def render(self, request: Any): ...

class Proxy:
    url: Any = ...
    namespace: Any = ...
    header: Any = ...
    def __init__(self, url: Any, namespace: Optional[Any] = ..., header: Optional[Any] = ...) -> None: ...
    def callRemote(self, method: Any, *args: Any, **kwargs: Any): ...
