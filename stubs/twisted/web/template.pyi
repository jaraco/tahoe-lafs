from twisted.web._element import Element as Element, renderer as renderer
from twisted.web._flatten import flatten as flatten, flattenString as flattenString
from twisted.web._stan import CDATA as CDATA, CharRef as CharRef, Comment as Comment, Tag as Tag, slot as slot
from typing import Any, Optional
from xml.sax import handler

TEMPLATE_NAMESPACE: str

class _NSContext:
    parent: Any = ...
    nss: Any = ...
    def __init__(self, parent: Optional[Any] = ...) -> None: ...
    def get(self, k: Any, d: Optional[Any] = ...): ...
    def __setitem__(self, k: Any, v: Any) -> None: ...
    def __getitem__(self, k: Any): ...

class _ToStan(handler.ContentHandler, handler.EntityResolver):
    sourceFilename: Any = ...
    prefixMap: Any = ...
    inCDATA: bool = ...
    def __init__(self, sourceFilename: Any) -> None: ...
    locator: Any = ...
    def setDocumentLocator(self, locator: Any) -> None: ...
    document: Any = ...
    current: Any = ...
    stack: Any = ...
    xmlnsAttrs: Any = ...
    def startDocument(self) -> None: ...
    def endDocument(self) -> None: ...
    def processingInstruction(self, target: Any, data: Any) -> None: ...
    def startPrefixMapping(self, prefix: Any, uri: Any) -> None: ...
    def endPrefixMapping(self, prefix: Any) -> None: ...
    def startElementNS(self, namespaceAndName: Any, qname: Any, attrs: Any) -> None: ...
    def characters(self, ch: Any) -> None: ...
    def endElementNS(self, name: Any, qname: Any) -> None: ...
    def startDTD(self, name: Any, publicId: Any, systemId: Any) -> None: ...
    def endDTD(self, *args: Any) -> None: ...
    def startCDATA(self) -> None: ...
    def endCDATA(self) -> None: ...
    def comment(self, content: Any) -> None: ...

class TagLoader:
    tag: Any = ...
    def __init__(self, tag: Any) -> None: ...
    def load(self): ...

class XMLString:
    def __init__(self, s: Any) -> None: ...
    def load(self): ...

class XMLFile:
    def __init__(self, path: Any) -> None: ...
    def load(self): ...

VALID_HTML_TAG_NAMES: Any

class _TagFactory:
    def __getattr__(self, tagName: Any): ...

tags: Any

def renderElement(request: Any, element: Any, doctype: bytes = ..., _failElement: Optional[Any] = ...): ...
