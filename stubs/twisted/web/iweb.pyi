from twisted.cred.credentials import IUsernameDigestHash as IUsernameDigestHash
from twisted.internet.interfaces import IPushProducer
from typing import Any, Optional
from zope.interface import Interface

class IRequest(Interface):
    method: Any = ...
    uri: Any = ...
    path: Any = ...
    args: Any = ...
    prepath: Any = ...
    postpath: Any = ...
    requestHeaders: Any = ...
    content: Any = ...
    responseHeaders: Any = ...
    def getHeader(key: Any) -> None: ...
    def getCookie(key: Any) -> None: ...
    def getAllHeaders() -> None: ...
    def getRequestHostname() -> None: ...
    def getHost() -> None: ...
    def getClientAddress() -> None: ...
    def getClientIP() -> None: ...
    def getUser() -> None: ...
    def getPassword() -> None: ...
    def isSecure() -> None: ...
    def getSession(sessionInterface: Optional[Any] = ...) -> None: ...
    def URLPath() -> None: ...
    def prePathURL() -> None: ...
    def rememberRootURL() -> None: ...
    def getRootURL() -> None: ...
    def finish() -> None: ...
    def write(data: Any) -> None: ...
    def addCookie(k: Any, v: Any, expires: Optional[Any] = ..., domain: Optional[Any] = ..., path: Optional[Any] = ..., max_age: Optional[Any] = ..., comment: Optional[Any] = ..., secure: Optional[Any] = ...) -> None: ...
    def setResponseCode(code: Any, message: Optional[Any] = ...) -> None: ...
    def setHeader(k: Any, v: Any) -> None: ...
    def redirect(url: Any) -> None: ...
    def setLastModified(when: Any) -> None: ...
    def setETag(etag: Any) -> None: ...
    def setHost(host: Any, port: Any, ssl: int = ...) -> None: ...

class INonQueuedRequestFactory(Interface):
    def __call__(channel: Any) -> None: ...

class IAccessLogFormatter(Interface):
    def __call__(timestamp: Any, request: Any) -> None: ...

class ICredentialFactory(Interface):
    scheme: Any = ...
    def getChallenge(request: Any) -> None: ...
    def decode(response: Any, request: Any) -> None: ...

class IBodyProducer(IPushProducer):
    length: Any = ...
    def startProducing(consumer: Any) -> None: ...
    def stopProducing() -> None: ...

class IRenderable(Interface):
    def lookupRenderMethod(name: Any) -> None: ...
    def render(request: Any) -> None: ...

class ITemplateLoader(Interface):
    def load() -> None: ...

class IResponse(Interface):
    version: Any = ...
    code: Any = ...
    phrase: Any = ...
    headers: Any = ...
    length: Any = ...
    request: Any = ...
    previousResponse: Any = ...
    def deliverBody(protocol: Any) -> None: ...
    def setPreviousResponse(response: Any) -> None: ...

class _IRequestEncoder(Interface):
    def encode(data: Any) -> None: ...
    def finish() -> None: ...

class _IRequestEncoderFactory(Interface):
    def encoderForRequest(request: Any) -> None: ...

class IClientRequest(Interface):
    method: Any = ...
    absoluteURI: Any = ...
    headers: Any = ...

class IAgent(Interface):
    def request(method: Any, uri: Any, headers: Optional[Any] = ..., bodyProducer: Optional[Any] = ...) -> None: ...

class IPolicyForHTTPS(Interface):
    def creatorForNetloc(hostname: Any, port: Any) -> None: ...

class IAgentEndpointFactory(Interface):
    def endpointForURI(uri: Any) -> None: ...

UNKNOWN_LENGTH: str
