from typing import Any, Optional
from zope.interface import Interface

class IResource(Interface):
    isLeaf: Any = ...
    def getChildWithDefault(name: Any, request: Any) -> None: ...
    def putChild(path: Any, child: Any) -> None: ...
    def render(request: Any) -> None: ...

def getChildForRequest(resource: Any, request: Any): ...

class Resource:
    entityType: Any = ...
    server: Any = ...
    children: Any = ...
    def __init__(self) -> None: ...
    isLeaf: int = ...
    def listStaticNames(self): ...
    def listStaticEntities(self): ...
    def listNames(self): ...
    def listEntities(self): ...
    def listDynamicNames(self): ...
    def listDynamicEntities(self, request: Optional[Any] = ...): ...
    def getStaticEntity(self, name: Any): ...
    def getDynamicEntity(self, name: Any, request: Any): ...
    def delEntity(self, name: Any) -> None: ...
    def reallyPutEntity(self, name: Any, entity: Any) -> None: ...
    def getChild(self, path: Any, request: Any): ...
    def getChildWithDefault(self, path: Any, request: Any): ...
    def getChildForRequest(self, request: Any): ...
    def putChild(self, path: Any, child: Any) -> None: ...
    def render(self, request: Any): ...
    def render_HEAD(self, request: Any): ...

class ErrorPage(Resource):
    template: str = ...
    code: Any = ...
    brief: Any = ...
    detail: Any = ...
    def __init__(self, status: Any, brief: Any, detail: Any) -> None: ...
    def render(self, request: Any): ...
    def getChild(self, chnam: Any, request: Any): ...

class NoResource(ErrorPage):
    def __init__(self, message: str = ...) -> None: ...

class ForbiddenResource(ErrorPage):
    def __init__(self, message: str = ...) -> None: ...

class _IEncodingResource(Interface):
    def getEncoder(request: Any) -> None: ...

class EncodingResourceWrapper:
    def __init__(self, original: Any, encoders: Any) -> None: ...
    def getEncoder(self, request: Any): ...
