from twisted.internet.defer import Deferred as Deferred
from twisted.internet.error import ConnectionLost as ConnectionLost
from twisted.internet.interfaces import IConsumer as IConsumer, IProtocol as IProtocol, IPushProducer as IPushProducer, ISSLTransport as ISSLTransport, ITransport as ITransport
from twisted.internet.protocol import Protocol as Protocol
from twisted.logger import Logger as Logger
from twisted.protocols.policies import TimeoutMixin as TimeoutMixin
from twisted.python.failure import Failure as Failure
from twisted.web.error import ExcessiveBufferingError as ExcessiveBufferingError
from typing import Any, Optional

class H2Connection(Protocol, TimeoutMixin):
    factory: Any = ...
    site: Any = ...
    abortTimeout: int = ...
    conn: Any = ...
    streams: Any = ...
    priority: Any = ...
    def __init__(self, reactor: Optional[Any] = ...) -> None: ...
    def connectionMade(self) -> None: ...
    def dataReceived(self, data: Any) -> None: ...
    def timeoutConnection(self) -> None: ...
    def forceAbortClient(self) -> None: ...
    def connectionLost(self, reason: Any, _cancelTimeouts: bool = ...) -> None: ...
    def stopProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
    def writeHeaders(self, version: Any, code: Any, reason: Any, headers: Any, streamID: Any) -> None: ...
    def writeDataToStream(self, streamID: Any, data: Any) -> None: ...
    def endRequest(self, streamID: Any) -> None: ...
    def abortRequest(self, streamID: Any) -> None: ...
    def remainingOutboundWindow(self, streamID: Any): ...
    def getPeer(self): ...
    def getHost(self): ...
    def openStreamWindow(self, streamID: Any, increment: Any) -> None: ...

class H2Stream:
    transport: Any = ...
    streamID: Any = ...
    site: Any = ...
    factory: Any = ...
    producing: bool = ...
    command: Any = ...
    path: Any = ...
    producer: Any = ...
    def __init__(self, streamID: Any, connection: Any, headers: Any, requestFactory: Any, site: Any, factory: Any) -> None: ...
    def receiveDataChunk(self, data: Any, flowControlledLength: Any) -> None: ...
    def requestComplete(self) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...
    def windowUpdated(self) -> None: ...
    def flowControlBlocked(self) -> None: ...
    def writeHeaders(self, version: Any, code: Any, reason: Any, headers: Any) -> None: ...
    def requestDone(self, request: Any) -> None: ...
    def write(self, data: Any) -> None: ...
    def writeSequence(self, iovec: Any) -> None: ...
    def loseConnection(self) -> None: ...
    def abortConnection(self) -> None: ...
    def getPeer(self): ...
    def getHost(self): ...
    def isSecure(self): ...
    hasStreamingProducer: bool = ...
    def registerProducer(self, producer: Any, streaming: Any) -> None: ...
    def unregisterProducer(self) -> None: ...
    def stopProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def resumeProducing(self) -> None: ...
