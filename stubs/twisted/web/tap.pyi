from twisted.application import service as service, strports as strports
from twisted.internet import interfaces as interfaces, reactor as reactor
from twisted.python import deprecate as deprecate, reflect as reflect, threadpool as threadpool, usage as usage
from twisted.spread import pb as pb
from twisted.web import demo as demo, distrib as distrib, resource as resource, script as script, server as server, static as static, twcgi as twcgi, wsgi as wsgi
from typing import Any

class Options(usage.Options):
    synopsis: str = ...
    optParameters: Any = ...
    optFlags: Any = ...
    compData: Any = ...
    longdesc: str = ...
    def __init__(self) -> None: ...
    def opt_port(self, port: Any) -> None: ...
    opt_p: Any = ...
    def opt_https(self, port: Any) -> None: ...
    def opt_listen(self, port: Any) -> None: ...
    def opt_index(self, indexName: Any) -> None: ...
    opt_i: Any = ...
    def opt_user(self) -> None: ...
    opt_u: Any = ...
    def opt_path(self, path: Any) -> None: ...
    def opt_processor(self, proc: Any) -> None: ...
    def opt_class(self, className: Any) -> None: ...
    def opt_resource_script(self, name: Any) -> None: ...
    def opt_wsgi(self, name: Any) -> None: ...
    def opt_mime_type(self, defaultType: Any) -> None: ...
    opt_m: Any = ...
    def opt_allow_ignore_ext(self) -> None: ...
    def opt_ignore_ext(self, ext: Any) -> None: ...
    def opt_add_header(self, header: Any) -> None: ...
    def postOptions(self) -> None: ...

def makePersonalServerFactory(site: Any): ...

class _AddHeadersResource(resource.Resource):
    def __init__(self, originalResource: Any, headers: Any) -> None: ...
    def getChildWithDefault(self, name: Any, request: Any): ...

def makeService(config: Any): ...
