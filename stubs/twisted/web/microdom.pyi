from twisted.python.compat import ioType as ioType
from twisted.python.util import InsensitiveDict as InsensitiveDict
from twisted.web.sux import ParseError as ParseError, XMLParser as XMLParser
from typing import Any, Optional

def getElementsByTagName(iNode: Any, name: Any): ...
def getElementsByTagNameNoCase(iNode: Any, name: Any): ...

HTML_ESCAPE_CHARS: Any
REV_HTML_ESCAPE_CHARS: Any
XML_ESCAPE_CHARS: Any
REV_XML_ESCAPE_CHARS: Any

def unescape(text: Any, chars: Any = ...): ...
def escape(text: Any, chars: Any = ...): ...

class MismatchedTags(Exception):
    def __init__(self, filename: Any, expect: Any, got: Any, endLine: Any, endCol: Any, begLine: Any, begCol: Any) -> None: ...

class Node:
    nodeName: str = ...
    parentNode: Any = ...
    childNodes: Any = ...
    def __init__(self, parentNode: Optional[Any] = ...) -> None: ...
    def isEqualToNode(self, other: Any): ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...
    def toxml(self, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...): ...
    def writeprettyxml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ...): ...
    def toprettyxml(self, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ...): ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...) -> None: ...
    def hasChildNodes(self): ...
    def appendChild(self, child: Any) -> None: ...
    def insertBefore(self, new: Any, ref: Any): ...
    def removeChild(self, child: Any): ...
    def replaceChild(self, newChild: Any, oldChild: Any) -> None: ...
    def lastChild(self): ...
    def firstChild(self): ...

class Document(Node):
    def __init__(self, documentElement: Optional[Any] = ...) -> None: ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...
    doctype: Any = ...
    def isEqualToDocument(self, n: Any): ...
    isEqualToNode: Any = ...
    @property
    def documentElement(self): ...
    def appendChild(self, child: Any) -> None: ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...
    def createElement(self, name: Any, **kw: Any): ...
    def createTextNode(self, text: Any): ...
    def createComment(self, text: Any): ...
    def getElementsByTagName(self, name: Any): ...
    def getElementById(self, id: Any): ...

class EntityReference(Node):
    eref: Any = ...
    nodeValue: Any = ...
    def __init__(self, eref: Any, parentNode: Optional[Any] = ...) -> None: ...
    def isEqualToEntityReference(self, n: Any): ...
    isEqualToNode: Any = ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...

class CharacterData(Node):
    value: Any = ...
    def __init__(self, data: Any, parentNode: Optional[Any] = ...) -> None: ...
    def isEqualToCharacterData(self, n: Any): ...
    isEqualToNode: Any = ...

class Comment(CharacterData):
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...

class Text(CharacterData):
    raw: Any = ...
    def __init__(self, data: Any, parentNode: Optional[Any] = ..., raw: int = ...) -> None: ...
    def isEqualToNode(self, other: Any): ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...

class CDATASection(CharacterData):
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...) -> None: ...

genprefix: Any

class _Attr(CharacterData): ...

class Element(Node):
    preserveCase: int = ...
    caseInsensitive: int = ...
    nsprefixes: Any = ...
    attributes: Any = ...
    endTagName: Any = ...
    namespace: Any = ...
    def __init__(self, tagName: Any, attributes: Optional[Any] = ..., parentNode: Optional[Any] = ..., filename: Optional[Any] = ..., markpos: Optional[Any] = ..., caseInsensitive: int = ..., preserveCase: int = ..., namespace: Optional[Any] = ...) -> None: ...
    def addPrefixes(self, pfxs: Any) -> None: ...
    def endTag(self, endTagName: Any) -> None: ...
    def isEqualToElement(self, n: Any): ...
    def isEqualToNode(self, other: Any): ...
    def cloneNode(self, deep: int = ..., parent: Optional[Any] = ...): ...
    def getElementsByTagName(self, name: Any): ...
    def hasAttributes(self): ...
    def getAttribute(self, name: Any, default: Optional[Any] = ...): ...
    def getAttributeNS(self, ns: Any, name: Any, default: Optional[Any] = ...): ...
    def getAttributeNode(self, name: Any): ...
    def setAttribute(self, name: Any, attr: Any) -> None: ...
    def removeAttribute(self, name: Any) -> None: ...
    def hasAttribute(self, name: Any): ...
    def writexml(self, stream: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Any = ..., namespace: str = ...): ...

class MicroDOMParser(XMLParser):
    soonClosers: Any = ...
    laterClosers: Any = ...
    elementstack: Any = ...
    nsstack: Any = ...
    documents: Any = ...
    beExtremelyLenient: Any = ...
    caseInsensitive: Any = ...
    preserveCase: Any = ...
    def __init__(self, beExtremelyLenient: int = ..., caseInsensitive: int = ..., preserveCase: int = ..., soonClosers: Any = ..., laterClosers: Any = ...) -> None: ...
    def shouldPreserveSpace(self): ...
    COMMENT: Any = ...
    def gotDoctype(self, doctype: Any) -> None: ...
    def gotTagStart(self, name: Any, attributes: Any) -> None: ...
    def gotText(self, data: Any) -> None: ...
    def gotComment(self, data: Any) -> None: ...
    def gotEntityReference(self, entityRef: Any) -> None: ...
    def gotCData(self, cdata: Any) -> None: ...
    def gotTagEnd(self, name: Any) -> None: ...
    def connectionLost(self, reason: Any) -> None: ...

def parse(readable: Any, *args: Any, **kwargs: Any): ...
def parseString(st: Any, *args: Any, **kw: Any): ...
def parseXML(readable: Any): ...
def parseXMLString(st: Any): ...

class lmx:
    node: Any = ...
    def __init__(self, node: str = ...) -> None: ...
    def __getattr__(self, name: Any): ...
    def __setitem__(self, key: Any, val: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def text(self, txt: Any, raw: int = ...): ...
    def add(self, tagName: Any, **kw: Any): ...
