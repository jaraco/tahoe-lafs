from twisted.internet import protocol as protocol
from twisted.logger import Logger as Logger
from twisted.python import filepath as filepath
from twisted.spread import pb as pb
from twisted.web import http as http, resource as resource, server as server, static as static
from typing import Any, Optional

class CGIDirectory(resource.Resource, filepath.FilePath):
    def __init__(self, pathname: Any) -> None: ...
    def getChild(self, path: Any, request: Any): ...
    def render(self, request: Any): ...

class CGIScript(resource.Resource):
    isLeaf: int = ...
    filename: Any = ...
    def __init__(self, filename: Any, registry: Optional[Any] = ..., reactor: Optional[Any] = ...) -> None: ...
    def render(self, request: Any): ...
    def runProcess(self, env: Any, request: Any, qargs: Any = ...) -> None: ...

class FilteredScript(CGIScript):
    filter: str = ...
    def runProcess(self, env: Any, request: Any, qargs: Any = ...) -> None: ...

class CGIProcessProtocol(protocol.ProcessProtocol, pb.Viewable):
    handling_headers: int = ...
    headers_written: int = ...
    headertext: bytes = ...
    errortext: bytes = ...
    def view_resumeProducing(self, issuer: Any) -> None: ...
    def view_pauseProducing(self, issuer: Any) -> None: ...
    def view_stopProducing(self, issuer: Any) -> None: ...
    def resumeProducing(self) -> None: ...
    def pauseProducing(self) -> None: ...
    def stopProducing(self) -> None: ...
    request: Any = ...
    def __init__(self, request: Any) -> None: ...
    def connectionMade(self) -> None: ...
    def errReceived(self, error: Any) -> None: ...
    def outReceived(self, output: Any) -> None: ...
    def processEnded(self, reason: Any) -> None: ...
