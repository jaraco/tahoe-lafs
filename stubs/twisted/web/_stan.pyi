from twisted.python.compat import iteritems as iteritems
from typing import Any, Optional

class slot:
    name: Any = ...
    children: Any = ...
    default: Any = ...
    filename: Any = ...
    lineNumber: Any = ...
    columnNumber: Any = ...
    def __init__(self, name: Any, default: Optional[Any] = ..., filename: Optional[Any] = ..., lineNumber: Optional[Any] = ..., columnNumber: Optional[Any] = ...) -> None: ...

class Tag:
    slotData: Any = ...
    filename: Any = ...
    lineNumber: Any = ...
    columnNumber: Any = ...
    tagName: Any = ...
    render: Any = ...
    attributes: Any = ...
    children: Any = ...
    def __init__(self, tagName: Any, attributes: Optional[Any] = ..., children: Optional[Any] = ..., render: Optional[Any] = ..., filename: Optional[Any] = ..., lineNumber: Optional[Any] = ..., columnNumber: Optional[Any] = ...) -> None: ...
    def fillSlots(self, **slots: Any): ...
    def __call__(self, *children: Any, **kw: Any): ...
    def clone(self, deep: bool = ...): ...
    def clear(self): ...

voidElements: Any

class CDATA:
    data: Any = ...
    def __init__(self, data: Any) -> None: ...

class Comment:
    data: Any = ...
    def __init__(self, data: Any) -> None: ...

class CharRef:
    ordinal: Any = ...
    def __init__(self, ordinal: Any) -> None: ...
