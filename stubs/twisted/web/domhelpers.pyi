from twisted.web import microdom as microdom
from twisted.web.microdom import escape as escape, getElementsByTagName as getElementsByTagName, unescape as unescape
from typing import Any, Optional

class NodeLookupError(Exception): ...

def substitute(request: Any, node: Any, subs: Any) -> None: ...
def get(node: Any, nodeId: Any): ...
def getIfExists(node: Any, nodeId: Any): ...
def getAndClear(node: Any, nodeId: Any): ...
def clearNode(node: Any) -> None: ...
def locateNodes(nodeList: Any, key: Any, value: Any, noNesting: int = ...): ...
def superSetAttribute(node: Any, key: Any, value: Any) -> None: ...
def superPrependAttribute(node: Any, key: Any, value: Any) -> None: ...
def superAppendAttribute(node: Any, key: Any, value: Any) -> None: ...
def gatherTextNodes(iNode: Any, dounescape: int = ..., joinWith: str = ...): ...

class RawText(microdom.Text):
    def writexml(self, writer: Any, indent: str = ..., addindent: str = ..., newl: str = ..., strip: int = ..., nsprefixes: Optional[Any] = ..., namespace: Optional[Any] = ...) -> None: ...

def findNodes(parent: Any, matcher: Any, accum: Optional[Any] = ...): ...
def findNodesShallowOnMatch(parent: Any, matcher: Any, recurseMatcher: Any, accum: Optional[Any] = ...): ...
def findNodesShallow(parent: Any, matcher: Any, accum: Optional[Any] = ...): ...
def findElementsWithAttributeShallow(parent: Any, attribute: Any): ...
def findElements(parent: Any, matcher: Any): ...
def findElementsWithAttribute(parent: Any, attribute: Any, value: Optional[Any] = ...): ...
def findNodesNamed(parent: Any, name: Any): ...
def writeNodeData(node: Any, oldio: Any) -> None: ...
def getNodeText(node: Any): ...
def getParents(node: Any): ...
def namedChildren(parent: Any, nodeName: Any): ...
