from typing import Any, Optional

def registerAdapter(adapterFactory: Any, origInterface: Any, *interfaceClasses: Any) -> None: ...
def getAdapterFactory(fromInterface: Any, toInterface: Any, default: Any): ...
def getRegistry(): ...
CannotAdapt = TypeError

class Adapter:
    temporaryAdapter: int = ...
    multiComponent: int = ...
    original: Any = ...
    def __init__(self, original: Any) -> None: ...
    def __conform__(self, interface: Any): ...
    def isuper(self, iface: Any, adapter: Any): ...

class Componentized:
    persistenceVersion: int = ...
    def __init__(self) -> None: ...
    def locateAdapterClass(self, klass: Any, interfaceClass: Any, default: Any): ...
    def setAdapter(self, interfaceClass: Any, adapterClass: Any) -> None: ...
    def addAdapter(self, adapterClass: Any, ignoreClass: int = ...): ...
    def setComponent(self, interfaceClass: Any, component: Any) -> None: ...
    def addComponent(self, component: Any, ignoreClass: int = ...) -> None: ...
    def unsetComponent(self, interfaceClass: Any) -> None: ...
    def removeComponent(self, component: Any): ...
    def getComponent(self, interface: Any, default: Optional[Any] = ...): ...
    def __conform__(self, interface: Any): ...

class ReprableComponentized(Componentized):
    def __init__(self) -> None: ...

def proxyForInterface(iface: Any, originalAttribute: str = ...): ...

class _ProxiedClassMethod:
    methodName: Any = ...
    originalAttribute: Any = ...
    def __init__(self, methodName: Any, originalAttribute: Any) -> None: ...
    def __call__(self, oself: Any, *args: Any, **kw: Any): ...

class _ProxyDescriptor:
    attributeName: Any = ...
    originalAttribute: Any = ...
    def __init__(self, attributeName: Any, originalAttribute: Any) -> None: ...
    def __get__(self, oself: Any, type: Optional[Any] = ...): ...
    def __set__(self, oself: Any, value: Any) -> None: ...
    def __delete__(self, oself: Any) -> None: ...
