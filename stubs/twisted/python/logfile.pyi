from twisted.python import threadable as threadable
from twisted.python.compat import unicode as unicode
from typing import Any, Optional

class BaseLogFile:
    synchronized: Any = ...
    directory: Any = ...
    name: Any = ...
    path: Any = ...
    defaultMode: Any = ...
    def __init__(self, name: Any, directory: Any, defaultMode: Optional[Any] = ...) -> None: ...
    def fromFullPath(cls, filename: Any, *args: Any, **kwargs: Any): ...
    fromFullPath: Any = ...
    def shouldRotate(self) -> None: ...
    def write(self, data: Any) -> None: ...
    def flush(self) -> None: ...
    closed: bool = ...
    def close(self) -> None: ...
    def reopen(self) -> None: ...
    def getCurrentLog(self): ...

class LogFile(BaseLogFile):
    rotateLength: Any = ...
    maxRotatedFiles: Any = ...
    def __init__(self, name: Any, directory: Any, rotateLength: int = ..., defaultMode: Optional[Any] = ..., maxRotatedFiles: Optional[Any] = ...) -> None: ...
    def shouldRotate(self): ...
    def getLog(self, identifier: Any): ...
    def write(self, data: Any) -> None: ...
    def rotate(self) -> None: ...
    def listLogs(self): ...

class DailyLogFile(BaseLogFile):
    def shouldRotate(self): ...
    def toDate(self, *args: Any): ...
    def suffix(self, tupledate: Any): ...
    def getLog(self, identifier: Any): ...
    lastDate: Any = ...
    def write(self, data: Any) -> None: ...
    def rotate(self) -> None: ...

class LogReader:
    def __init__(self, name: Any) -> None: ...
    def readLines(self, lines: int = ...): ...
    def close(self) -> None: ...
