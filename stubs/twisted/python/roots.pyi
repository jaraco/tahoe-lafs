from twisted.python import reflect as reflect
from typing import Any, Optional

class NotSupportedError(NotImplementedError): ...

class Request:
    wireProtocol: Any = ...
    def write(self, data: Any) -> None: ...
    def finish(self) -> None: ...

class Entity:
    def render(self, request: Any) -> None: ...

class Collection:
    entities: Any = ...
    def __init__(self, entities: Optional[Any] = ...) -> None: ...
    def getStaticEntity(self, name: Any): ...
    def getDynamicEntity(self, name: Any, request: Any) -> None: ...
    def getEntity(self, name: Any, request: Any): ...
    def putEntity(self, name: Any, entity: Any) -> None: ...
    def delEntity(self, name: Any) -> None: ...
    def storeEntity(self, name: Any, request: Any) -> None: ...
    def removeEntity(self, name: Any, request: Any) -> None: ...
    def listStaticEntities(self): ...
    def listDynamicEntities(self, request: Any): ...
    def listEntities(self, request: Any): ...
    def listStaticNames(self): ...
    def listDynamicNames(self): ...
    def listNames(self, request: Any): ...

class ConstraintViolation(Exception): ...

class Constrained(Collection):
    def nameConstraint(self, name: Any): ...
    def entityConstraint(self, entity: Any): ...
    def reallyPutEntity(self, name: Any, entity: Any) -> None: ...
    def putEntity(self, name: Any, entity: Any) -> None: ...

class Locked(Constrained):
    locked: int = ...
    def lock(self) -> None: ...
    def entityConstraint(self, entity: Any): ...

class Homogenous(Constrained):
    entityType: Any = ...
    def entityConstraint(self, entity: Any): ...
    def getNameType(self): ...
    def getEntityType(self): ...
