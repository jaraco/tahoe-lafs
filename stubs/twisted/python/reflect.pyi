from twisted.python.deprecate import _fullyQualifiedName as fullyQualifiedName
from typing import Any, Optional

def prefixedMethodNames(classObj: Any, prefix: Any): ...
def addMethodNamesToDict(classObj: Any, dict: Any, prefix: Any, baseClass: Optional[Any] = ...) -> None: ...
def prefixedMethods(obj: Any, prefix: str = ...): ...
def accumulateMethods(obj: Any, dict: Any, prefix: str = ..., curClass: Optional[Any] = ...) -> None: ...
def namedModule(name: Any): ...
def namedObject(name: Any): ...
namedClass = namedObject

def requireModule(name: Any, default: Optional[Any] = ...): ...

class _NoModuleFound(Exception): ...
class InvalidName(ValueError): ...
class ModuleNotFound(InvalidName): ...
class ObjectNotFound(InvalidName): ...

def namedAny(name: Any): ...
def filenameToModuleName(fn: Any): ...
def qual(clazz: Any): ...
def safe_repr(o: Any): ...
def safe_str(o: object) -> str: ...

class QueueMethod:
    name: Any = ...
    calls: Any = ...
    def __init__(self, name: Any, calls: Any) -> None: ...
    def __call__(self, *args: Any) -> None: ...

def fullFuncName(func: Any): ...
def getClass(obj: Any): ...
def accumulateClassDict(classObj: Any, attr: Any, adict: Any, baseClass: Optional[Any] = ...) -> None: ...
def accumulateClassList(classObj: Any, attr: Any, listObj: Any, baseClass: Optional[Any] = ...) -> None: ...
def isSame(a: Any, b: Any): ...
def isLike(a: Any, b: Any): ...
def modgrep(goal: Any): ...
def isOfType(start: Any, goal: Any): ...
def findInstances(start: Any, t: Any): ...
