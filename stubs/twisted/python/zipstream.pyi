import zipfile
from typing import Any, Optional

class ChunkingZipFile(zipfile.ZipFile):
    def readfile(self, name: Any): ...

class _FileEntry:
    chunkingZipFile: Any = ...
    fp: Any = ...
    length: Any = ...
    finished: int = ...
    closed: bool = ...
    def __init__(self, chunkingZipFile: Any, length: Any) -> None: ...
    def isatty(self): ...
    def close(self) -> None: ...
    def readline(self): ...
    def __next__(self): ...
    next: Any = ...
    def readlines(self): ...
    def xreadlines(self): ...
    def __iter__(self) -> Any: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class ZipFileEntry(_FileEntry):
    readBytes: int = ...
    def __init__(self, chunkingZipFile: Any, length: Any) -> None: ...
    def tell(self): ...
    finished: int = ...
    def read(self, n: Optional[Any] = ...): ...

class DeflatedZipFileEntry(_FileEntry):
    returnedBytes: int = ...
    readBytes: int = ...
    decomp: Any = ...
    buffer: bytes = ...
    def __init__(self, chunkingZipFile: Any, length: Any) -> None: ...
    def tell(self): ...
    finished: int = ...
    def read(self, n: Optional[Any] = ...): ...

DIR_BIT: int

def countZipFileChunks(filename: Any, chunksize: Any): ...
def countFileChunks(zipinfo: Any, chunksize: Any): ...
def unzipIterChunky(filename: Any, directory: str = ..., overwrite: int = ..., chunksize: int = ...) -> None: ...
