from collections import OrderedDict as OrderedDict
from twisted.python._oldstyle import _replaceIf as _replaceIf
from typing import Any, Optional

class InsensitiveDict:
    data: Any = ...
    preserve: Any = ...
    def __init__(self, dict: Optional[Any] = ..., preserve: int = ...) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def has_key(self, key: Any): ...
    __contains__: Any = ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def setdefault(self, key: Any, default: Any): ...
    def update(self, dict: Any) -> None: ...
    def iterkeys(self) -> None: ...
    def itervalues(self) -> None: ...
    def iteritems(self) -> None: ...
    def popitem(self): ...
    def clear(self) -> None: ...
    def copy(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...

def uniquify(lst: Any): ...
def padTo(n: Any, seq: Any, default: Optional[Any] = ...): ...
def getPluginDirs(): ...
def addPluginDir() -> None: ...
def sibpath(path: Any, sibling: Any): ...
def getPassword(prompt: str = ..., confirm: int = ..., forceTTY: int = ..., confirmPrompt: str = ..., mismatchMessage: str = ...): ...
def println(*a: Any) -> None: ...
def spewer(frame: Any, s: Any, ignored: Any) -> None: ...
def searchupwards(start: Any, files: Any = ..., dirs: Any = ...): ...

class LineLog:
    log: Any = ...
    size: Any = ...
    def __init__(self, size: int = ...) -> None: ...
    def append(self, line: Any) -> None: ...
    def str(self): ...
    def __bytes__(self): ...
    def __getitem__(self, item: Any): ...
    def clear(self) -> None: ...

def raises(exception: Any, f: Any, *args: Any, **kwargs: Any): ...

class IntervalDifferential:
    intervals: Any = ...
    default: Any = ...
    def __init__(self, intervals: Any, default: int = ...) -> None: ...
    def __iter__(self) -> Any: ...

class _IntervalDifferentialIterator:
    intervals: Any = ...
    default: Any = ...
    last: int = ...
    def __init__(self, i: Any, d: Any) -> None: ...
    def __next__(self): ...
    next: Any = ...
    def addInterval(self, i: Any) -> None: ...
    def removeInterval(self, interval: Any) -> None: ...

class FancyStrMixin:
    showAttributes: Any = ...

class FancyEqMixin:
    compareAttributes: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

def switchUID(uid: Any, gid: Any, euid: bool = ...) -> None: ...

class SubclassableCStringIO:
    def __init__(self, *a: Any, **kw: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def next(self): ...
    def close(self): ...
    def isatty(self): ...
    def seek(self, pos: Any, mode: int = ...): ...
    def tell(self): ...
    def read(self, n: int = ...): ...
    def readline(self, length: Optional[Any] = ...): ...
    def readlines(self, sizehint: int = ...): ...
    def truncate(self, size: Optional[Any] = ...): ...
    def write(self, s: Any): ...
    def writelines(self, list: Any): ...
    def flush(self): ...
    def getvalue(self): ...

def untilConcludes(f: Any, *a: Any, **kw: Any): ...
def mergeFunctionMetadata(f: Any, g: Any): ...
def nameToLabel(mname: Any): ...
def uidFromString(uidString: Any): ...
def gidFromString(gidString: Any): ...
def runAsEffectiveUser(euid: Any, egid: Any, function: Any, *args: Any, **kwargs: Any): ...
def runWithWarningsSuppressed(suppressedWarnings: Any, f: Any, *args: Any, **kwargs: Any): ...
