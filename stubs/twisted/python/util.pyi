from collections import OrderedDict as OrderedDict
from typing import Any, Callable, ClassVar, MutableMapping, Optional, Sequence, Tuple, Union

class InsensitiveDict(MutableMapping):
    data: Any = ...
    preserve: Any = ...
    def __init__(self, dict: Optional[Any] = ..., preserve: int = ...) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def has_key(self, key: Any): ...
    __contains__: Any = ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...
    def setdefault(self, key: Any, default: Any): ...
    def update(self, dict: Any) -> None: ...
    def iterkeys(self) -> None: ...
    __iter__: Any = ...
    def itervalues(self) -> None: ...
    def iteritems(self) -> None: ...
    def pop(self, key: Any, default: Any = ...): ...
    def popitem(self): ...
    def clear(self) -> None: ...
    def copy(self): ...
    def __len__(self): ...
    def __eq__(self, other: object) -> bool: ...

def uniquify(lst: Any): ...
def padTo(n: Any, seq: Any, default: Optional[Any] = ...): ...
def getPluginDirs(): ...
def addPluginDir() -> None: ...
def sibpath(path: Any, sibling: Any): ...
def getPassword(prompt: str = ..., confirm: int = ..., forceTTY: int = ..., confirmPrompt: str = ..., mismatchMessage: str = ...): ...
def println(*a: Any) -> None: ...
def makeStatBar(width: Any, maxPosition: Any, doneChar: str = ..., undoneChar: str = ..., currentChar: str = ...): ...
def spewer(frame: Any, s: Any, ignored: Any) -> None: ...
def searchupwards(start: Any, files: Any = ..., dirs: Any = ...): ...

class LineLog:
    log: Any = ...
    size: Any = ...
    def __init__(self, size: int = ...) -> None: ...
    def append(self, line: Any) -> None: ...
    def str(self): ...
    def __bytes__(self): ...
    def __getitem__(self, item: Any): ...
    def clear(self) -> None: ...

def raises(exception: Any, f: Any, *args: Any, **kwargs: Any): ...

class IntervalDifferential:
    intervals: Any = ...
    default: Any = ...
    def __init__(self, intervals: Any, default: int = ...) -> None: ...
    def __iter__(self) -> Any: ...

class _IntervalDifferentialIterator:
    intervals: Any = ...
    default: Any = ...
    last: int = ...
    def __init__(self, i: Any, d: Any) -> None: ...
    def __next__(self): ...
    next: Any = ...
    def addInterval(self, i: Any) -> None: ...
    def removeInterval(self, interval: Any) -> None: ...

class FancyStrMixin:
    showAttributes: Sequence[Union[str, Tuple[str, str, str], Tuple[str, Callable]]] = ...

class FancyEqMixin:
    compareAttributes: ClassVar[Sequence[str]] = ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

def switchUID(uid: Any, gid: Any, euid: bool = ...) -> None: ...
def untilConcludes(f: Any, *a: Any, **kw: Any): ...
def mergeFunctionMetadata(f: Any, g: Any): ...
def nameToLabel(mname: Any): ...
def uidFromString(uidString: Any): ...
def gidFromString(gidString: Any): ...
def runAsEffectiveUser(euid: Any, egid: Any, function: Any, *args: Any, **kwargs: Any): ...
def runWithWarningsSuppressed(suppressedWarnings: Any, f: Any, *args: Any, **kwargs: Any): ...
