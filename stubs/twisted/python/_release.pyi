from twisted.python.compat import execfile as execfile
from twisted.python.filepath import FilePath as FilePath
from twisted.python.monkey import MonkeyPatcher as MonkeyPatcher
from typing import Any, Optional
from zope.interface import Interface

NEWSFRAGMENT_TYPES: Any
intersphinxURLs: Any

def runCommand(args: Any, **kwargs: Any): ...

class IVCSCommand(Interface):
    def ensureIsWorkingDirectory(path: Any) -> None: ...
    def isStatusClean(path: Any) -> None: ...
    def remove(path: Any) -> None: ...
    def exportTo(fromDir: Any, exportDir: Any) -> None: ...

class GitCommand:
    @staticmethod
    def ensureIsWorkingDirectory(path: Any) -> None: ...
    @staticmethod
    def isStatusClean(path: Any): ...
    @staticmethod
    def remove(path: Any) -> None: ...
    @staticmethod
    def exportTo(fromDir: Any, exportDir: Any) -> None: ...

def getRepositoryCommand(directory: Any): ...

class Project:
    directory: Any = ...
    def __init__(self, directory: Any) -> None: ...
    def getVersion(self): ...

def findTwistedProjects(baseDirectory: Any): ...
def replaceInFile(filename: Any, oldToNew: Any) -> None: ...

class NoDocumentsFound(Exception): ...

class APIBuilder:
    def build(self, projectName: Any, projectURL: Any, sourceURL: Any, packagePath: Any, outputPath: Any): ...

class SphinxBuilder:
    def main(self, args: Any) -> None: ...
    def build(self, docDir: Any, buildDir: Optional[Any] = ..., version: str = ...): ...

def filePathDelta(origin: Any, destination: Any): ...

class NotWorkingDirectory(Exception): ...

class BuildAPIDocsScript:
    def buildAPIDocs(self, projectRoot: Any, output: Any) -> None: ...
    def main(self, args: Any) -> None: ...

class CheckNewsfragmentScript:
    def __init__(self, _print: Any) -> None: ...
    def main(self, args: Any) -> None: ...
