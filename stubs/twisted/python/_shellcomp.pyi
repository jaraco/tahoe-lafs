from twisted.python import reflect as reflect, usage as usage, util as util
from twisted.python.compat import ioType as ioType, unicode as unicode
from typing import Any

def shellComplete(config: Any, cmdName: Any, words: Any, shellCompFile: Any) -> None: ...

class SubcommandAction(usage.Completer): ...

class ZshBuilder:
    options: Any = ...
    cmdName: Any = ...
    file: Any = ...
    def __init__(self, options: Any, cmdName: Any, file: Any) -> None: ...
    def write(self, genSubs: bool = ...) -> None: ...

class ZshSubcommandBuilder(ZshBuilder):
    subOptions: Any = ...
    def __init__(self, subOptions: Any, *args: Any) -> None: ...
    def write(self) -> None: ...

class ZshArgumentsGenerator:
    options: Any = ...
    cmdName: Any = ...
    file: Any = ...
    descriptions: Any = ...
    multiUse: Any = ...
    mutuallyExclusive: Any = ...
    optActions: Any = ...
    extraActions: Any = ...
    optFlags: Any = ...
    optParams: Any = ...
    paramNameToDefinition: Any = ...
    flagNameToDefinition: Any = ...
    allOptionsNameToDefinition: Any = ...
    excludes: Any = ...
    def __init__(self, options: Any, cmdName: Any, file: Any) -> None: ...
    def write(self) -> None: ...
    def writeHeader(self) -> None: ...
    def writeOptions(self) -> None: ...
    def writeExtras(self) -> None: ...
    def writeFooter(self) -> None: ...
    def verifyZshNames(self) -> None: ...
    def excludeStr(self, longname: Any, buildShort: bool = ...): ...
    def makeExcludesDict(self): ...
    def writeOpt(self, longname: Any) -> None: ...
    def getAction(self, longname: Any): ...
    def getDescription(self, longname: Any): ...
    def getShortOption(self, longname: Any): ...
    def addAdditionalOptions(self) -> None: ...

def descrFromDoc(obj: Any): ...
def escape(x: Any): ...
