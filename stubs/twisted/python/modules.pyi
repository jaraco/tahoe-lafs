from twisted.python.compat import nativeString as nativeString
from twisted.python.components import registerAdapter as registerAdapter
from twisted.python.filepath import FilePath as FilePath, UnlistableError as UnlistableError
from twisted.python.reflect import namedAny as namedAny
from twisted.python.zippath import ZipArchive as ZipArchive
from typing import Any, Optional
from zope.interface import Interface

PYTHON_EXTENSIONS: Any
OPTIMIZED_MODE: Any

class _ModuleIteratorHelper:
    def iterModules(self) -> None: ...
    def walkModules(self, importPackages: bool = ...) -> None: ...
    def __getitem__(self, modname: Any): ...
    def __iter__(self) -> Any: ...

class PythonAttribute:
    name: Any = ...
    onObject: Any = ...
    pythonValue: Any = ...
    def __init__(self, name: Any, onObject: Any, loaded: Any, pythonValue: Any) -> None: ...
    def isLoaded(self): ...
    def load(self, default: Any = ...): ...
    def iterAttributes(self) -> None: ...

class PythonModule(_ModuleIteratorHelper):
    name: Any = ...
    filePath: Any = ...
    parentPath: Any = ...
    pathEntry: Any = ...
    def __init__(self, name: Any, filePath: Any, pathEntry: Any) -> None: ...
    def isLoaded(self): ...
    def iterAttributes(self) -> None: ...
    def isPackage(self): ...
    def load(self, default: Any = ...): ...
    def __eq__(self, other: object) -> bool: ...
    def walkModules(self, importPackages: bool = ...): ...

class PathEntry(_ModuleIteratorHelper):
    filePath: Any = ...
    pythonPath: Any = ...
    def __init__(self, filePath: Any, pythonPath: Any) -> None: ...

class IPathImportMapper(Interface):
    def mapPath(pathLikeString: Any) -> None: ...

class _DefaultMapImpl:
    def mapPath(self, fsPathString: Any): ...

class _ZipMapImpl:
    importer: Any = ...
    def __init__(self, importer: Any) -> None: ...
    def mapPath(self, fsPathString: Any): ...

class PythonPath:
    moduleDict: Any = ...
    sysPathHooks: Any = ...
    importerCache: Any = ...
    moduleLoader: Any = ...
    def __init__(self, sysPath: Optional[Any] = ..., moduleDict: Any = ..., sysPathHooks: Any = ..., importerCache: Any = ..., moduleLoader: Any = ..., sysPathFactory: Optional[Any] = ...): ...
    @property
    def sysPath(self): ...
    def iterEntries(self) -> None: ...
    def __getitem__(self, modname: Any): ...
    def __contains__(self, module: Any): ...
    def iterModules(self) -> None: ...
    def walkModules(self, importPackages: bool = ...) -> None: ...

theSystemPath: Any

def walkModules(importPackages: bool = ...): ...
def iterModules(): ...
def getModule(moduleName: Any): ...
