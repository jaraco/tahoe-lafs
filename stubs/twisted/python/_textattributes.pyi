from twisted.python.util import FancyEqMixin
from typing import Any, ClassVar, Optional, Sequence

class _Attribute(FancyEqMixin):
    compareAttributes: ClassVar[Sequence[str]] = ...
    children: Any = ...
    def __init__(self) -> None: ...
    def __getitem__(self, item: Any): ...
    def serialize(self, write: Any, attrs: Optional[Any] = ..., attributeRenderer: str = ...) -> None: ...

class _NormalAttr(_Attribute):
    def serialize(self, write: Any, attrs: Any, attributeRenderer: Any) -> None: ...

class _OtherAttr(_Attribute):
    compareAttributes: Any = ...
    attrname: Any = ...
    attrvalue: Any = ...
    def __init__(self, attrname: Any, attrvalue: Any) -> None: ...
    def __neg__(self): ...
    def serialize(self, write: Any, attrs: Any, attributeRenderer: Any) -> None: ...

class _ColorAttr(_Attribute):
    compareAttributes: Any = ...
    color: Any = ...
    ground: Any = ...
    def __init__(self, color: Any, ground: Any) -> None: ...
    def serialize(self, write: Any, attrs: Any, attributeRenderer: Any) -> None: ...

class _ForegroundColorAttr(_ColorAttr):
    def __init__(self, color: Any) -> None: ...

class _BackgroundColorAttr(_ColorAttr):
    def __init__(self, color: Any) -> None: ...

class _ColorAttribute:
    ground: Any = ...
    attrs: Any = ...
    def __init__(self, ground: Any, attrs: Any) -> None: ...
    def __getattr__(self, name: Any): ...

class CharacterAttributesMixin:
    def __getattr__(self, name: Any): ...

class DefaultFormattingState(FancyEqMixin):
    compareAttributes: ClassVar[Sequence[str]] = ...
    def copy(self): ...
    def toVT102(self): ...

class _FormattingStateMixin(DefaultFormattingState):
    def copy(self): ...

def flatten(output: Any, attrs: Any, attributeRenderer: str = ...): ...
