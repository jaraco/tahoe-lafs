from twisted.python.filepath import AbstractFilePath
from typing import Any

class ZipPath(AbstractFilePath):
    archive: Any = ...
    pathInArchive: Any = ...
    path: Any = ...
    def __init__(self, archive: Any, pathInArchive: Any) -> None: ...
    def __cmp__(self, other: Any): ...
    @property
    def sep(self): ...
    def parent(self): ...
    def child(self, path: Any): ...
    def sibling(self, path: Any): ...
    def exists(self): ...
    def isdir(self): ...
    def isfile(self): ...
    def islink(self): ...
    def listdir(self): ...
    def splitext(self): ...
    def basename(self): ...
    def dirname(self): ...
    def open(self, mode: str = ...): ...
    def changed(self) -> None: ...
    def getsize(self): ...
    def getAccessTime(self): ...
    def getModificationTime(self): ...
    def getStatusChangeTime(self): ...

class ZipArchive(ZipPath):
    archive: Any = ...
    path: Any = ...
    zipfile: Any = ...
    pathInArchive: Any = ...
    childmap: Any = ...
    def __init__(self, archivePathname: Any) -> None: ...
    def child(self, path: Any): ...
    def exists(self): ...
    def getAccessTime(self): ...
    def getModificationTime(self): ...
    def getStatusChangeTime(self): ...
