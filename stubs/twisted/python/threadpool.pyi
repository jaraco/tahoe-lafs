from twisted.python import context as context, log as log
from twisted.python.failure import Failure as Failure
from typing import Any, Optional

WorkerStop: Any

class ThreadPool:
    min: int = ...
    max: int = ...
    joined: bool = ...
    started: bool = ...
    workers: int = ...
    name: Any = ...
    threadFactory: Any = ...
    currentThread: Any = ...
    threads: Any = ...
    def __init__(self, minthreads: int = ..., maxthreads: int = ..., name: Optional[Any] = ...): ...
    @property
    def workers(self): ...
    @property
    def working(self): ...
    @property
    def waiters(self): ...
    q: Any = ...
    def start(self) -> None: ...
    def startAWorker(self) -> None: ...
    def stopAWorker(self) -> None: ...
    def callInThread(self, func: Any, *args: Any, **kw: Any) -> None: ...
    def callInThreadWithCallback(self, onResult: Any, func: Any, *args: Any, **kw: Any): ...
    def stop(self) -> None: ...
    def adjustPoolsize(self, minthreads: Optional[Any] = ..., maxthreads: Optional[Any] = ...) -> None: ...
    def dumpStats(self) -> None: ...
