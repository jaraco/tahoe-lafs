from typing import Any, Optional, Tuple

class FormException(Exception):
    descriptions: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class InputError(FormException): ...

class Argument:
    defaultDefault: Any = ...
    name: Any = ...
    allowNone: Any = ...
    default: Any = ...
    shortDesc: Any = ...
    longDesc: Any = ...
    hints: Any = ...
    def __init__(self, name: Any, default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ..., allowNone: int = ...) -> None: ...
    def addHints(self, **kwargs: Any) -> None: ...
    def getHint(self, name: Any, default: Optional[Any] = ...): ...
    def getShortDescription(self): ...
    def getLongDescription(self): ...
    def coerce(self, val: Any) -> None: ...

class String(Argument):
    defaultDefault: str = ...
    min: int = ...
    max: Any = ...
    def __init__(self, name: Any, default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ..., allowNone: int = ..., min: int = ..., max: Optional[Any] = ...) -> None: ...
    def coerce(self, val: Any): ...

class Text(String): ...
class Password(String): ...

class VerifiedPassword(String):
    def coerce(self, vals: Any): ...

class Hidden(String): ...

class Integer(Argument):
    defaultDefault: Optional[int] = ...
    def __init__(self, name: Any, allowNone: int = ..., default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, val: Any): ...

class IntegerRange(Integer):
    min: Any = ...
    max: Any = ...
    def __init__(self, name: Any, min: Any, max: Any, allowNone: int = ..., default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, val: Any): ...

class Float(Argument):
    defaultDefault: Optional[float] = ...
    def __init__(self, name: Any, allowNone: int = ..., default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, val: Any): ...

class Choice(Argument):
    choices: Any = ...
    def __init__(self, name: Any, choices: Any = ..., default: Any = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ..., allowNone: int = ...) -> None: ...
    def coerce(self, inIdent: Any): ...

class Flags(Argument):
    flags: Any = ...
    def __init__(self, name: Any, flags: Any = ..., default: Any = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ..., allowNone: int = ...) -> None: ...
    def coerce(self, inFlagKeys: Any): ...

class CheckGroup(Flags): ...
class RadioGroup(Choice): ...

class Boolean(Argument):
    def coerce(self, inVal: Any): ...

class File(Argument):
    def __init__(self, name: Any, allowNone: int = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, file: Any): ...

def positiveInt(x: Any): ...

class Date(Argument):
    defaultDefault: Optional[Tuple[int, int, int]] = ...
    allowNone: Any = ...
    def __init__(self, name: Any, allowNone: int = ..., default: Optional[Any] = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, args: Any): ...

class Submit(Choice):
    allowNone: Any = ...
    reset: Any = ...
    def __init__(self, name: Any, choices: Any = ..., reset: int = ..., shortDesc: Optional[Any] = ..., longDesc: Optional[Any] = ..., allowNone: int = ..., hints: Optional[Any] = ...) -> None: ...
    def coerce(self, value: Any): ...

class PresentationHint: ...

class MethodSignature:
    methodSignature: Any = ...
    def __init__(self, *sigList: Any) -> None: ...
    def getArgument(self, name: Any): ...
    def method(self, callable: Any, takesRequest: bool = ...): ...

class FormMethod:
    signature: Any = ...
    callable: Any = ...
    takesRequest: Any = ...
    def __init__(self, signature: Any, callable: Any, takesRequest: bool = ...) -> None: ...
    def getArgs(self): ...
    def call(self, *args: Any, **kw: Any): ...
