from incremental import Version
from typing import Any, Callable, Optional

def getDeprecationWarningString(callableThing: Any, version: Any, format: Optional[Any] = ..., replacement: Optional[Any] = ...): ...
def deprecated(version: Any, replacement: Optional[Any] = ...): ...
def deprecatedProperty(version: Any, replacement: Optional[Any] = ...): ...
def getWarningMethod(): ...
def setWarningMethod(newMethod: Any) -> None: ...

class _InternalState:
    def __init__(self, proxy: Any) -> None: ...
    def __getattribute__(self, name: Any): ...
    def __setattr__(self, name: Any, value: Any): ...

class _ModuleProxy:
    def __init__(self, module: Any) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getattribute__(self, name: Any): ...

class _DeprecatedAttribute:
    module: Any = ...
    __name__: Any = ...
    fqpn: Any = ...
    version: Any = ...
    message: Any = ...
    def __init__(self, module: Any, name: Any, version: Any, message: Any) -> None: ...
    def get(self): ...

def deprecatedModuleAttribute(version: Any, message: Any, moduleName: Any, name: Any) -> None: ...
def deprecatedKeywordParameter(version: Version, name: str, replacement: Optional[str]=...) -> Callable[[_Tc], _Tc]: ...
