from twisted.python import reflect as reflect, util as util
from typing import Any, Optional

class UsageError(Exception): ...
error = UsageError

class CoerceParameter:
    options: Any = ...
    coerce: Any = ...
    doc: Any = ...
    def __init__(self, options: Any, coerce: Any) -> None: ...
    def dispatch(self, parameterName: Any, value: Any) -> None: ...

class Options(dict):
    subCommand: Any = ...
    defaultSubCommand: Any = ...
    parent: Any = ...
    completionData: Any = ...
    opts: Any = ...
    defaults: Any = ...
    longOpt: Any = ...
    shortOpt: str = ...
    docs: Any = ...
    synonyms: Any = ...
    def __init__(self) -> None: ...
    __hash__: Any = ...
    def opt_help(self) -> None: ...
    def opt_version(self) -> None: ...
    subOptions: Any = ...
    def parseOptions(self, options: Optional[Any] = ...) -> None: ...
    def postOptions(self) -> None: ...
    def parseArgs(self) -> None: ...
    def getSynopsis(self): ...
    def getUsage(self, width: Optional[Any] = ...): ...

class Completer:
    def __init__(self, descr: Optional[Any] = ..., repeat: bool = ...) -> None: ...

class CompleteFiles(Completer):
    def __init__(self, globPattern: str = ..., **kw: Any) -> None: ...

class CompleteDirs(Completer): ...

class CompleteList(Completer):
    def __init__(self, items: Any, **kw: Any) -> None: ...

class CompleteMultiList(Completer):
    def __init__(self, items: Any, **kw: Any) -> None: ...

class CompleteUsernames(Completer): ...
class CompleteGroups(Completer): ...
class CompleteHostnames(Completer): ...
class CompleteUserAtHost(Completer): ...
class CompleteNetInterfaces(Completer): ...

class Completions:
    descriptions: Any = ...
    multiUse: Any = ...
    mutuallyExclusive: Any = ...
    optActions: Any = ...
    extraActions: Any = ...
    def __init__(self, descriptions: Any = ..., multiUse: Any = ..., mutuallyExclusive: Any = ..., optActions: Any = ..., extraActions: Any = ...) -> None: ...

def docMakeChunks(optList: Any, width: int = ...): ...
def flagFunction(method: Any, name: Optional[Any] = ...): ...
def portCoerce(value: Any): ...
