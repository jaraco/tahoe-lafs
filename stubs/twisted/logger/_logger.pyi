from ._interfaces import ILogObserver as ILogObserver, LogTrace as LogTrace
from ._levels import InvalidLogLevelError as InvalidLogLevelError, LogLevel as LogLevel
from twisted.python.compat import currentframe as currentframe
from twisted.python.failure import Failure as Failure
from typing import Any, Optional

class Logger:
    namespace: Any = ...
    source: Any = ...
    observer: Any = ...
    def __init__(self, namespace: Optional[str]=..., source: Optional[object]=..., observer: Optional[ILogObserver]=...) -> None: ...
    def __get__(self, instance: object, owner: Optional[type]=...) -> object: ...
    def emit(self, level: LogLevel, format: Optional[str]=..., **kwargs: object) -> None: ...
    def failure(self, format: str, failure: Optional[Failure]=..., level: LogLevel=..., **kwargs: object) -> None: ...
    def debug(self, format: Optional[str]=..., **kwargs: object) -> None: ...
    def info(self, format: Optional[str]=..., **kwargs: object) -> None: ...
    def warn(self, format: Optional[str]=..., **kwargs: object) -> None: ...
    def error(self, format: Optional[str]=..., **kwargs: object) -> None: ...
    def critical(self, format: Optional[str]=..., **kwargs: object) -> None: ...
