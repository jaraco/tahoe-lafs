from ._flatten import aFormatter as aFormatter, flatFormat as flatFormat
from twisted.python._tzhelper import FixedOffsetTimeZone as FixedOffsetTimeZone
from twisted.python.compat import unicode as unicode
from twisted.python.failure import Failure as Failure
from twisted.python.reflect import safe_repr as safe_repr
from typing import Any

timeFormatRFC3339: str

def formatEvent(event: Any): ...
def formatUnformattableEvent(event: Any, error: Any): ...
def formatTime(when: Any, timeFormat: Any = ..., default: str = ...): ...
def formatEventAsClassicLogText(event: Any, formatTime: Any = ...): ...

class CallMapping:
    def __init__(self, submapping: Any) -> None: ...
    def __getitem__(self, key: Any): ...

def formatWithCall(formatString: Any, mapping: Any): ...
def eventAsText(event: Any, includeTraceback: bool = ..., includeTimestamp: bool = ..., includeSystem: bool = ..., formatTime: Any = ...): ...
