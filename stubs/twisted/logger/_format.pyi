from ._flatten import aFormatter as aFormatter, flatFormat as flatFormat
from ._interfaces import LogEvent as LogEvent
from collections.abc import Mapping as MappingABC
from twisted.python._tzhelper import FixedOffsetTimeZone as FixedOffsetTimeZone
from twisted.python.failure import Failure as Failure
from twisted.python.reflect import safe_repr as safe_repr
from typing import Any, Callable, Iterator, Mapping, Optional

timeFormatRFC3339: str

def formatEvent(event: LogEvent) -> str: ...
def formatUnformattableEvent(event: LogEvent, error: BaseException) -> str: ...
def formatTime(when: Optional[float], timeFormat: Optional[str]=..., default: str=...) -> str: ...
def formatEventAsClassicLogText(event: LogEvent, formatTime: Callable[[Optional[float]], str]=...) -> Optional[str]: ...

class CallMapping(MappingABC):
    def __init__(self, submapping: Mapping[str, Any]) -> None: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: str) -> Any: ...

def formatWithCall(formatString: str, mapping: Mapping[str, Any]) -> str: ...
def eventAsText(event: LogEvent, includeTraceback: bool=..., includeTimestamp: bool=..., includeSystem: bool=..., formatTime: Callable[[float], str]=...) -> str: ...
