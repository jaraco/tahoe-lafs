from ._file import FileLogObserver as FileLogObserver
from ._flatten import flattenEvent as flattenEvent
from ._interfaces import LogEvent as LogEvent
from ._levels import LogLevel as LogLevel
from ._logger import Logger as Logger
from twisted.python.failure import Failure as Failure
from typing import Any, Dict, IO, Iterable, Optional

log: Any
JSONDict = Dict[str, Any]

def failureAsJSON(failure: Failure) -> JSONDict: ...
def failureFromJSON(failureDict: JSONDict) -> Failure: ...

classInfo: Any
uuidToLoader: Any

def objectLoadHook(aDict: JSONDict) -> object: ...
def objectSaveHook(pythonObject: object) -> JSONDict: ...
def eventAsJSON(event: LogEvent) -> str: ...
def eventFromJSON(eventText: str) -> JSONDict: ...
def jsonFileLogObserver(outFile: IO[Any], recordSeparator: str=...) -> FileLogObserver: ...
def eventsFromJSONLogFile(inFile: IO[Any], recordSeparator: Optional[str]=..., bufferSize: int=...) -> Iterable[LogEvent]: ...
