from ._levels import InvalidLogLevelError as InvalidLogLevelError, LogLevel as LogLevel
from ._observer import ILogObserver as ILogObserver
from constantly import Names
from typing import Any
from zope.interface import Interface

class PredicateResult(Names):
    yes: Any = ...
    no: Any = ...
    maybe: Any = ...

class ILogFilterPredicate(Interface):
    def __call__(event: Any) -> None: ...

def shouldLogEvent(predicates: Any, event: Any): ...

class FilteringLogObserver:
    def __init__(self, observer: Any, predicates: Any, negativeObserver: Any = ...) -> None: ...
    def __call__(self, event: Any) -> None: ...

class LogLevelFilterPredicate:
    defaultLogLevel: Any = ...
    def __init__(self, defaultLogLevel: Any = ...) -> None: ...
    def logLevelForNamespace(self, namespace: Any): ...
    def setLogLevelForNamespace(self, namespace: Any, level: Any) -> None: ...
    def clearLogLevels(self) -> None: ...
    def __call__(self, event: Any): ...
