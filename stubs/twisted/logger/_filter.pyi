from ._interfaces import ILogObserver as ILogObserver, LogEvent as LogEvent
from ._levels import InvalidLogLevelError as InvalidLogLevelError, LogLevel as LogLevel
from ._observer import bitbucketLogObserver as bitbucketLogObserver
from constantly import NamedConstant, Names
from typing import Any, Iterable
from zope.interface import Interface

class PredicateResult(Names):
    yes: Any = ...
    no: Any = ...
    maybe: Any = ...

class ILogFilterPredicate(Interface):
    def __call__(event: LogEvent) -> NamedConstant: ...

def shouldLogEvent(predicates: Iterable[ILogFilterPredicate], event: LogEvent) -> bool: ...

class FilteringLogObserver:
    def __init__(self, observer: ILogObserver, predicates: Iterable[ILogFilterPredicate], negativeObserver: ILogObserver=...) -> None: ...
    def __call__(self, event: LogEvent) -> None: ...

class LogLevelFilterPredicate:
    defaultLogLevel: Any = ...
    def __init__(self, defaultLogLevel: NamedConstant=...) -> None: ...
    def logLevelForNamespace(self, namespace: str) -> NamedConstant: ...
    def setLogLevelForNamespace(self, namespace: str, level: NamedConstant) -> None: ...
    def clearLogLevels(self) -> None: ...
    def __call__(self, event: LogEvent) -> NamedConstant: ...
