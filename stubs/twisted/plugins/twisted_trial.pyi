from twisted.plugin import IPlugin as IPlugin
from twisted.trial.itrial import IReporter as IReporter
from typing import Any, Optional

class _Reporter:
    name: Any = ...
    module: Any = ...
    description: Any = ...
    longOpt: Any = ...
    shortOpt: Any = ...
    klass: Any = ...
    def __init__(self, name: Any, module: Any, description: Any, longOpt: Any, shortOpt: Any, klass: Any) -> None: ...
    @property
    def stream(self) -> None: ...
    @property
    def tbformat(self) -> None: ...
    @property
    def args(self) -> None: ...
    @property
    def shouldStop(self) -> None: ...
    @property
    def separator(self) -> None: ...
    @property
    def testsRun(self) -> None: ...
    def addError(self, test: Any, error: Any) -> None: ...
    def addExpectedFailure(self, test: Any, failure: Any, todo: Optional[Any] = ...) -> None: ...
    def addFailure(self, test: Any, failure: Any) -> None: ...
    def addSkip(self, test: Any, reason: Any) -> None: ...
    def addSuccess(self, test: Any) -> None: ...
    def addUnexpectedSuccess(self, test: Any, todo: Optional[Any] = ...) -> None: ...
    def cleanupErrors(self, errs: Any) -> None: ...
    def done(self) -> None: ...
    def endSuite(self, name: Any) -> None: ...
    def printErrors(self) -> None: ...
    def printSummary(self) -> None: ...
    def startSuite(self, name: Any) -> None: ...
    def startTest(self, method: Any) -> None: ...
    def stopTest(self, method: Any) -> None: ...
    def upDownError(self, userMeth: Any, warn: bool = ..., printStatus: bool = ...) -> None: ...
    def wasSuccessful(self) -> None: ...
    def write(self, string: Any) -> None: ...
    def writeln(self, string: Any) -> None: ...

Tree: Any
BlackAndWhite: Any
Minimal: Any
Classic: Any
Timing: Any
Subunit: Any
