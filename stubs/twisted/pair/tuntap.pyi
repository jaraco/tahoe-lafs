from constantly import Flags
from twisted.internet import abstract
from twisted.python.util import FancyEqMixin, FancyStrMixin
from typing import Any, Optional
from zope.interface import Interface

class TunnelFlags(Flags):
    IFF_TUN: Any = ...
    IFF_TAP: Any = ...
    TUN_FASYNC: Any = ...
    TUN_NOCHECKSUM: Any = ...
    TUN_NO_PI: Any = ...
    TUN_ONE_QUEUE: Any = ...
    TUN_PERSIST: Any = ...
    TUN_VNET_HDR: Any = ...
    IFF_NO_PI: Any = ...
    IFF_ONE_QUEUE: Any = ...
    IFF_VNET_HDR: Any = ...
    IFF_TUN_EXCL: Any = ...

class TunnelAddress(FancyStrMixin, FancyEqMixin):
    compareAttributes: Any = ...
    showAttributes: Any = ...
    type: Any = ...
    name: Any = ...
    def __init__(self, type: Any, name: Any) -> None: ...
    def __getitem__(self, index: Any): ...

class _TunnelDescription: ...

class _IInputOutputSystem(Interface):
    O_RDWR: Any = ...
    O_NONBLOCK: Any = ...
    O_CLOEXEC: Any = ...
    def open(filename: Any, flag: Any, mode: int = ...) -> None: ...
    def ioctl(fd: Any, opt: Any, arg: Optional[Any] = ..., mutate_flag: Optional[Any] = ...) -> None: ...
    def read(fd: Any, limit: Any) -> None: ...
    def write(fd: Any, data: Any) -> None: ...
    def close(fd: Any) -> None: ...
    def sendUDP(datagram: Any, address: Any) -> None: ...
    def receiveUDP(fileno: Any, host: Any, port: Any) -> None: ...

class _RealSystem:
    open: Any = ...
    read: Any = ...
    write: Any = ...
    close: Any = ...
    ioctl: Any = ...
    O_RDWR: Any = ...
    O_NONBLOCK: Any = ...
    O_CLOEXEC: Any = ...

class TuntapPort(abstract.FileDescriptor):
    maxThroughput: Any = ...
    ethernet: int = ...
    interface: Any = ...
    protocol: Any = ...
    maxPacketSize: Any = ...
    logstr: Any = ...
    def __init__(self, interface: Any, proto: Any, maxPacketSize: int = ..., reactor: Optional[Any] = ..., system: Optional[Any] = ...) -> None: ...
    def startListening(self) -> None: ...
    def fileno(self): ...
    def doRead(self) -> None: ...
    def write(self, datagram: Any): ...
    def writeSequence(self, seq: Any) -> None: ...
    disconnecting: bool = ...
    def stopListening(self): ...
    def loseConnection(self) -> None: ...
    connected: int = ...
    def connectionLost(self, reason: Optional[Any] = ...) -> None: ...
    def logPrefix(self): ...
    def getHost(self): ...
