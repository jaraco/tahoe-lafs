from twisted.internet.defer import Deferred as Deferred
from twisted.python import log as log, reflect as reflect
from typing import Any

class NotKnown:
    dependants: Any = ...
    resolved: int = ...
    def __init__(self) -> None: ...
    def addDependant(self, mutableObject: Any, key: Any) -> None: ...
    resolvedObject: Any = ...
    def resolveDependants(self, newObject: Any) -> None: ...
    def __hash__(self) -> Any: ...

class _Container(NotKnown):
    containerType: Any = ...
    l: Any = ...
    locs: Any = ...
    def __init__(self, l: Any, containerType: Any) -> None: ...
    def __setitem__(self, n: Any, obj: Any) -> None: ...

class _Tuple(_Container):
    def __init__(self, l: Any) -> None: ...

class _InstanceMethod(NotKnown):
    my_class: Any = ...
    name: Any = ...
    def __init__(self, im_name: Any, im_self: Any, im_class: Any) -> None: ...
    def __call__(self, *args: Any, **kw: Any) -> None: ...
    def __setitem__(self, n: Any, obj: Any) -> None: ...

class _DictKeyAndValue:
    dict: Any = ...
    def __init__(self, dict: Any) -> None: ...
    value: Any = ...
    key: Any = ...
    def __setitem__(self, n: Any, obj: Any) -> None: ...

class _Dereference(NotKnown):
    id: Any = ...
    def __init__(self, id: Any) -> None: ...

class _Defer(Deferred, NotKnown):
    def __init__(self) -> None: ...
    wasset: int = ...
    def __setitem__(self, n: Any, obj: Any) -> None: ...
    def addDependant(self, dep: Any, key: Any) -> None: ...
