from twisted.persisted import styles
from typing import Any, Optional
from zope.interface import Interface

class IPersistable(Interface):
    def setStyle(style: Any) -> None: ...
    def save(tag: Optional[Any] = ..., filename: Optional[Any] = ..., passphrase: Optional[Any] = ...) -> None: ...

class Persistent:
    style: str = ...
    original: Any = ...
    name: Any = ...
    def __init__(self, original: Any, name: Any) -> None: ...
    def setStyle(self, style: Any) -> None: ...
    def save(self, tag: Optional[Any] = ..., filename: Optional[Any] = ..., passphrase: Optional[Any] = ...) -> None: ...
Persistant = Persistent

class _EverythingEphemeral(styles.Ephemeral):
    initRun: int = ...
    mainMod: Any = ...
    def __init__(self, mainMod: Any) -> None: ...
    def __getattr__(self, key: Any): ...

def load(filename: Any, style: Any): ...
def loadValueFromFile(filename: Any, variable: Any): ...
def guessType(filename: Any): ...
