from twisted.persisted import crefutil as crefutil
from twisted.python import log as log, reflect as reflect
from typing import Any, Optional

class Named:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...

class Class(Named):
    def getSource(self): ...

class Function(Named):
    def getSource(self): ...

class Module(Named):
    def getSource(self): ...

class InstanceMethod:
    name: Any = ...
    klass: Any = ...
    instance: Any = ...
    def __init__(self, name: Any, klass: Any, inst: Any) -> None: ...
    def getSource(self): ...

class _NoStateObj: ...

NoStateObj: Any

class Instance:
    klass: Any = ...
    state: Any = ...
    stateIsDict: int = ...
    def __init__(self, className: Any, __stateObj__: Any = ..., **state: Any) -> None: ...
    def getSource(self): ...

class Ref:
    refnum: Any = ...
    obj: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def setRef(self, num: Any) -> None: ...
    def setObj(self, obj: Any) -> None: ...
    def getSource(self): ...

class Deref:
    refnum: Any = ...
    def __init__(self, num: Any) -> None: ...
    def getSource(self): ...

class Copyreg:
    loadfunc: Any = ...
    state: Any = ...
    def __init__(self, loadfunc: Any, state: Any) -> None: ...
    def getSource(self): ...

def getSource(ao: Any): ...

class NonFormattableDict(Exception): ...

r: Any

def dictToKW(d: Any): ...
def prettify(obj: Any): ...
def indentify(s: Any): ...
def unjellyFromAOT(aot: Any): ...
def unjellyFromSource(stringOrFile: Any): ...

class AOTUnjellier:
    references: Any = ...
    stack: Any = ...
    afterUnjelly: Any = ...
    def __init__(self) -> None: ...
    def unjellyLater(self, node: Any): ...
    def unjellyInto(self, obj: Any, loc: Any, ao: Any): ...
    def callAfter(self, callable: Any, result: Any) -> None: ...
    def unjellyAttribute(self, instance: Any, attrName: Any, ao: Any) -> None: ...
    def unjellyAO(self, ao: Any): ...
    def unjelly(self, ao: Any): ...

def jellyToAOT(obj: Any): ...
def jellyToSource(obj: Any, file: Optional[Any] = ...): ...

class AOTJellier:
    prepared: Any = ...
    stack: Any = ...
    def __init__(self) -> None: ...
    def prepareForRef(self, aoref: Any, object: Any) -> None: ...
    def jellyToAO(self, obj: Any): ...
    def jelly(self, obj: Any): ...
